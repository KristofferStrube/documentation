{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to the elmah.io documentation\n\n\nHere you will find updated documentation on how to use elmah.io.\n\n\nTo get started using elmah.io with ELMAH, please follow the \nLogging to elmah.io from ELMAH\n.\n\n\nNot using ASP.NET MVC? Browse through one of our tutorials beneath the Installation menu.\n\n\nWe integrate with various third party systems. To check out of to do this, select one of the links beneath the Integrations menu.\n\n\nNeed help with something else related to elmah.io? We've collected help articles beneath the Help menu.\n\n\nThis documentation site is built using the wonderful MkDocs. To check out the source, check out the \nelmah.io/documentation repository\n on GitHub.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-the-elmahio-documentation", 
            "text": "Here you will find updated documentation on how to use elmah.io.  To get started using elmah.io with ELMAH, please follow the  Logging to elmah.io from ELMAH .  Not using ASP.NET MVC? Browse through one of our tutorials beneath the Installation menu.  We integrate with various third party systems. To check out of to do this, select one of the links beneath the Integrations menu.  Need help with something else related to elmah.io? We've collected help articles beneath the Help menu.  This documentation site is built using the wonderful MkDocs. To check out the source, check out the  elmah.io/documentation repository  on GitHub.", 
            "title": "Welcome to the elmah.io documentation"
        }, 
        {
            "location": "/logging-to-elmah-io-from-elmah/", 
            "text": "Logging from ELMAH\n\n\nThis article will explain the steps necessary to log errors from your web application into elmah.io. If you don\u2019t know ELMAH, check out our ELMAH Tutorial and visit the nice folks over at the ELMAH project page. Let\u2019s get started.\n\n\nCreate a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like):\n\n\n\n\nSelect a project template of your choice:\n\n\n\n\nNavigate to elmah.io and login using your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log:\n\n\n\n\nWhen created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Copy your log id from step 2 in the installation instructions (located in the dialog):\n\n\n\n\nNavigate back to your web project, right click References and select Manage NuGet Packages:\n\n\n\n\nIn the NuGet dialog, search for elmah.io:\n\n\n\n\nClick Install and input your log id in the dialog appearing during installation of the NuGet package:\n\n\n\n\nYou\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log:\n\n\n\n\nSeeing the error? Congrats! Every error on your application is now logged to elmah.io.", 
            "title": "Logging from ELMAH"
        }, 
        {
            "location": "/logging-to-elmah-io-from-elmah/#logging-from-elmah", 
            "text": "This article will explain the steps necessary to log errors from your web application into elmah.io. If you don\u2019t know ELMAH, check out our ELMAH Tutorial and visit the nice folks over at the ELMAH project page. Let\u2019s get started.  Create a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like):   Select a project template of your choice:   Navigate to elmah.io and login using your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log:   When created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Copy your log id from step 2 in the installation instructions (located in the dialog):   Navigate back to your web project, right click References and select Manage NuGet Packages:   In the NuGet dialog, search for elmah.io:   Click Install and input your log id in the dialog appearing during installation of the NuGet package:   You\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log:   Seeing the error? Congrats! Every error on your application is now logged to elmah.io.", 
            "title": "Logging from ELMAH"
        }, 
        {
            "location": "/logging-to-elmah-io-from-web-api/", 
            "text": "Logging from Web API\n\n\nWeb API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily Richard Dingwall created the \nElmah.Contrib.WebApi\n NuGet package to fix this.\n\n\nTo start logging exceptions from Web API, install the NuGet packages:\n\n\nInstall-Package elmah.io\nInstall-Package Elmah.Contrib.WebApi\n\n\n\n\nAdd the following code to your \nWebApiConfig.cs\n file:\n\n\npublic static class WebApiConfig\n{\n    public static void Register(HttpConfiguration config)\n    {\n        ...\n        config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger());\n        ...\n    }\n}\n\n\n\n\nIExceptionLogger\n is a new concept in Web API 2. It intercepts all thrown exceptions, even errors in controller contructors and routing errors.\n\n\nIf you are using Web API 1, there\u2019s another way to add exception logging:\n\n\nprotected void Application_Start()\n{\n    ...\n    GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute());\n    ...\n}\n\n\n\n\nIn this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged.", 
            "title": "Logging from Web API"
        }, 
        {
            "location": "/logging-to-elmah-io-from-web-api/#logging-from-web-api", 
            "text": "Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily Richard Dingwall created the  Elmah.Contrib.WebApi  NuGet package to fix this.  To start logging exceptions from Web API, install the NuGet packages:  Install-Package elmah.io\nInstall-Package Elmah.Contrib.WebApi  Add the following code to your  WebApiConfig.cs  file:  public static class WebApiConfig\n{\n    public static void Register(HttpConfiguration config)\n    {\n        ...\n        config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger());\n        ...\n    }\n}  IExceptionLogger  is a new concept in Web API 2. It intercepts all thrown exceptions, even errors in controller contructors and routing errors.  If you are using Web API 1, there\u2019s another way to add exception logging:  protected void Application_Start()\n{\n    ...\n    GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute());\n    ...\n}  In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged.", 
            "title": "Logging from Web API"
        }, 
        {
            "location": "/logging-to-elmah-io-from-serilog/", 
            "text": "Logging from Serilog\n\n\nSerilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonse logging library for the NoSQL era\u201d on their project page. Serilog works as other logging frameworks like log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is build on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog.\n\n\nIn this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications, why adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIO NuGet package to your project:\n\n\nInstall-Package Serilog.Sinks.ElmahIO\n\n\n\n\nDuring the installation you will be prompted to input your log id, as with any other installation of elmah.io. To configure Serilog, add the following code to the Application_Start method in global.asax.cs (where LOG_ID is your log id):\n\n\nvar log =\n    new LoggerConfiguration()\n        .WriteTo.ElmahIO(new Guid(\nLOG_ID\n))\n        .CreateLogger();\nLog.Logger = log;\n\n\n\n\nFirst we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case we don\u2019t use IoC, why the log object is set as the public static Logger property, which makes it accessible from everywhere.\n\n\nWhen unhandled exceptions occur, ELMAH ships the errors to elmah.io through the elmah.io NuGet package. No Serilog or even magic is happening there. The fun part begins when we log handled exceptions to Serilog:\n\n\ntry {\n    // Do some stuff which may cause an exception\n}\ncatch (Exception e) {\n    Log.Error(e, \nThe actual error message\n);\n}\n\n\n\n\nThe Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful.", 
            "title": "Logging from Serilog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-serilog/#logging-from-serilog", 
            "text": "Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonse logging library for the NoSQL era\u201d on their project page. Serilog works as other logging frameworks like log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is build on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog.  In this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications, why adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIO NuGet package to your project:  Install-Package Serilog.Sinks.ElmahIO  During the installation you will be prompted to input your log id, as with any other installation of elmah.io. To configure Serilog, add the following code to the Application_Start method in global.asax.cs (where LOG_ID is your log id):  var log =\n    new LoggerConfiguration()\n        .WriteTo.ElmahIO(new Guid( LOG_ID ))\n        .CreateLogger();\nLog.Logger = log;  First we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case we don\u2019t use IoC, why the log object is set as the public static Logger property, which makes it accessible from everywhere.  When unhandled exceptions occur, ELMAH ships the errors to elmah.io through the elmah.io NuGet package. No Serilog or even magic is happening there. The fun part begins when we log handled exceptions to Serilog:  try {\n    // Do some stuff which may cause an exception\n}\ncatch (Exception e) {\n    Log.Error(e,  The actual error message );\n}  The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful.", 
            "title": "Logging from Serilog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-log4net/", 
            "text": "Logging from Log4net\n\n\nlog4net is probably the oldest .NET logging frameworks on the block. Maintained by Apache and developed for more than a decade, makes log4net a good and well supported choice for some types of applications. log4net is based on the concept of appenders, which works pretty much like ELMAH\u2019s error logs. Unlike ELMAH, log4net can have multiple appenders, which makes it possible to log errors to multiple sources. In addition log4net supports different log levels like Info and Warning. While ELMAH doesn\u2019t have the concept of log levels, elmah.io supports all of the levels in log4net.\n\n\nIn this tutorial we\u2019ll add log4net to an ASP.NET MVC project, but the process is almost identical with other project types. Create a new MVC project and install the elmah.io appender:\n\n\nInstall-Package elmah.io.log4net\n\n\n\n\nAdd the following to your AssemblyInfo.cs file:\n\n\n[assembly: log4net.Config.XmlConfigurator(Watch = true)]\n\n\n\n\nAdd the following config section to your web.config file:\n\n\nsection name=\nlog4net\n type=\nlog4net.Config.Log4NetConfigurationSectionHandler, log4net\n /\n\n\n\n\n\nFinally, add the log4net configuration element to web.config:\n\n\nlog4net\n\n  \nappender name=\nElmahIoAppender\n type=\nelmah.io.log4net.ElmahIoAppender, elmah.io.log4net\n\n    \nlogId value=\nLOG_ID\n /\n\n  \n/appender\n\n  \nroot\n\n    \nlevel value=\nINFORMATION\n /\n\n    \nappender-ref ref=\nElmahIoAppender\n /\n\n  \n/root\n\n\n/log4net\n\n\n\n\n\nThat\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace LOG_ID with your actual log Id. To start logging, write your usual log4net log statements:\n\n\nvar log = log4net.LogManager.GetLogger(typeof(HomeController));\ntry\n{\n    log.Info(\nTrying something\n);\n    throw new ApplicationException();\n}\ncatch (ApplicationException ex)\n{\n    log.Error(\nError happening\n, ex);\n}", 
            "title": "Logging from log4net"
        }, 
        {
            "location": "/logging-to-elmah-io-from-log4net/#logging-from-log4net", 
            "text": "log4net is probably the oldest .NET logging frameworks on the block. Maintained by Apache and developed for more than a decade, makes log4net a good and well supported choice for some types of applications. log4net is based on the concept of appenders, which works pretty much like ELMAH\u2019s error logs. Unlike ELMAH, log4net can have multiple appenders, which makes it possible to log errors to multiple sources. In addition log4net supports different log levels like Info and Warning. While ELMAH doesn\u2019t have the concept of log levels, elmah.io supports all of the levels in log4net.  In this tutorial we\u2019ll add log4net to an ASP.NET MVC project, but the process is almost identical with other project types. Create a new MVC project and install the elmah.io appender:  Install-Package elmah.io.log4net  Add the following to your AssemblyInfo.cs file:  [assembly: log4net.Config.XmlConfigurator(Watch = true)]  Add the following config section to your web.config file:  section name= log4net  type= log4net.Config.Log4NetConfigurationSectionHandler, log4net  /   Finally, add the log4net configuration element to web.config:  log4net \n   appender name= ElmahIoAppender  type= elmah.io.log4net.ElmahIoAppender, elmah.io.log4net \n     logId value= LOG_ID  / \n   /appender \n   root \n     level value= INFORMATION  / \n     appender-ref ref= ElmahIoAppender  / \n   /root  /log4net   That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace LOG_ID with your actual log Id. To start logging, write your usual log4net log statements:  var log = log4net.LogManager.GetLogger(typeof(HomeController));\ntry\n{\n    log.Info( Trying something );\n    throw new ApplicationException();\n}\ncatch (ApplicationException ex)\n{\n    log.Error( Error happening , ex);\n}", 
            "title": "Logging from Log4net"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nlog/", 
            "text": "Logging from NLog\n\n\nNLog is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it.\n\n\nTo start logging messages from NLog to elmah.io, you need to install the elmah.io.nlog NuGet package:\n\n\nInstall-Package elmah.io.nlog\n\n\n\n\nTo configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created:\n\n\nextensions\n\n  \nadd assembly=\nElmah.Io.NLog\n/\n\n\n/extensions\n\n\n\ntargets\n\n  \ntarget name=\nelmahio\n type=\nelmah.io\n logId=\ncc6043e9-5d7b-4986-8056-cb76d4d52e5e\n/\n\n\n/targets\n\n\n\nrules\n\n  \nlogger name=\n*\n minlevel=\nInfo\n writeTo=\nelmahio\n /\n\n\n/rules\n\n\n\n\n\nIn the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this but be aware, that your elmah.io log may run full pretty fast, if you log thousands and thousands of trace and debug messages.\n\n\nLog messages to elmah.io, just as with every other target and NLog:\n\n\nlog.Warn(\nThis is a warning message\n);\nlog.Error(new Exception(), \nThis is an error message\n);", 
            "title": "Logging from NLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nlog/#logging-from-nlog", 
            "text": "NLog is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it.  To start logging messages from NLog to elmah.io, you need to install the elmah.io.nlog NuGet package:  Install-Package elmah.io.nlog  To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created:  extensions \n   add assembly= Elmah.Io.NLog /  /extensions  targets \n   target name= elmahio  type= elmah.io  logId= cc6043e9-5d7b-4986-8056-cb76d4d52e5e /  /targets  rules \n   logger name= *  minlevel= Info  writeTo= elmahio  /  /rules   In the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this but be aware, that your elmah.io log may run full pretty fast, if you log thousands and thousands of trace and debug messages.  Log messages to elmah.io, just as with every other target and NLog:  log.Warn( This is a warning message );\nlog.Error(new Exception(),  This is an error message );", 
            "title": "Logging from NLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nancy/", 
            "text": "Logging from Nancy\n\n\nAs with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nTo integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet:\n\n\nInstall-Package Nancy.Elmah\n\n\n\n\nIt\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages likes to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually.\n\n\nIn order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper:\n\n\nusing Nancy;\nusing Nancy.Bootstrapper;\nusing Nancy.Elmah;\nusing Nancy.TinyIoc;\n\nnamespace Elmah.Io.NancyExample\n{\n    public class Bootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n            base.ApplicationStartup(container, pipelines);\n            Elmahlogging.Enable(pipelines, \nelmah\n);\n        }\n    }\n}\n\n\n\n\nThe important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.", 
            "title": "Logging from Nancy"
        }, 
        {
            "location": "/logging-to-elmah-io-from-nancy/#logging-from-nancy", 
            "text": "As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package:  Install-Package elmah.io  To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet:  Install-Package Nancy.Elmah  It\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages likes to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually.  In order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper:  using Nancy;\nusing Nancy.Bootstrapper;\nusing Nancy.Elmah;\nusing Nancy.TinyIoc;\n\nnamespace Elmah.Io.NancyExample\n{\n    public class Bootstrapper : DefaultNancyBootstrapper\n    {\n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n            base.ApplicationStartup(container, pipelines);\n            Elmahlogging.Enable(pipelines,  elmah );\n        }\n    }\n}  The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.", 
            "title": "Logging from Nancy"
        }, 
        {
            "location": "/logging-to-elmah-io-from-servicestack/", 
            "text": "Logging from ServiceStack\n\n\nLogging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project:\n\n\nInstall-Package ServiceStack.Logging.Elmah\nInstall-Package elmah.io\n\n\n\n\nOnce installed, add the following line to your AppHost:\n\n\nLogManager.LogFactory = new ElmahLogFactory(new NLogFactory());\n\n\n\n\nThe above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory.\n\n\nThat\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.", 
            "title": "Logging from ServiceStack"
        }, 
        {
            "location": "/logging-to-elmah-io-from-servicestack/#logging-from-servicestack", 
            "text": "Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project:  Install-Package ServiceStack.Logging.Elmah\nInstall-Package elmah.io  Once installed, add the following line to your AppHost:  LogManager.LogFactory = new ElmahLogFactory(new NLogFactory());  The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory.  That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.", 
            "title": "Logging from ServiceStack"
        }, 
        {
            "location": "/logging-to-elmah-io-from-blogengine-net/", 
            "text": "Logging from BlogEngine.NET\n\n\nBecause BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nDuring the installation you need to input your log id, located in the settings. When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io.\n\n\nSome of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the \nelmah\n element:\n\n\nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nLOG_ID\n /\n\n\n\n\n\nWhere LOG_ID is your log id, located on the settings page.\n\n\nTo wrap this up, you may have noticed that there\u2019s a \nNuGet package\n to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also make sure to cleanup the dual error log configuration:\n\n\nelmah\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n  \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nLOGID\n /\n\n  \nsecurity allowRemoteAccess=\ntrue\n /\n\n  \nerrorLog type=\nElmah.SqlServerCompactErrorLog, Elmah\n connectionStringName=\nelmah-sqlservercompact\n /\n\n\n/elmah", 
            "title": "Logging from BlogEngine.NET"
        }, 
        {
            "location": "/logging-to-elmah-io-from-blogengine-net/#logging-from-blogenginenet", 
            "text": "Because BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package:  Install-Package elmah.io  During the installation you need to input your log id, located in the settings. When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io.  Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the  elmah  element:  errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= LOG_ID  /   Where LOG_ID is your log id, located on the settings page.  To wrap this up, you may have noticed that there\u2019s a  NuGet package  to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also make sure to cleanup the dual error log configuration:  elmah \n   security allowRemoteAccess= false  / \n   errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= LOGID  / \n   security allowRemoteAccess= true  / \n   errorLog type= Elmah.SqlServerCompactErrorLog, Elmah  connectionStringName= elmah-sqlservercompact  /  /elmah", 
            "title": "Logging from BlogEngine.NET"
        }, 
        {
            "location": "/logging-to-elmah-io-from-umbraco/", 
            "text": "Logging from Umbraco\n\n\nSince Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact all of the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net, \nwhich elmah.io also support\n. We have brought all these pieces together into a NuGet package that we call: \nelmah.io.umbraco\n.\n\n\nTo start utilizing elmah.io from your Umbraco site, all you need to do is install the elmah.io.umbraco package:\n\n\nInstall-Package elmah.io.umbraco\n\n\n\n\nHit F5 and watch messages start flowing into elmah.io:", 
            "title": "Logging from Umbraco"
        }, 
        {
            "location": "/logging-to-elmah-io-from-umbraco/#logging-from-umbraco", 
            "text": "Since Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact all of the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net,  which elmah.io also support . We have brought all these pieces together into a NuGet package that we call:  elmah.io.umbraco .  To start utilizing elmah.io from your Umbraco site, all you need to do is install the elmah.io.umbraco package:  Install-Package elmah.io.umbraco  Hit F5 and watch messages start flowing into elmah.io:", 
            "title": "Logging from Umbraco"
        }, 
        {
            "location": "/logging-to-elmah-io-from-jsnlog/", 
            "text": "Logging from JSNLog\n\n\nUsing JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation.\n\n\nStart by installing the JSNLog.Elmah package:\n\n\nInstall-Package JSNLog.Elmah\n\n\n\n\nThis installs and setup JSNLog into your project, using ELMAH as an appender. Then install elmah.io:\n\n\nInstall-Package elmah.io\n\n\n\n\nRemember to input a valid log id during the installation. Add the JSNLog code before any script imports in your _Layout.cshtml file:\n\n\n@Html.Raw(JSNLog.JavascriptLogging.Configure())\n\n\n\n\nYou are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar:\n\n\nJL().fatal(\nlog message\n);\n\n\n\n\nNavigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be build into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file:\n\n\nscript\n\nwindow.onerror = function (errorMsg, url, lineNumber, column, errorObj) {\n\n    // Send object with all data to server side log, using severity fatal,\n    // from logger \nonerrorLogger\n\n    JL(\nonerrorLogger\n).fatalException({\n        \nmsg\n: \nException!\n,\n        \nerrorMsg\n: errorMsg, \nurl\n: url,\n        \nline number\n: lineNumber, \ncolumn\n: column\n    }, errorObj);\n\n    // Tell browser to run its own error handler as well  \n    return false;\n}\n\n/script", 
            "title": "Logging from JSNLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-jsnlog/#logging-from-jsnlog", 
            "text": "Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation.  Start by installing the JSNLog.Elmah package:  Install-Package JSNLog.Elmah  This installs and setup JSNLog into your project, using ELMAH as an appender. Then install elmah.io:  Install-Package elmah.io  Remember to input a valid log id during the installation. Add the JSNLog code before any script imports in your _Layout.cshtml file:  @Html.Raw(JSNLog.JavascriptLogging.Configure())  You are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar:  JL().fatal( log message );  Navigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be build into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file:  script \nwindow.onerror = function (errorMsg, url, lineNumber, column, errorObj) {\n\n    // Send object with all data to server side log, using severity fatal,\n    // from logger  onerrorLogger \n    JL( onerrorLogger ).fatalException({\n         msg :  Exception! ,\n         errorMsg : errorMsg,  url : url,\n         line number : lineNumber,  column : column\n    }, errorObj);\n\n    // Tell browser to run its own error handler as well  \n    return false;\n} /script", 
            "title": "Logging from JSNLog"
        }, 
        {
            "location": "/logging-to-elmah-io-from-console-application/", 
            "text": "Logging from Console\n\n\nEven though elmah.io support various logging frameworks like \nSerilog\n, \nlog4net\n and \nNLog\n, logging from a simple console application is dead simple.\n\n\nTo start logging, install the \nelmah.io.client\n NuGet package:\n\n\nInstall-Package elmah.io.client\n\n\n\n\nCreate a new \nLogger\nand assign it to a variable of type \nILogger\n:\n\n\nElmah.Io.Client.ILogger logger = new Elmah.Io.Client.Logger(new Guid(\nLOGID\n));\n\n\n\n\nReplace \nLOGID\n with your log ID from elmah.io.\n\n\nThe elmah.io client supports logging in different log levels much like other logging frameworks for .NET:\n\n\nlogger.Verbose(\nVerbose message\n);\nlogger.Debug(\nDebug message\n);\nlogger.Information(\nInformation message\n);\nlogger.Warning(\nWarning message\n);\nlogger.Error(\nError message\n);\nlogger.Fatal(\nFatal message\n);", 
            "title": "Logging from Console"
        }, 
        {
            "location": "/logging-to-elmah-io-from-console-application/#logging-from-console", 
            "text": "Even though elmah.io support various logging frameworks like  Serilog ,  log4net  and  NLog , logging from a simple console application is dead simple.  To start logging, install the  elmah.io.client  NuGet package:  Install-Package elmah.io.client  Create a new  Logger and assign it to a variable of type  ILogger :  Elmah.Io.Client.ILogger logger = new Elmah.Io.Client.Logger(new Guid( LOGID ));  Replace  LOGID  with your log ID from elmah.io.  The elmah.io client supports logging in different log levels much like other logging frameworks for .NET:  logger.Verbose( Verbose message );\nlogger.Debug( Debug message );\nlogger.Information( Information message );\nlogger.Warning( Warning message );\nlogger.Error( Error message );\nlogger.Fatal( Fatal message );", 
            "title": "Logging from Console"
        }, 
        {
            "location": "/logging-to-elmah-io-from-sitefinity/", 
            "text": "Logging from Sitefinity\n\n\nSitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box.\n\n\nTo install elmah.io in a Sitefinity website, start by opening the website in Visual Studio by selecting \nFile | Open Web Site...\n and navigate to the Sitefinity projects folder (something similar to this: \nC:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default\n).\n\n\nRight click the web site and install the elmah.io NuGet package or install it through Package Manager Console:\n\n\nInstall-Package elmah.io\n\n\n\n\nDuring installation you will be prompted for your log id, available from the settings page of your log on elmah.io.\n\n\nThat's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right click the web site and add a new Web Form named ELMAH.aspx. In the code behind file add the following code:\n\n\nprotected void Page_Load(object sender, EventArgs e)\n{\n    throw new ApplicationException();\n}\n\n\n\n\nStart the website and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death and a new error will pop up on elmah.io.", 
            "title": "Logging from Sitefinity"
        }, 
        {
            "location": "/logging-to-elmah-io-from-sitefinity/#logging-from-sitefinity", 
            "text": "Sitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box.  To install elmah.io in a Sitefinity website, start by opening the website in Visual Studio by selecting  File | Open Web Site...  and navigate to the Sitefinity projects folder (something similar to this:  C:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default ).  Right click the web site and install the elmah.io NuGet package or install it through Package Manager Console:  Install-Package elmah.io  During installation you will be prompted for your log id, available from the settings page of your log on elmah.io.  That's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right click the web site and add a new Web Form named ELMAH.aspx. In the code behind file add the following code:  protected void Page_Load(object sender, EventArgs e)\n{\n    throw new ApplicationException();\n}  Start the website and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death and a new error will pop up on elmah.io.", 
            "title": "Logging from Sitefinity"
        }, 
        {
            "location": "/configure-elmah-io-manually/", 
            "text": "Configure elmah.io manually\n\n\nThe \nelmah.io NuGet package\n normally adds all of the necessary configuration, in order to get up and running with elmah.io. In fact this is one of our killer features and our customers tells us, that we have the simplest installer on the market. In some cases you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio.\n\n\nStart by installing the elmah.io package:\n\n\nInstall-Package elmah.io\n\n\n\n\nInput your log ID during the installation. Don't worry if the configuration isn't added, since we will verify this later.\n\n\nAdd the following to the \nconfigSections\n element in your web.config:\n\n\nsectionGroup name=\nelmah\n\n  \nsection name=\nsecurity\n requirePermission=\nfalse\n type=\nElmah.SecuritySectionHandler, Elmah\n /\n\n  \nsection name=\nerrorLog\n requirePermission=\nfalse\n type=\nElmah.ErrorLogSectionHandler, Elmah\n /\n\n  \nsection name=\nerrorMail\n requirePermission=\nfalse\n type=\nElmah.ErrorMailSectionHandler, Elmah\n /\n\n  \nsection name=\nerrorFilter\n requirePermission=\nfalse\n type=\nElmah.ErrorFilterSectionHandler, Elmah\n /\n\n\n/sectionGroup\n\n\n\n\n\nAdd the following to the \nhttpModules\n element (inside \nsystem.web\n) in your web.config:\n\n\nadd name=\nErrorLog\n type=\nElmah.ErrorLogModule, Elmah\n /\n\n\nadd name=\nErrorMail\n type=\nElmah.ErrorMailModule, Elmah\n /\n\n\nadd name=\nErrorFilter\n type=\nElmah.ErrorFilterModule, Elmah\n/\n\n\n\n\n\nAdd the following to the \nmodules\n element (inside \nsystem.webServer\n) in your web.config:\n\n\nadd name=\nErrorLog\n type=\nElmah.ErrorLogModule, Elmah\n preCondition=\nmanagedHandler\n /\n\n\nadd name=\nErrorMail\n type=\nElmah.ErrorMailModule, Elmah\n preCondition=\nmanagedHandler\n /\n\n\nadd name=\nErrorFilter\n type=\nElmah.ErrorFilterModule, Elmah\n preCondition=\nmanagedHandler\n /\n\n\n\n\n\nAdd the following as a root element beneath the \nconfiguration\n element in your web.config:\n\n\nelmah\n\n    \nsecurity allowRemoteAccess=\nfalse\n /\n\n    \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nINSERT_LOG_ID\n /\n\n\n/elmah\n\n\n\n\n\nReplace \nINSERT_LOG_ID\n with your log ID from the elmah.io website.\n\n\nThat's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :)\n\n\nIn case you need to access your error log on /elmah.axd, you need to add the following to the \nconfiguration\n element in your web.config:\n\n\nlocation path=\nelmah.axd\n inheritInChildApplications=\nfalse\n\n    \nsystem.web\n\n        \nhttpHandlers\n\n            \nadd verb=\nPOST,GET,HEAD\n path=\nelmah.axd\n type=\nElmah.ErrorLogPageFactory, Elmah\n /\n\n        \n/httpHandlers\n\n    \n/system.web\n\n    \nsystem.webServer\n\n        \nhandlers\n\n            \nadd name=\nELMAH\n verb=\nPOST,GET,HEAD\n path=\nelmah.axd\n type=\nElmah.ErrorLogPageFactory, Elmah\n preCondition=\nintegratedMode\n /\n\n        \n/handlers\n\n    \n/system.webServer\n\n\n/location", 
            "title": "Configure elmah.io manually"
        }, 
        {
            "location": "/configure-elmah-io-manually/#configure-elmahio-manually", 
            "text": "The  elmah.io NuGet package  normally adds all of the necessary configuration, in order to get up and running with elmah.io. In fact this is one of our killer features and our customers tells us, that we have the simplest installer on the market. In some cases you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio.  Start by installing the elmah.io package:  Install-Package elmah.io  Input your log ID during the installation. Don't worry if the configuration isn't added, since we will verify this later.  Add the following to the  configSections  element in your web.config:  sectionGroup name= elmah \n   section name= security  requirePermission= false  type= Elmah.SecuritySectionHandler, Elmah  / \n   section name= errorLog  requirePermission= false  type= Elmah.ErrorLogSectionHandler, Elmah  / \n   section name= errorMail  requirePermission= false  type= Elmah.ErrorMailSectionHandler, Elmah  / \n   section name= errorFilter  requirePermission= false  type= Elmah.ErrorFilterSectionHandler, Elmah  /  /sectionGroup   Add the following to the  httpModules  element (inside  system.web ) in your web.config:  add name= ErrorLog  type= Elmah.ErrorLogModule, Elmah  /  add name= ErrorMail  type= Elmah.ErrorMailModule, Elmah  /  add name= ErrorFilter  type= Elmah.ErrorFilterModule, Elmah /   Add the following to the  modules  element (inside  system.webServer ) in your web.config:  add name= ErrorLog  type= Elmah.ErrorLogModule, Elmah  preCondition= managedHandler  /  add name= ErrorMail  type= Elmah.ErrorMailModule, Elmah  preCondition= managedHandler  /  add name= ErrorFilter  type= Elmah.ErrorFilterModule, Elmah  preCondition= managedHandler  /   Add the following as a root element beneath the  configuration  element in your web.config:  elmah \n     security allowRemoteAccess= false  / \n     errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= INSERT_LOG_ID  /  /elmah   Replace  INSERT_LOG_ID  with your log ID from the elmah.io website.  That's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :)  In case you need to access your error log on /elmah.axd, you need to add the following to the  configuration  element in your web.config:  location path= elmah.axd  inheritInChildApplications= false \n     system.web \n         httpHandlers \n             add verb= POST,GET,HEAD  path= elmah.axd  type= Elmah.ErrorLogPageFactory, Elmah  / \n         /httpHandlers \n     /system.web \n     system.webServer \n         handlers \n             add name= ELMAH  verb= POST,GET,HEAD  path= elmah.axd  type= Elmah.ErrorLogPageFactory, Elmah  preCondition= integratedMode  / \n         /handlers \n     /system.webServer  /location", 
            "title": "Configure elmah.io manually"
        }, 
        {
            "location": "/configure-elmah-io-from-code/", 
            "text": "Configure elmah.io from code\n\n\nYou typically configure elmah.io in your \nweb.config\n file. With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code as well:\n\n\nusing Elmah;\nusing System.Collections.Generic;\nusing System.ComponentModel.Design;\n\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(EvernoteMvcExample.ElmahConfig), \nStart\n)]\n\nnamespace EvernoteMvcExample\n{\n    public static class ElmahConfig\n    {\n        public static void Start()\n        {\n            ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current);\n        }\n\n        private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp)\n        {\n            return context =\n\n            {\n                var container = new ServiceContainer(sp(context));\n\n                var config = new Dictionary\nstring, string\n();\n                config[\nLogId\n] = \n6aeabe21-e2e9-4d07-a338-c2380e575fc1\n;\n                var log = new Elmah.Io.ErrorLog(config);\n\n                container.AddService(typeof(ErrorLog), log);\n                return container;\n            };\n        }\n    }\n}\n\n\n\n\nLet\u2019s look at the code. In line 5, the \nElmahConfig\n class is configured as a \nPreApplicationStartMethod\n which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. In line 13 the \nServiceCenter.Current\n property is set to the return type of the \nCreateServiceProviderQueryHandler\n method. This method is where the magic happens. Besides creating the new \nServiceContainer\n, we actually created the \nElmah.Io.ErrorLog\n class normally configured through XML. The Dictionary should contain the LogId found on the dashboard of the elmah.io website.\n\n\nThat\u2019s it! You no longer need the \nelmah\n element in your \nweb.config\n file.", 
            "title": "Configure elmah.io from code"
        }, 
        {
            "location": "/configure-elmah-io-from-code/#configure-elmahio-from-code", 
            "text": "You typically configure elmah.io in your  web.config  file. With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code as well:  using Elmah;\nusing System.Collections.Generic;\nusing System.ComponentModel.Design;\n\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof(EvernoteMvcExample.ElmahConfig),  Start )]\n\nnamespace EvernoteMvcExample\n{\n    public static class ElmahConfig\n    {\n        public static void Start()\n        {\n            ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current);\n        }\n\n        private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp)\n        {\n            return context = \n            {\n                var container = new ServiceContainer(sp(context));\n\n                var config = new Dictionary string, string ();\n                config[ LogId ] =  6aeabe21-e2e9-4d07-a338-c2380e575fc1 ;\n                var log = new Elmah.Io.ErrorLog(config);\n\n                container.AddService(typeof(ErrorLog), log);\n                return container;\n            };\n        }\n    }\n}  Let\u2019s look at the code. In line 5, the  ElmahConfig  class is configured as a  PreApplicationStartMethod  which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. In line 13 the  ServiceCenter.Current  property is set to the return type of the  CreateServiceProviderQueryHandler  method. This method is where the magic happens. Besides creating the new  ServiceContainer , we actually created the  Elmah.Io.ErrorLog  class normally configured through XML. The Dictionary should contain the LogId found on the dashboard of the elmah.io website.  That\u2019s it! You no longer need the  elmah  element in your  web.config  file.", 
            "title": "Configure elmah.io from code"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/", 
            "text": "Integrate with Slack\n\n\nStart by copying your Slack-token from the \nAPI page\n. We will need this when setting up the integration.\n\n\n\n\nOn elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:\n\n\n\n\nHit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL):\n\n\n\n\n\n\n\n\nField\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://slack.com/api/chat.postMessage?token=YOUR_TOKEN\nchannel=YOUR_CHANNEL\ntext=$message\nusername=elmah.io\n\n\n\n\n\n\n\n\nThe final result should look like this:\n\n\n\n\nDon't worry about the empty Content-Type and Body. Everything needed to post the message to Slack is embedded into the URL. To learn more about the structure of the URL, jump to \nBreaking it down\n\n\nClick the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:\n\n\n\n\nBreaking it down\n\n\nYou should have received a message on Slack already. To learn more about how to specify and extend the configuration for Slack, this is the section for you. Let's start by inspecting the simplest possible Slack URL:\n\n\nhttps://slack.com/api/chat.postMessage?token=xxxx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxx-xxxxxxxxxx\nchannel=%23general\ntext=$message\n\n\nThe initial part (\nhttps://slack.com/api/chat.postMessage\n) points out the method to invoke on Slack. In this case we want to post a new message (\nchat.postMessage\n). The \ntoken\n query parameter contains your access token as found on the \nAPI page\n.\n\n\nThe \nchannel\n parameter contains the name or the ID of the channel you want to post the chat message to. In the example above, I specify the #general channel, but it can be any channel on your account. Observe how I've URL encoded the \n#\n character.\n\n\nNext up is the \ntext\n parameter which contains the actual message we want to post to #general. By inserting \n$message\n, I tell elmah.io to insert the title or headline of the logged message. In case of an exception, this will be the exception message generated at your website. elmah.io supports a range of variables, available on the Rules tab on the log settings.\n\n\nTo add a sender name other than \nBot\n, add a \nusername\n parameter like this: \nusername=elmah.io\n.\n\n\nIf you want a nice profile icon as well, you can append the following parameter: \nicon_url=https://elmah.io/icons/AppIcon50x50.png\n. This tells Slack to show a nice elmah.io icon next to the chat messages.", 
            "title": "Slack"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/#integrate-with-slack", 
            "text": "Start by copying your Slack-token from the  API page . We will need this when setting up the integration.   On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:   Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL):     Field  Value      Method  POST    URL  https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io     The final result should look like this:   Don't worry about the empty Content-Type and Body. Everything needed to post the message to Slack is embedded into the URL. To learn more about the structure of the URL, jump to  Breaking it down  Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:", 
            "title": "Integrate with Slack"
        }, 
        {
            "location": "/integrate-elmah-io-with-slack/#breaking-it-down", 
            "text": "You should have received a message on Slack already. To learn more about how to specify and extend the configuration for Slack, this is the section for you. Let's start by inspecting the simplest possible Slack URL:  https://slack.com/api/chat.postMessage?token=xxxx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxx-xxxxxxxxxx channel=%23general text=$message  The initial part ( https://slack.com/api/chat.postMessage ) points out the method to invoke on Slack. In this case we want to post a new message ( chat.postMessage ). The  token  query parameter contains your access token as found on the  API page .  The  channel  parameter contains the name or the ID of the channel you want to post the chat message to. In the example above, I specify the #general channel, but it can be any channel on your account. Observe how I've URL encoded the  #  character.  Next up is the  text  parameter which contains the actual message we want to post to #general. By inserting  $message , I tell elmah.io to insert the title or headline of the logged message. In case of an exception, this will be the exception message generated at your website. elmah.io supports a range of variables, available on the Rules tab on the log settings.  To add a sender name other than  Bot , add a  username  parameter like this:  username=elmah.io .  If you want a nice profile icon as well, you can append the following parameter:  icon_url=https://elmah.io/icons/AppIcon50x50.png . This tells Slack to show a nice elmah.io icon next to the chat messages.", 
            "title": "Breaking it down"
        }, 
        {
            "location": "/integrate-elmah-io-with-hipchat/", 
            "text": "Integrate with HipChat\n\n\nBefore we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page. Create a new token with the Notification type and label it something meaningful:\n\n\n\n\nWe will need the generated token in a minute, so keep that tab open.\n\n\nOn elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:\n\n\n\n\nHit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM):\n\n\n\n\n\n\n\n\nField\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nURL\n\n\nhttps://api.hipchat.com/v1/rooms/message?format=json\nauth_token=YOUR_TOKEN\n\n\n\n\n\n\nContent Type\n\n\napplication/x-www-form-urlencoded\n\n\n\n\n\n\nBody\n\n\nroom_id=YOUR_ROOM\nfrom=elmah.io\nmessage=$message\n\n\n\n\n\n\n\n\nThe final result should look like this:\n\n\n\n\nClick the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:", 
            "title": "HipChat"
        }, 
        {
            "location": "/integrate-elmah-io-with-hipchat/#integrate-with-hipchat", 
            "text": "Before we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page. Create a new token with the Notification type and label it something meaningful:   We will need the generated token in a minute, so keep that tab open.  On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot:   Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM):     Field  Value      Method  POST    URL  https://api.hipchat.com/v1/rooms/message?format=json auth_token=YOUR_TOKEN    Content Type  application/x-www-form-urlencoded    Body  room_id=YOUR_ROOM from=elmah.io message=$message     The final result should look like this:   Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:", 
            "title": "Integrate with HipChat"
        }, 
        {
            "location": "/integrate-elmah-io-with-zapier/", 
            "text": "Integrate with Zapier\n\n\nIn short Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged.\n\n\nCreate a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown:\n\n\n\n\nSelect elmah.io in the \nChoose a Trigger app\u2026\n dropdown and then select \nNew Error\n in the \nChoose a Trigger\u2026\n dropdown. In the \nChoose an Action app\u2026\n select \nGitHub\n and select \nCreate Issue\n in the \nChoose an Action\u2026\n dropdown.\n\n\n\n\nThis configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue.\n\n\nIn section 2 select the \nConnect a different elmah.io Account\n and input a name and the log id of the log you want to integrate:\n\n\n\n\nAuthorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click \nContinue\n. Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error:\n\n\n\n\nIn step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected \nbug\n as a label.\n\n\n\n\nTest the Zap an hit \nContinue\n:\n\n\n\n\nFinally, name your Zap and click the \nTurn Zap on\n button:\n\n\n\n\nWhen future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!", 
            "title": "Zapier"
        }, 
        {
            "location": "/integrate-elmah-io-with-zapier/#integrate-with-zapier", 
            "text": "In short Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged.  Create a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown:   Select elmah.io in the  Choose a Trigger app\u2026  dropdown and then select  New Error  in the  Choose a Trigger\u2026  dropdown. In the  Choose an Action app\u2026  select  GitHub  and select  Create Issue  in the  Choose an Action\u2026  dropdown.   This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue.  In section 2 select the  Connect a different elmah.io Account  and input a name and the log id of the log you want to integrate:   Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click  Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error:   In step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected  bug  as a label.   Test the Zap an hit  Continue :   Finally, name your Zap and click the  Turn Zap on  button:   When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!", 
            "title": "Integrate with Zapier"
        }, 
        {
            "location": "/logging-custom-data/", 
            "text": "Logging custom data\n\n\nELMAH stores a lot of contextual information when an error occur. Things like cookies, stack trace, server variables and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client.\n\n\nLet\u2019s look at some code. You have two options of decorating your errors with custom variables.\n\n\nUse the \nData\n dictionary on .NET\u2019s Exception type\n\n\nI talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named \nData\n and of type \nIDictionary\n. The \nData\n dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to \nelmah.io\u2019s API\n. To log custom data using \nData\n, just add a new key/value pair to the \nData\n dictionary:\n\n\ntry\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add(\nInputValueWas\n, inputValue);\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nIn the example I add a custom variable named \nInputValueWas\n with the value of the \ninputValue\n variable. This way I will be able to see which input value caused the exception.\n\n\nUse the \nOnMessage\n hook in the elmah.io client\n\n\nYou may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged:\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) =\n\n{\n    if (args.Message.Data == null) args.Message.Data = new List\nItem\n();\n    args.Message.Data.Add(new Item { Key = \nSomeOtherVariable\n, Value = someVariable });\n};\n\n\n\n\nYou may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception.\n\n\nIn the code example I subscribe a new event handler to the \nOnMessage\n event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the \nData\n dictionary of the message logged to elmah.io.\n\n\nLooking at your custom variables\n\n\nLogging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details:\n\n\n\n\nLike the content in the other tabs of the error details, you will be able to filter results by the variable key.", 
            "title": "Logging custom data"
        }, 
        {
            "location": "/logging-custom-data/#logging-custom-data", 
            "text": "ELMAH stores a lot of contextual information when an error occur. Things like cookies, stack trace, server variables and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client.  Let\u2019s look at some code. You have two options of decorating your errors with custom variables.  Use the  Data  dictionary on .NET\u2019s Exception type  I talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named  Data  and of type  IDictionary . The  Data  dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to  elmah.io\u2019s API . To log custom data using  Data , just add a new key/value pair to the  Data  dictionary:  try\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add( InputValueWas , inputValue);\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  In the example I add a custom variable named  InputValueWas  with the value of the  inputValue  variable. This way I will be able to see which input value caused the exception.  Use the  OnMessage  hook in the elmah.io client  You may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged:  Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) = \n{\n    if (args.Message.Data == null) args.Message.Data = new List Item ();\n    args.Message.Data.Add(new Item { Key =  SomeOtherVariable , Value = someVariable });\n};  You may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception.  In the code example I subscribe a new event handler to the  OnMessage  event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the  Data  dictionary of the message logged to elmah.io.  Looking at your custom variables  Logging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details:   Like the content in the other tabs of the error details, you will be able to filter results by the variable key.", 
            "title": "Logging custom data"
        }, 
        {
            "location": "/logging-errors-programmatically/", 
            "text": "Logging errors programmatically\n\n\nSo you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d\n\n\nYou are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code:\n\n\ntry\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    // What to do?\n}\n\n\n\n\nObviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s \nErrorSignal\n class we can log the error:\n\n\ntry\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nWe call the static method \nFromCurrentContext\n on the \nErrorSignal\n class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint.\n\n\nIn the example above, I use the \nFromCurrentContext\n helper to create a new instance of \nErrorSignal\n. ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with \nnull\n as the http context:\n\n\nErrorLog.GetDefault(null).Log(new Error(e));", 
            "title": "Logging errors programmatically"
        }, 
        {
            "location": "/logging-errors-programmatically/#logging-errors-programmatically", 
            "text": "So you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d  You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code:  try\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    // What to do?\n}  Obviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s  ErrorSignal  class we can log the error:  try\n{\n    int i = 0;\n    int result = 42 / i;\n}\ncatch (DivideByZeroException e)\n{\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  We call the static method  FromCurrentContext  on the  ErrorSignal  class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint.  In the example above, I use the  FromCurrentContext  helper to create a new instance of  ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with  null  as the http context:  ErrorLog.GetDefault(null).Log(new Error(e));", 
            "title": "Logging errors programmatically"
        }, 
        {
            "location": "/logging-through-a-http-proxy/", 
            "text": "Logging through a HTTP proxy\n\n\nYou may find yourself in a situation, where your production web servers isn\u2019t allowed HTTP requests towards the public internet. This also impacts the elmah.io client, which requires access to the URL https://elmah.io/api. A popular choice of implementing this kind of restriction nowadays, seem to be through a HTTP proxy like squid.\n\n\nLuckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through \nweb.config\n:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nconfiguration\n\n  \nconfigSections\n\n    \nsectionGroup name=\nelmah\n\n      \nsection name=\nsecurity\n requirePermission=\nfalse\n type=\nElmah.SecuritySectionHandler, Elmah\n /\n\n      \nsection name=\nerrorLog\n requirePermission=\nfalse\n type=\nElmah.ErrorLogSectionHandler, Elmah\n /\n\n      \nsection name=\nerrorMail\n requirePermission=\nfalse\n type=\nElmah.ErrorMailSectionHandler, Elmah\n /\n\n      \nsection name=\nerrorFilter\n requirePermission=\nfalse\n type=\nElmah.ErrorFilterSectionHandler, Elmah\n /\n\n    \n/sectionGroup\n\n  \n/configSections\n\n  \nelmah\n\n    \nsecurity allowRemoteAccess=\nfalse\n /\n\n    \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\n59AA232A-F80A-4414-801D-F305D8AE55D7\n /\n\n  \n/elmah\n\n  \nsystem.net\n\n    \ndefaultProxy\n\n      \nproxy usesystemdefault=\nTrue\n proxyaddress=\nhttp://192.168.0.1:3128\n bypassonlocal=\nFalse\n/\n\n    \n/defaultProxy\n\n  \n/system.net\n\n\n/configuration\n\n\n\n\n\nThe above example is of course greatly simplified.\n\n\nThe elmah.io client automatically picks up the \ndefaultProxy\n configuration through the \nsystem.net\n element. \ndefaultProxy\n tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port your are using).", 
            "title": "Logging through a HTTP proxy"
        }, 
        {
            "location": "/logging-through-a-http-proxy/#logging-through-a-http-proxy", 
            "text": "You may find yourself in a situation, where your production web servers isn\u2019t allowed HTTP requests towards the public internet. This also impacts the elmah.io client, which requires access to the URL https://elmah.io/api. A popular choice of implementing this kind of restriction nowadays, seem to be through a HTTP proxy like squid.  Luckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through  web.config :  ?xml version= 1.0  encoding= utf-8 ?  configuration \n   configSections \n     sectionGroup name= elmah \n       section name= security  requirePermission= false  type= Elmah.SecuritySectionHandler, Elmah  / \n       section name= errorLog  requirePermission= false  type= Elmah.ErrorLogSectionHandler, Elmah  / \n       section name= errorMail  requirePermission= false  type= Elmah.ErrorMailSectionHandler, Elmah  / \n       section name= errorFilter  requirePermission= false  type= Elmah.ErrorFilterSectionHandler, Elmah  / \n     /sectionGroup \n   /configSections \n   elmah \n     security allowRemoteAccess= false  / \n     errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= 59AA232A-F80A-4414-801D-F305D8AE55D7  / \n   /elmah \n   system.net \n     defaultProxy \n       proxy usesystemdefault= True  proxyaddress= http://192.168.0.1:3128  bypassonlocal= False / \n     /defaultProxy \n   /system.net  /configuration   The above example is of course greatly simplified.  The elmah.io client automatically picks up the  defaultProxy  configuration through the  system.net  element.  defaultProxy  tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port your are using).", 
            "title": "Logging through a HTTP proxy"
        }, 
        {
            "location": "/logging-to-multiple-elmah-logs/", 
            "text": "Logging to multiple logs\n\n\nUnfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your \nweb.config\n file, you will have code looking like this somewhere:\n\n\nelmah\n\n    \nerrorLog type=\nElmah.SqlErrorLog, Elmah\n connectionStringName=\nelmah\n/\n\n\n/elmah\n\n\n\n\n\nAs you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more \nerrorLog\n elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the \nelmah.io.core\n NuGet package and add the following code to your \nglobal.asax.cs\n file:\n\n\nvoid ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid(\ninsert your log id\n)));\n    elmahIoLog.Log(args.Entry.Error);\n}\n\n\n\n\nIn the above code, we listen for the Logged event by simply declaring a method named \nErrorLog_Logged\n. When called we create a new (Elmah.Io.)ErrorLog instance with the GUID of your log at elmah.io. Next we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io.\n\n\nIf you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this:\n\n\nvoid ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    if (args.Entry.Error.StatusCode == 500)\n    {\n        var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid(\ninsert your log id\n)));\n        elmahIoLog.Log(args.Entry.Error);\n    }\n}\n\n\n\n\nThis time we only begin logging to elmah.io, if the thrown exception is of type \nHttpException\n and contains a HTTP status code of \n500\n. This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the \nErrorLog_Filtering\n method instead. This method is called before \nErrorLog_Logged\n and before actually logging the error to your normal error log.", 
            "title": "Logging to multiple logs"
        }, 
        {
            "location": "/logging-to-multiple-elmah-logs/#logging-to-multiple-logs", 
            "text": "Unfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your  web.config  file, you will have code looking like this somewhere:  elmah \n     errorLog type= Elmah.SqlErrorLog, Elmah  connectionStringName= elmah /  /elmah   As you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more  errorLog  elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the  elmah.io.core  NuGet package and add the following code to your  global.asax.cs  file:  void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid( insert your log id )));\n    elmahIoLog.Log(args.Entry.Error);\n}  In the above code, we listen for the Logged event by simply declaring a method named  ErrorLog_Logged . When called we create a new (Elmah.Io.)ErrorLog instance with the GUID of your log at elmah.io. Next we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io.  If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this:  void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args)\n{\n    if (args.Entry.Error.StatusCode == 500)\n    {\n        var elmahIoLog = new Elmah.Io.ErrorLog(new Logger(new Guid( insert your log id )));\n        elmahIoLog.Log(args.Entry.Error);\n    }\n}  This time we only begin logging to elmah.io, if the thrown exception is of type  HttpException  and contains a HTTP status code of  500 . This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the  ErrorLog_Filtering  method instead. This method is called before  ErrorLog_Logged  and before actually logging the error to your normal error log.", 
            "title": "Logging to multiple logs"
        }, 
        {
            "location": "/remove-sensitive-form-data/", 
            "text": "Remove sensitive form data\n\n\nYou may have something like usernames and passwords in form posts on your website. Since ELMAH automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the internet, is a potential hacking victim.\n\n\nThere\u2019s no build-in feature to remove data from the error data, before logging it to ELMAH. Luckily \nELMAH\u2019s Error Filtering\n feature lets you accomplish that anyway by writing a bit of additional code in your \nglobal.asax.cs\n file:\n\n\nvoid ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args)\n{\n    var httpContext = args.Context as HttpContext;\n    if (httpContext != null \n httpContext.Request.Form.AllKeys.Any(k =\n k == \nSomeSecretFormField\n))\n    {\n        var error = new Error(args.Exception, httpContext);\n        error.Form.Set(\nSomeSecretFormField\n, \n***hidden***\n);\n        ErrorLog.GetDefault(httpContext).Log(error);\n        args.Dismiss();\n    }\n}\n\n\n\n\nThe \nErrorLog_Filtering\n method is called by ELMAH, every time a new exception is about to get logged. The purpose of the method is to be able to tell ELMAH not to log certain kinds of exceptions, but in this case we use the method as a hook to modify the logged error. Since you cannot modify the Form property of the HTTP request, we create a new Error object and update the value of the \u201cSomeSecretFormField\u201d key. The new Error object is then manually logged to the default ELMAH error logger and we dismiss the original error. It\u2019s essential to remember to call \nDismiss()\n, because if you don\u2019t, the original error containing the sensitive form field is logged as well.", 
            "title": "Remove sensitive form data"
        }, 
        {
            "location": "/remove-sensitive-form-data/#remove-sensitive-form-data", 
            "text": "You may have something like usernames and passwords in form posts on your website. Since ELMAH automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the internet, is a potential hacking victim.  There\u2019s no build-in feature to remove data from the error data, before logging it to ELMAH. Luckily  ELMAH\u2019s Error Filtering  feature lets you accomplish that anyway by writing a bit of additional code in your  global.asax.cs  file:  void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args)\n{\n    var httpContext = args.Context as HttpContext;\n    if (httpContext != null   httpContext.Request.Form.AllKeys.Any(k =  k ==  SomeSecretFormField ))\n    {\n        var error = new Error(args.Exception, httpContext);\n        error.Form.Set( SomeSecretFormField ,  ***hidden*** );\n        ErrorLog.GetDefault(httpContext).Log(error);\n        args.Dismiss();\n    }\n}  The  ErrorLog_Filtering  method is called by ELMAH, every time a new exception is about to get logged. The purpose of the method is to be able to tell ELMAH not to log certain kinds of exceptions, but in this case we use the method as a hook to modify the logged error. Since you cannot modify the Form property of the HTTP request, we create a new Error object and update the value of the \u201cSomeSecretFormField\u201d key. The new Error object is then manually logged to the default ELMAH error logger and we dismiss the original error. It\u2019s essential to remember to call  Dismiss() , because if you don\u2019t, the original error containing the sensitive form field is logged as well.", 
            "title": "Remove sensitive form data"
        }, 
        {
            "location": "/use-extended-user-details-without-email-as-id/", 
            "text": "Use Extended User Details\n\n\nwithout Email as Id\n\n\nAs you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the users email as key while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help.\n\n\nIn order to tell elmah.io about the users email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about \nILogger\n. \nILogger\n is part of the raw \nelmah.io client\n, able to communicate with the \nelmah.io API\n. \nILogger\n isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, nlog etc.\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) =\n\n{\n    if (string.IsNullOrWhiteSpace(args.Message.User)) return;\n    var db = ...;\n    var user = db.GetById\nUser\n(args.Message.User);\n    args.Message.Data.Add(new Item {Key = \nX-ELMAHIO-USEREMAIL\n, Value = user.Email});\n}\n\n\n\n\nThe first line forces creation of the client. The elmah.io \nErrorLog\n implementation uses a singleton \nILogger\n to communicate with elmah.io.\n\n\nWe then register a new event handler on the \nOnMessage\n event. \nOnMessage\n event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the users email is fetched from the database by calling the \nGetById\n method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture.\n\n\nIn the last line the data collection of the message is enriched with a new key value pair. \nX-ELMAHIO-USEREMAIL\n tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message.\n\n\nThat\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:", 
            "title": "Use Extended User Details without Email as Id"
        }, 
        {
            "location": "/use-extended-user-details-without-email-as-id/#use-extended-user-details", 
            "text": "", 
            "title": "Use Extended User Details"
        }, 
        {
            "location": "/use-extended-user-details-without-email-as-id/#without-email-as-id", 
            "text": "As you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the users email as key while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help.  In order to tell elmah.io about the users email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about  ILogger .  ILogger  is part of the raw  elmah.io client , able to communicate with the  elmah.io API .  ILogger  isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, nlog etc.  Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) = \n{\n    if (string.IsNullOrWhiteSpace(args.Message.User)) return;\n    var db = ...;\n    var user = db.GetById User (args.Message.User);\n    args.Message.Data.Add(new Item {Key =  X-ELMAHIO-USEREMAIL , Value = user.Email});\n}  The first line forces creation of the client. The elmah.io  ErrorLog  implementation uses a singleton  ILogger  to communicate with elmah.io.  We then register a new event handler on the  OnMessage  event.  OnMessage  event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the users email is fetched from the database by calling the  GetById  method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture.  In the last line the data collection of the message is enriched with a new key value pair.  X-ELMAHIO-USEREMAIL  tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message.  That\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:", 
            "title": "without Email as Id"
        }, 
        {
            "location": "/use-multiple-logs-for-different-environments/", 
            "text": "Use multiple logs for different environments\n\n\nWe bet that you use at least two environments for hosting you website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called \nWeb Config transformation\n.\n\n\n\n\nTo avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config.\n\n\n\n\nWeather or not you want errors from localhost logged on elmah.io, start by installing the elmah.io NuGet package:\n\n\nInstall-Package elmah.io\n\n\n\n\nThen choose one of the two paths below.\n\n\nLogging to elmah.io from both localhost and production\n\n\nCreate two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something saying.\n\n\nDuring installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the \nweb.release.config\n file and add the following code:\n\n\nelmah xdt:Transform=\nReplace\n\n  \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nINSERT_HERE\n /\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n\n/elmah\n\n\n\n\n\nReplace the \nINSERT_HERE\n value with the log id named \u201cMy website\u201d. That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the \nweb.debug.config\n file. We didn\u2019t add any ELMAH configuration to this file, why the default values from \nweb.config\n are used. When selecting the Release configuration, Web. Config transformations will replace the default values in \nweb.config\n with the new ELMAH configuration from \nweb.release.config\n.\n\n\nLogging to elmah.io from production only\n\n\nDuring the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog, since we will remove the default elmah.io config in a moments. When installed open the \nweb.config\n file and locate the \nelmah\n element. Remove the \nerrorLog\n element and set the \nallowRemoveAccess\n attribute to \ntrue\n. Your configuration should look like this now:\n\n\nelmah\n\n  \nsecurity allowRemoteAccess=\ntrue\n /\n\n\n/elmah\n\n\n\n\n\nOpen the \nweb.release.config\n file and insert the following code:\n\n\nelmah xdt:Transform=\nReplace\n\n  \nerrorLog type=\nElmah.Io.ErrorLog, Elmah.Io\n LogId=\nINSERT_HERE\n /\n\n  \nsecurity allowRemoteAccess=\nfalse\n /\n\n\n/elmah\n\n\n\n\n\nLike above, replace the \nINSERT_HERE\n value with the log id from your log at elmah.io. That's it! Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.", 
            "title": "Use multiple logs for different environments"
        }, 
        {
            "location": "/use-multiple-logs-for-different-environments/#use-multiple-logs-for-different-environments", 
            "text": "We bet that you use at least two environments for hosting you website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called  Web Config transformation .   To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config.   Weather or not you want errors from localhost logged on elmah.io, start by installing the elmah.io NuGet package:  Install-Package elmah.io  Then choose one of the two paths below.", 
            "title": "Use multiple logs for different environments"
        }, 
        {
            "location": "/use-multiple-logs-for-different-environments/#logging-to-elmahio-from-both-localhost-and-production", 
            "text": "Create two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something saying.  During installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the  web.release.config  file and add the following code:  elmah xdt:Transform= Replace \n   errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= INSERT_HERE  / \n   security allowRemoteAccess= false  /  /elmah   Replace the  INSERT_HERE  value with the log id named \u201cMy website\u201d. That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the  web.debug.config  file. We didn\u2019t add any ELMAH configuration to this file, why the default values from  web.config  are used. When selecting the Release configuration, Web. Config transformations will replace the default values in  web.config  with the new ELMAH configuration from  web.release.config .", 
            "title": "Logging to elmah.io from both localhost and production"
        }, 
        {
            "location": "/use-multiple-logs-for-different-environments/#logging-to-elmahio-from-production-only", 
            "text": "During the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog, since we will remove the default elmah.io config in a moments. When installed open the  web.config  file and locate the  elmah  element. Remove the  errorLog  element and set the  allowRemoveAccess  attribute to  true . Your configuration should look like this now:  elmah \n   security allowRemoteAccess= true  /  /elmah   Open the  web.release.config  file and insert the following code:  elmah xdt:Transform= Replace \n   errorLog type= Elmah.Io.ErrorLog, Elmah.Io  LogId= INSERT_HERE  / \n   security allowRemoteAccess= false  /  /elmah   Like above, replace the  INSERT_HERE  value with the log id from your log at elmah.io. That's it! Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.", 
            "title": "Logging to elmah.io from production only"
        }, 
        {
            "location": "/using-the-elmah-io-extension-for-visual-studio/", 
            "text": "Using the elmah.io extension for Visual Studio\n\n\nBeing able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it.\n\n\nInstallation\n\n\nDownload the elmah.io extension\n from the Visual Studio gallery.\n\n\n\n\nDon't use the Extensions and Updates feature inside Visual Studio, since Visual Studio 2015 causes a problem with installing extensions in previous versions.\n\n\n\n\nDouble click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2012, 2013 and 2015.\n\n\nUsage\n\n\nInside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher (Ctrl+Q).\n\n\nYou'll see the elmah.io window somewhere:\n\n\n\n\nClick the sign in button in the top left corner. Log in using the same provider that you're using on the website:\n\n\n\n\nOnce logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon:\n\n\n\n\nTo inspect a single message, double click it and the message details window will open:\n\n\n\n\nThe toolbar in the top provides a couple of options: View the message on elmah.io, hide the message and delete the message.", 
            "title": "Using the elmah.io extension for Visual Studio"
        }, 
        {
            "location": "/using-the-elmah-io-extension-for-visual-studio/#using-the-elmahio-extension-for-visual-studio", 
            "text": "Being able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it.", 
            "title": "Using the elmah.io extension for Visual Studio"
        }, 
        {
            "location": "/using-the-elmah-io-extension-for-visual-studio/#installation", 
            "text": "Download the elmah.io extension  from the Visual Studio gallery.   Don't use the Extensions and Updates feature inside Visual Studio, since Visual Studio 2015 causes a problem with installing extensions in previous versions.   Double click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2012, 2013 and 2015.", 
            "title": "Installation"
        }, 
        {
            "location": "/using-the-elmah-io-extension-for-visual-studio/#usage", 
            "text": "Inside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher (Ctrl+Q).  You'll see the elmah.io window somewhere:   Click the sign in button in the top left corner. Log in using the same provider that you're using on the website:   Once logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon:   To inspect a single message, double click it and the message details window will open:   The toolbar in the top provides a couple of options: View the message on elmah.io, hide the message and delete the message.", 
            "title": "Usage"
        }, 
        {
            "location": "/handle-elmah-io-downtime/", 
            "text": "Handle elmah.io downtime\n\n\nLike every other SaaS product out there, we cannot promise you 100 % uptime on elmah.io. We understand, that your logging data is extremely important for your business and we do everything in our power to secure that elmah.io is running smoothly. In fact we have an average of \n99.99 % uptime\n on our API.\n\n\nBut how do you handle that remaining 0.01 % of the time where you need to log a message in elmah.io and the service is down? You have a few options actually:\n\n\n\n\nYou can subscribe an event handler to listen for this situation (where communicating with the elmah.io API fails). To hook up an event handler, write this piece of code in your initialization code:\n\n\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessageFail += (sender, args) =\n\n{\n    var message = args.Message;\n    var exception = args.Error;\n    // TODO: log message and/or exception somewhere else.\n}\n\n\n\n\n\n\n\n\nWe have a prerelease of the \nelmah.io NuGet\n package which implements a client side queue, if the API is down. It's still not very well documented and we will probably end up moving this feature to v3 of our API/client package, which is scheduled to be release late this year or beginning of next year. Here's a bit of code to look at: \nhttps://github.com/elmahio/elmah.io/blob/apiv2.1/Elmah.Io.Client/LoggerOptions.cs\n.\n\n\n\n\n\n\nIf you want to be able to rollback to another solution, in case elmah.io goes down, you can actually log to multiple error logs as described here: \nLogging to multiple ELMAH logs\n.\n\n\n\n\n\n\nWe constantly work to improve the uptime of the entire solution. The next move will be to split the API and website in two and start using GEO replicated websites in Windows Azure.", 
            "title": "Handle elmah.io downtime"
        }, 
        {
            "location": "/handle-elmah-io-downtime/#handle-elmahio-downtime", 
            "text": "Like every other SaaS product out there, we cannot promise you 100 % uptime on elmah.io. We understand, that your logging data is extremely important for your business and we do everything in our power to secure that elmah.io is running smoothly. In fact we have an average of  99.99 % uptime  on our API.  But how do you handle that remaining 0.01 % of the time where you need to log a message in elmah.io and the service is down? You have a few options actually:   You can subscribe an event handler to listen for this situation (where communicating with the elmah.io API fails). To hook up an event handler, write this piece of code in your initialization code:   Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessageFail += (sender, args) = \n{\n    var message = args.Message;\n    var exception = args.Error;\n    // TODO: log message and/or exception somewhere else.\n}    We have a prerelease of the  elmah.io NuGet  package which implements a client side queue, if the API is down. It's still not very well documented and we will probably end up moving this feature to v3 of our API/client package, which is scheduled to be release late this year or beginning of next year. Here's a bit of code to look at:  https://github.com/elmahio/elmah.io/blob/apiv2.1/Elmah.Io.Client/LoggerOptions.cs .    If you want to be able to rollback to another solution, in case elmah.io goes down, you can actually log to multiple error logs as described here:  Logging to multiple ELMAH logs .    We constantly work to improve the uptime of the entire solution. The next move will be to split the API and website in two and start using GEO replicated websites in Windows Azure.", 
            "title": "Handle elmah.io downtime"
        }, 
        {
            "location": "/adding-version-information/", 
            "text": "Adding Version Information\n\n\nAlmost every piece of software have some sort of version. Whether it's a nice looking \nSemVer\n string or a simple timestamp, being able to distinguish one version from the other is important. elmah.io supports sending version information from your application in every message logged.\n\n\nVersion Numbers on the UI\n\n\nLet's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below:\n\n\n\n\nThe error is logged by an application with version number 1.0.0. Looking at another error, the version number may look different:\n\n\n\n\nThis way, you will be able to see which version of your software that logged each message.\n\n\nHaving the version number on the message, opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates etc. Simply do a search in the search box like this:\n\n\n\n\nThe example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc.\n\n\nAdding Version Numbers\n\n\nHow you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you to use it. Version is a simple string in our \nAPI\n, which means that you can send anything from SemVer to a stringified timestamp.\n\n\nAdding a version number to every message logged in elmah.io, is easy as 1-2-3. If you're using our API, there's a property named \nversion\n where you can put the version of your application. Chances are that you are using one of the integrations like ELMAH, log4net or Serilog. In fact there's multiple ways to send a version number to elmah.io.\n\n\nGlobally using ELMAH\n\n\nYou probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that, is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io:\n\n\nElmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) =\n\n{\n    args.Message.Version = \n1.2.3\n; // Requires elmah.io.core version \n= 2.0.26\n}\n\n\n\n\nIn the example, the message send of to elmah.io is decorated with the version numer \n1.2.3\n You will need to replace this with the value of an app setting, the assembly info or whatever strategy you've used to make the version number available to your code.\n\n\nTry/catch using ELMAH\n\n\nIf you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above:\n\n\ntry\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add(\nX-ELMAHIO-VERSION\n, \n1.2.3\n);\n    ErrorSignal.FromCurrentContext().Raise(e);\n}\n\n\n\n\nIn this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be \nX-ELMAHIO-VERSION\n for elmah.io to interpret this as the version number.\n\n\nUsing log4net\n\n\nlog4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net, is by configuring a global property somewhere in your initialization code:\n\n\nlog4net.GlobalContext.Properties[\nX-ELMAHIO-VERSION\n] = \n1.2.3\n;\n\n\n\n\nThe property name is equal to the custom element we used in the last section.\n\n\nlog4net supports custom properties in the context of a log call as well. To do that, put the \nX-ELMAHIO-VERSION\n property in the \nThreadContext\n before logging to log4net:\n\n\nlog4net.ThreadContext.Properties[\nX-ELMAHIO-VERSION\n] = \n1.2.3\n;\nlog4net.Error(\nThis is an error message\n);\n\n\n\n\nUsing NLog\n\n\nIn progress.\n\n\nUsing Serilog\n\n\nIn progress.", 
            "title": "Adding version information"
        }, 
        {
            "location": "/adding-version-information/#adding-version-information", 
            "text": "Almost every piece of software have some sort of version. Whether it's a nice looking  SemVer  string or a simple timestamp, being able to distinguish one version from the other is important. elmah.io supports sending version information from your application in every message logged.", 
            "title": "Adding Version Information"
        }, 
        {
            "location": "/adding-version-information/#version-numbers-on-the-ui", 
            "text": "Let's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below:   The error is logged by an application with version number 1.0.0. Looking at another error, the version number may look different:   This way, you will be able to see which version of your software that logged each message.  Having the version number on the message, opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates etc. Simply do a search in the search box like this:   The example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc.", 
            "title": "Version Numbers on the UI"
        }, 
        {
            "location": "/adding-version-information/#adding-version-numbers", 
            "text": "How you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you to use it. Version is a simple string in our  API , which means that you can send anything from SemVer to a stringified timestamp.  Adding a version number to every message logged in elmah.io, is easy as 1-2-3. If you're using our API, there's a property named  version  where you can put the version of your application. Chances are that you are using one of the integrations like ELMAH, log4net or Serilog. In fact there's multiple ways to send a version number to elmah.io.  Globally using ELMAH  You probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that, is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io:  Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client\nvar logger = ErrorLog.Client;\nlogger.OnMessage += (sender, args) = \n{\n    args.Message.Version =  1.2.3 ; // Requires elmah.io.core version  = 2.0.26\n}  In the example, the message send of to elmah.io is decorated with the version numer  1.2.3  You will need to replace this with the value of an app setting, the assembly info or whatever strategy you've used to make the version number available to your code.  Try/catch using ELMAH  If you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above:  try\n{\n    CallSomeBusinessLogic(inputValue);\n}\ncatch (Exception e)\n{\n    e.Data.Add( X-ELMAHIO-VERSION ,  1.2.3 );\n    ErrorSignal.FromCurrentContext().Raise(e);\n}  In this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be  X-ELMAHIO-VERSION  for elmah.io to interpret this as the version number.  Using log4net  log4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net, is by configuring a global property somewhere in your initialization code:  log4net.GlobalContext.Properties[ X-ELMAHIO-VERSION ] =  1.2.3 ;  The property name is equal to the custom element we used in the last section.  log4net supports custom properties in the context of a log call as well. To do that, put the  X-ELMAHIO-VERSION  property in the  ThreadContext  before logging to log4net:  log4net.ThreadContext.Properties[ X-ELMAHIO-VERSION ] =  1.2.3 ;\nlog4net.Error( This is an error message );  Using NLog  In progress.  Using Serilog  In progress.", 
            "title": "Adding Version Numbers"
        }
    ]
}