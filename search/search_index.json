{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the elmah.io documentation Here you will find updated documentation on how to use elmah.io. To get started using elmah.io with ELMAH, please follow the the instructions given at Logging to elmah.io from ELMAH . Not using ASP.NET MVC? Browse through one of our tutorials beneath the Installation menu. We integrate with various third party systems. To check out how to do this, select one of the links beneath the Integrations menu. Need help with something else related to elmah.io? We've collected several help articles beneath the Help menu. This documentation site is built using the wonderful MkDocs. To check out the source, check out the elmah.io/documentation repository on GitHub.","title":"Home"},{"location":"#welcome-to-the-elmahio-documentation","text":"Here you will find updated documentation on how to use elmah.io. To get started using elmah.io with ELMAH, please follow the the instructions given at Logging to elmah.io from ELMAH . Not using ASP.NET MVC? Browse through one of our tutorials beneath the Installation menu. We integrate with various third party systems. To check out how to do this, select one of the links beneath the Integrations menu. Need help with something else related to elmah.io? We've collected several help articles beneath the Help menu. This documentation site is built using the wonderful MkDocs. To check out the source, check out the elmah.io/documentation repository on GitHub.","title":"Welcome to the elmah.io documentation"},{"location":"adding-version-information/","text":"Adding Version Information Almost every piece of software has some sort of version. Whether it's a nice looking SemVer string or a simple timestamp, being able to distinguish one version from the other is important. elmah.io supports sending version information from your application in every message logged in two ways: By adding the version manually (as explained in this document). By using the Deployment Tracking feature (as explained in Set Up Deployment Tracking ). Version Numbers on the UI Let's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below: The error is logged by an application with version number 1.0.0. Looking at another error, the version number may look different: This way, you will be able to see which version of your software that logged each message. Having the version number on the message, opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates, etc. Simply do a search in the search box like this: The example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc. Adding Version Numbers How you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you to use it. Version is a simple string in our API , which means that you can send anything from SemVer to a stringified timestamp. Adding a version number to every message logged in elmah.io, is easy as 1-2-3. If you're using our API, there's a property named version where you can put the version of your application. Chances are that you are using one of the integrations like ELMAH, log4net or Serilog. In fact, there's multiple ways to send a version number to elmah.io. Globally using ELMAH You probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that, is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { args.Message.Version = 1.2.3 ; // Requires elmah.io.core version = 2.0.26 } In the example, the message send off to elmah.io is decorated with the version number 1.2.3 You will need to replace this with the value of an app setting, the assembly info or whatever strategy you've used to make the version number available to your code. Try/catch using ELMAH If you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add( X-ELMAHIO-VERSION , 1.2.3 ); ErrorSignal.FromCurrentContext().Raise(e); } In this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be X-ELMAHIO-VERSION for elmah.io to interpret this as the version number. Using log4net log4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net, is by configuring a global property somewhere in your initialization code: log4net.GlobalContext.Properties[ X-ELMAHIO-VERSION ] = 1.2.3 ; The property name is equal to the custom element we used in the last section. log4net supports custom properties in the context of a log call as well. To do that, put the X-ELMAHIO-VERSION property in the ThreadContext before logging to log4net: log4net.ThreadContext.Properties[ X-ELMAHIO-VERSION ] = 1.2.3 ; log4net.Error( This is an error message ); Using NLog In progress. Using Serilog In progress.","title":"Adding version information"},{"location":"adding-version-information/#adding-version-information","text":"Almost every piece of software has some sort of version. Whether it's a nice looking SemVer string or a simple timestamp, being able to distinguish one version from the other is important. elmah.io supports sending version information from your application in every message logged in two ways: By adding the version manually (as explained in this document). By using the Deployment Tracking feature (as explained in Set Up Deployment Tracking ).","title":"Adding Version Information"},{"location":"adding-version-information/#version-numbers-on-the-ui","text":"Let's start by looking at how version numbers are represented in the elmah.io UI. Every message contains a version property as illustrated below: The error is logged by an application with version number 1.0.0. Looking at another error, the version number may look different: This way, you will be able to see which version of your software that logged each message. Having the version number on the message, opens up some interesting search possibilities. Imagine that you want to search for every message logged by 1.0.* versions of your software, including release candidates, etc. Simply do a search in the search box like this: The example above finds every message logged from 1.0.0, 1.0.0-rc1, 1.0.1, etc.","title":"Version Numbers on the UI"},{"location":"adding-version-information/#adding-version-numbers","text":"How you choose to represent version numbers in your system is really up to you. elmah.io doesn't require SemVer, even though we strongly recommend you to use it. Version is a simple string in our API , which means that you can send anything from SemVer to a stringified timestamp. Adding a version number to every message logged in elmah.io, is easy as 1-2-3. If you're using our API, there's a property named version where you can put the version of your application. Chances are that you are using one of the integrations like ELMAH, log4net or Serilog. In fact, there's multiple ways to send a version number to elmah.io.","title":"Adding Version Numbers"},{"location":"adding-version-information/#globally-using-elmah","text":"You probably want to attach the same version number on every message logged in elmah.io. The easiest way to achieve that, is to create a global event handler for the OnMessage event, which is triggered every time the elmah.io client logs a message to elmah.io: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { args.Message.Version = 1.2.3 ; // Requires elmah.io.core version = 2.0.26 } In the example, the message send off to elmah.io is decorated with the version number 1.2.3 You will need to replace this with the value of an app setting, the assembly info or whatever strategy you've used to make the version number available to your code.","title":"Globally using ELMAH"},{"location":"adding-version-information/#trycatch-using-elmah","text":"If you're logging errors to elmah.io in catch blocks, logging the version number can be done using a similar approach to the above: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add( X-ELMAHIO-VERSION , 1.2.3 ); ErrorSignal.FromCurrentContext().Raise(e); } In this case, the code at this point doesn't know anything about elmah.io. Luckily, there's an alternative to the Version property, by putting a custom element in the Data dictionary on Exception. The exact name of the key must be X-ELMAHIO-VERSION for elmah.io to interpret this as the version number.","title":"Try/catch using ELMAH"},{"location":"adding-version-information/#using-log4net","text":"log4net supports the concept of customer properties in various ways. Since log4net properties are converted to custom properties in elmah.io, the easiest way to add a version number of every message logged through log4net, is by configuring a global property somewhere in your initialization code: log4net.GlobalContext.Properties[ X-ELMAHIO-VERSION ] = 1.2.3 ; The property name is equal to the custom element we used in the last section. log4net supports custom properties in the context of a log call as well. To do that, put the X-ELMAHIO-VERSION property in the ThreadContext before logging to log4net: log4net.ThreadContext.Properties[ X-ELMAHIO-VERSION ] = 1.2.3 ; log4net.Error( This is an error message );","title":"Using log4net"},{"location":"adding-version-information/#using-nlog","text":"In progress.","title":"Using NLog"},{"location":"adding-version-information/#using-serilog","text":"In progress.","title":"Using Serilog"},{"location":"configure-elmah-io-from-code/","text":"Configure elmah.io from code You typically configure elmah.io in your web.config file. With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code as well: using Elmah; using System.Collections.Generic; using System.ComponentModel.Design; [assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ElmahFromCodeExample.ElmahConfig), Start )] namespace ElmahFromCodeExample { public static class ElmahConfig { public static void Start() { ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current); } private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp) { return context = { var container = new ServiceContainer(sp(context)); var config = new Dictionary string, string (); config[ apiKey ] = 798de90b25ae4c849a18dc136c3ac94f ; config[ logId ] = 6aeabe21-e2e9-4d07-a338-c2380e575fc1 ; var log = new Elmah.Io.ErrorLog(config); container.AddService(typeof(ErrorLog), log); return container; }; } } } Replace the value of apiKey with your API key ( Where is my API key? ) and logId with a log ID ( Where is my log ID? ). Let\u2019s look at the code. Our class ElmahConfig is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. Then we set the ServiceCenter.Current property to the return type of the CreateServiceProviderQueryHandler method. This method is where the magic happens. Besides creating the new ServiceContainer , we actually created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the API key and log ID as explained earlier. Since ServiceContainer and friends are bundled with ELMAH, you still need to configure ELMAH as part of the pipeline. Add the ErrorLogModule to your web.config like this: system.webserver modules add name= ErrorLog type= Elmah.ErrorLogModule, Elmah precondition= managedHandler / /modules /system.webserver That\u2019s it! You no longer need the elmah element, config sections or anything else other than the module in your web.config file.","title":"Configure elmah.io from code"},{"location":"configure-elmah-io-from-code/#configure-elmahio-from-code","text":"You typically configure elmah.io in your web.config file. With a little help from ELMAH and some custom code, you will be able to configure any ELMAH error logger through code as well: using Elmah; using System.Collections.Generic; using System.ComponentModel.Design; [assembly: WebActivatorEx.PreApplicationStartMethod(typeof(ElmahFromCodeExample.ElmahConfig), Start )] namespace ElmahFromCodeExample { public static class ElmahConfig { public static void Start() { ServiceCenter.Current = CreateServiceProviderQueryHandler(ServiceCenter.Current); } private static ServiceProviderQueryHandler CreateServiceProviderQueryHandler(ServiceProviderQueryHandler sp) { return context = { var container = new ServiceContainer(sp(context)); var config = new Dictionary string, string (); config[ apiKey ] = 798de90b25ae4c849a18dc136c3ac94f ; config[ logId ] = 6aeabe21-e2e9-4d07-a338-c2380e575fc1 ; var log = new Elmah.Io.ErrorLog(config); container.AddService(typeof(ErrorLog), log); return container; }; } } } Replace the value of apiKey with your API key ( Where is my API key? ) and logId with a log ID ( Where is my log ID? ). Let\u2019s look at the code. Our class ElmahConfig is configured as a PreApplicationStartMethod which means, that ASP.NET (MVC) will execute the Start method when the web application starts up. Then we set the ServiceCenter.Current property to the return type of the CreateServiceProviderQueryHandler method. This method is where the magic happens. Besides creating the new ServiceContainer , we actually created the Elmah.Io.ErrorLog class normally configured through XML. The Dictionary should contain the API key and log ID as explained earlier. Since ServiceContainer and friends are bundled with ELMAH, you still need to configure ELMAH as part of the pipeline. Add the ErrorLogModule to your web.config like this: system.webserver modules add name= ErrorLog type= Elmah.ErrorLogModule, Elmah precondition= managedHandler / /modules /system.webserver That\u2019s it! You no longer need the elmah element, config sections or anything else other than the module in your web.config file.","title":"Configure elmah.io from code"},{"location":"configure-elmah-io-manually/","text":"Configure elmah.io manually The Elmah.Io NuGet package normally adds all of the necessary configuration, in order to get up and running with elmah.io. In fact, this is one of our killer features and our customers tell us, that we have the simplest installer on the market. In some cases, you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio. Start by installing the Elmah.Io package: Install-Package Elmah.Io If a dialog is shown during the installation, input your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Don't worry if the configuration isn't added, since we will verify this later. Add the following to the configSections element in your web.config : sectionGroup name= elmah section name= security requirePermission= false type= Elmah.SecuritySectionHandler, Elmah / section name= errorLog requirePermission= false type= Elmah.ErrorLogSectionHandler, Elmah / section name= errorMail requirePermission= false type= Elmah.ErrorMailSectionHandler, Elmah / section name= errorFilter requirePermission= false type= Elmah.ErrorFilterSectionHandler, Elmah / /sectionGroup Add the following to the httpModules element (inside system.web ) in your web.config : add name= ErrorLog type= Elmah.ErrorLogModule, Elmah / add name= ErrorMail type= Elmah.ErrorMailModule, Elmah / add name= ErrorFilter type= Elmah.ErrorFilterModule, Elmah / Add the following to the modules element (inside system.webServer ) in your web.config : add name= ErrorLog type= Elmah.ErrorLogModule, Elmah preCondition= managedHandler / add name= ErrorMail type= Elmah.ErrorMailModule, Elmah preCondition= managedHandler / add name= ErrorFilter type= Elmah.ErrorFilterModule, Elmah preCondition= managedHandler / Add the following as a root element beneath the configuration element in your web.config : elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / /elmah Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :) In case you need to access your error log on /elmah.axd , you need to add the following to the configuration element in your web.config : location path= elmah.axd inheritInChildApplications= false system.web httpHandlers add verb= POST,GET,HEAD path= elmah.axd type= Elmah.ErrorLogPageFactory, Elmah / /httpHandlers /system.web system.webServer handlers add name= ELMAH verb= POST,GET,HEAD path= elmah.axd type= Elmah.ErrorLogPageFactory, Elmah preCondition= integratedMode / /handlers /system.webServer /location","title":"Configure elmah.io manually"},{"location":"configure-elmah-io-manually/#configure-elmahio-manually","text":"The Elmah.Io NuGet package normally adds all of the necessary configuration, in order to get up and running with elmah.io. In fact, this is one of our killer features and our customers tell us, that we have the simplest installer on the market. In some cases, you may experience problems with the automatic configuration, though. Different reasons can cause the configuration not to be added automatically. The most common reason is restrictions to executing PowerShell inside Visual Studio. Start by installing the Elmah.Io package: Install-Package Elmah.Io If a dialog is shown during the installation, input your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Don't worry if the configuration isn't added, since we will verify this later. Add the following to the configSections element in your web.config : sectionGroup name= elmah section name= security requirePermission= false type= Elmah.SecuritySectionHandler, Elmah / section name= errorLog requirePermission= false type= Elmah.ErrorLogSectionHandler, Elmah / section name= errorMail requirePermission= false type= Elmah.ErrorMailSectionHandler, Elmah / section name= errorFilter requirePermission= false type= Elmah.ErrorFilterSectionHandler, Elmah / /sectionGroup Add the following to the httpModules element (inside system.web ) in your web.config : add name= ErrorLog type= Elmah.ErrorLogModule, Elmah / add name= ErrorMail type= Elmah.ErrorMailModule, Elmah / add name= ErrorFilter type= Elmah.ErrorFilterModule, Elmah / Add the following to the modules element (inside system.webServer ) in your web.config : add name= ErrorLog type= Elmah.ErrorLogModule, Elmah preCondition= managedHandler / add name= ErrorMail type= Elmah.ErrorMailModule, Elmah preCondition= managedHandler / add name= ErrorFilter type= Elmah.ErrorFilterModule, Elmah preCondition= managedHandler / Add the following as a root element beneath the configuration element in your web.config : elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / /elmah Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That's it. You managed to install elmah.io manually and you should go to your LinkedIn profile and update with a new certification called \"Certified elmah.io installer\" :) In case you need to access your error log on /elmah.axd , you need to add the following to the configuration element in your web.config : location path= elmah.axd inheritInChildApplications= false system.web httpHandlers add verb= POST,GET,HEAD path= elmah.axd type= Elmah.ErrorLogPageFactory, Elmah / /httpHandlers /system.web system.webServer handlers add name= ELMAH verb= POST,GET,HEAD path= elmah.axd type= Elmah.ErrorLogPageFactory, Elmah preCondition= integratedMode / /handlers /system.webServer /location","title":"Configure elmah.io manually"},{"location":"creating-apps-for-elmah-io/","text":"Creating Apps for elmah.io Developing custom apps for elmah.io is possible through a bit of JSON and NuGet magic. This document will show you how. Apps on elmah.io are basically a nice wrapper around the Business Rule Engine on elmah.io. Using business rules, users can execute various actions based on full-text and Lucene queries against logged messages. Ignore messages based on a specific user agent or call the Slack API when fatal messages are logged are just a few examples on the possibilities using rules. For this example, we'll create a small app posting requests to RequestBin on every error. Probably not the most usable app, but serves the example well. RequestBin works by creating a bin, which you can then create HTTP requests against. Each bin contains a unique ID, which we will use in a second. Creating manifest.json To start creating the app, create a new file named manifest.json : { variables : [{ key : bin , name : Bin , description : The Id of the bin to post to , example : 1k5c4qb2 , type : text , required : true }], rule : { title : Post a message to RequestBin on all messages , query : severity: Error , then : { type : http , url : http://requestb.in/$bin , method : post , contentType : application/json , body : {\\ timestamp\\ : \\ $time\\ , \\ message\\ : \\ $message\\ , \\ severity\\ : \\ $severity\\ } } } } The manifest consists of two blocks: variables and rule . Variables serves as input for generating the UI when users add the app to their log on elmah.io. In variables you can ask the user for information needed in order to execute the rule like username and password, access tokens or as in this example, an id of a bin on RequestBin. For now, only text , choice and number variables are available, but we may extend this with other types like bool , ipaddress etc. The rule section tell elmah.io what this app should do. Specifying a rule is optional and makes sense when creating apps that listen for messages matching a query. The two important fields to notice here is query and then . These terms match 1:1 to the same terms in the business rules. query should contain either a full-text query string or a Lucene query. Every message logged, matching this query, triggers the then part of this app. For the simple app, we query messages based on severity . For a complete list of search fields, visit the Rules tab on your log settings. In the then section we tell elmah.io what to do with messages matching the query . In this case, we want it to create a new HTTP request on http://requestb.in. Notice how the $bin variables from before is used as part of the URL. body contains examples on built-in variables like $message and $time . Built-in variables are documented on the Rules tab of the log settings as well. A final note about then . In this example we use the \"type\": \"http\" to allow elmah.io to make HTTP requests. Types corresponding to other actions available in the rule engine are available as well. These are ignore , hide and email . Creating a NuSpec Apps for elmah.io are distributed as NuGet packages. There's a few requirements you will need to satisfy in order for your app to show up in the elmah.io UI. Let's write a NuSpec for our app named elmah.io.apps.requestbin.nuspec : ?xml version= 1.0 ? package xmlns= http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd metadata version 1.0.0 /version authors elmah.io /authors owners elmah.io /owners id elmah.io.apps.requestbin /id title RequestBin Integration /title requireLicenseAcceptance false /requireLicenseAcceptance description Post a new HTTP request to RequestBin when messages are logged in elmah.io. /description projectUrl https://github.com/elmahio/elmah.io.apps.requestbin /projectUrl iconUrl https://secure.gravatar.com/avatar/5c4cb3646528821117abde6d2d5ee22d?s=32 /iconUrl /metadata files file src= manifest.json target= manifest.json / /files /package The configuration is pretty simple. We include a single file ( manifest.json ) in the root of the package and name the package. The name needs to be all-lowercase and prefixed with elmah.io.apps. in order to show up on elmah.io. Building and Publishing the App To build the app, we use nuget.exe : c:\\projects\\elmah.io.apps.requestbin nuget pack Attempting to build package from 'elmah.io.apps.requestbin.nuspec'. Successfully created package 'c:\\projects\\elmah.io.apps.requestbin\\elmah.io.apps.requestbin.1.0.0.nupkg'. To upload the package to NuGet, use nuget push : c:\\projects\\elmah.io.apps.requestbin nuget push elmah.io.apps.requestbin.1.0.0.nupkg MyApiKey Pushing elmah.io.apps.requestbin 1.0.0 to the NuGet gallery (https://www.nuget.org)... Your package was pushed. (replace MyApiKey with your API Key located on nuget.org) That's it folks. The app is now public and available on elmah.io. Testing the Package To test that everything is working, we'll start by creating a new bin on RequestBin. Go to http://requestb.in/ and click the Create a RequestBin button: In this case, the bin ID is 1chhlvo1 . Log into elmah.io and go to the Apps tab on the log settings. The RequestBin app is available from the list of apps in the bottom. Click the Install button: Observe how the bin variable from manifest.json shows up in the log settings with the description and example as we specified. Input the bin ID and click the Save button. To test that everything is working, you can use elmah.io's API to publish a new message to your log, which should match the query specified in manifest.json : curl -H Content-Type: application/json -X POST -d '{ title : Manual error , severity : Error }' https://elmah.io/api/v2/messages?logId=MyLogId (replace MyLogId with your log ID) Refresh the bin at RequestBin and observe the HTTP request performed by the app: Isn't that just the most awesome thing you have seen all day? The JSON format specified in manifest.json now ends up on RequestBin using a homebrewed elmah.io app. To see more examples of elmah.io apps, check out elmah.io.apps.slack , elmah.io.apps.hipchat and elmah.io.apps.github all available on GitHub. We also provide a Playground app to showcase the different types of variables. For even more information, get in contact with us. We are always happy to help, even if you're just playing around with app development for the fun of it.","title":"Creating apps for elmah.io"},{"location":"creating-apps-for-elmah-io/#creating-apps-for-elmahio","text":"Developing custom apps for elmah.io is possible through a bit of JSON and NuGet magic. This document will show you how. Apps on elmah.io are basically a nice wrapper around the Business Rule Engine on elmah.io. Using business rules, users can execute various actions based on full-text and Lucene queries against logged messages. Ignore messages based on a specific user agent or call the Slack API when fatal messages are logged are just a few examples on the possibilities using rules. For this example, we'll create a small app posting requests to RequestBin on every error. Probably not the most usable app, but serves the example well. RequestBin works by creating a bin, which you can then create HTTP requests against. Each bin contains a unique ID, which we will use in a second.","title":"Creating Apps for elmah.io"},{"location":"creating-apps-for-elmah-io/#creating-manifestjson","text":"To start creating the app, create a new file named manifest.json : { variables : [{ key : bin , name : Bin , description : The Id of the bin to post to , example : 1k5c4qb2 , type : text , required : true }], rule : { title : Post a message to RequestBin on all messages , query : severity: Error , then : { type : http , url : http://requestb.in/$bin , method : post , contentType : application/json , body : {\\ timestamp\\ : \\ $time\\ , \\ message\\ : \\ $message\\ , \\ severity\\ : \\ $severity\\ } } } } The manifest consists of two blocks: variables and rule . Variables serves as input for generating the UI when users add the app to their log on elmah.io. In variables you can ask the user for information needed in order to execute the rule like username and password, access tokens or as in this example, an id of a bin on RequestBin. For now, only text , choice and number variables are available, but we may extend this with other types like bool , ipaddress etc. The rule section tell elmah.io what this app should do. Specifying a rule is optional and makes sense when creating apps that listen for messages matching a query. The two important fields to notice here is query and then . These terms match 1:1 to the same terms in the business rules. query should contain either a full-text query string or a Lucene query. Every message logged, matching this query, triggers the then part of this app. For the simple app, we query messages based on severity . For a complete list of search fields, visit the Rules tab on your log settings. In the then section we tell elmah.io what to do with messages matching the query . In this case, we want it to create a new HTTP request on http://requestb.in. Notice how the $bin variables from before is used as part of the URL. body contains examples on built-in variables like $message and $time . Built-in variables are documented on the Rules tab of the log settings as well. A final note about then . In this example we use the \"type\": \"http\" to allow elmah.io to make HTTP requests. Types corresponding to other actions available in the rule engine are available as well. These are ignore , hide and email .","title":"Creating manifest.json"},{"location":"creating-apps-for-elmah-io/#creating-a-nuspec","text":"Apps for elmah.io are distributed as NuGet packages. There's a few requirements you will need to satisfy in order for your app to show up in the elmah.io UI. Let's write a NuSpec for our app named elmah.io.apps.requestbin.nuspec : ?xml version= 1.0 ? package xmlns= http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd metadata version 1.0.0 /version authors elmah.io /authors owners elmah.io /owners id elmah.io.apps.requestbin /id title RequestBin Integration /title requireLicenseAcceptance false /requireLicenseAcceptance description Post a new HTTP request to RequestBin when messages are logged in elmah.io. /description projectUrl https://github.com/elmahio/elmah.io.apps.requestbin /projectUrl iconUrl https://secure.gravatar.com/avatar/5c4cb3646528821117abde6d2d5ee22d?s=32 /iconUrl /metadata files file src= manifest.json target= manifest.json / /files /package The configuration is pretty simple. We include a single file ( manifest.json ) in the root of the package and name the package. The name needs to be all-lowercase and prefixed with elmah.io.apps. in order to show up on elmah.io.","title":"Creating a NuSpec"},{"location":"creating-apps-for-elmah-io/#building-and-publishing-the-app","text":"To build the app, we use nuget.exe : c:\\projects\\elmah.io.apps.requestbin nuget pack Attempting to build package from 'elmah.io.apps.requestbin.nuspec'. Successfully created package 'c:\\projects\\elmah.io.apps.requestbin\\elmah.io.apps.requestbin.1.0.0.nupkg'. To upload the package to NuGet, use nuget push : c:\\projects\\elmah.io.apps.requestbin nuget push elmah.io.apps.requestbin.1.0.0.nupkg MyApiKey Pushing elmah.io.apps.requestbin 1.0.0 to the NuGet gallery (https://www.nuget.org)... Your package was pushed. (replace MyApiKey with your API Key located on nuget.org) That's it folks. The app is now public and available on elmah.io.","title":"Building and Publishing the App"},{"location":"creating-apps-for-elmah-io/#testing-the-package","text":"To test that everything is working, we'll start by creating a new bin on RequestBin. Go to http://requestb.in/ and click the Create a RequestBin button: In this case, the bin ID is 1chhlvo1 . Log into elmah.io and go to the Apps tab on the log settings. The RequestBin app is available from the list of apps in the bottom. Click the Install button: Observe how the bin variable from manifest.json shows up in the log settings with the description and example as we specified. Input the bin ID and click the Save button. To test that everything is working, you can use elmah.io's API to publish a new message to your log, which should match the query specified in manifest.json : curl -H Content-Type: application/json -X POST -d '{ title : Manual error , severity : Error }' https://elmah.io/api/v2/messages?logId=MyLogId (replace MyLogId with your log ID) Refresh the bin at RequestBin and observe the HTTP request performed by the app: Isn't that just the most awesome thing you have seen all day? The JSON format specified in manifest.json now ends up on RequestBin using a homebrewed elmah.io app. To see more examples of elmah.io apps, check out elmah.io.apps.slack , elmah.io.apps.hipchat and elmah.io.apps.github all available on GitHub. We also provide a Playground app to showcase the different types of variables. For even more information, get in contact with us. We are always happy to help, even if you're just playing around with app development for the fun of it.","title":"Testing the Package"},{"location":"creating-rules-to-perform-actions-on-messages/","text":"Creating Rules to Perform Actions on Messages elmah.io comes with a great rule engine for performing various actions when messages are logged in your log. The rule engine is located beneath each log on the log settings page: A rule consists of three parts: a title, a query and an action. The title should be a short text explaining what this rule does. We don't use the title for anything, so please write something that helps you identify rules and to keep them apart. The query should contain either a full-text search string or a Lucene query. When new messages are logged, the message is matched up against all queries registered on that log. If and only if a message matches a query, the action registered on the rule is performed. As mentioned above, the action part of a rule is executed when a message matches the query specified in the same rule. An action can be one of four types: Ignore, Hide, Mail and HTTP Request. In order to illustrate how to use each action type, here are four examples on useful rules. Ignore errors with a HTTP status code of 400 To ignore all messages with a HTTP status code of 400, you would need to set-up the following: Title Query Then Ignore 400s statusCode:400 Ignore The Then part would look like this: Hide warnings To hide all messages with a severity of Warning , you would need to set up the following: Title Query Then Hide Warnings severity:Warning Hide The Then part would look like this: Send an email on all messages containing a word To send an email on all messages containing the word billing somewhere, you would need to set up the following: Title Query Then Mail on billing billing Email The Then part would look like this: Make a HTTP request on all new and fatal messages To make a HTTP request on every new message with a severity of Fatal , you would need to set up the following: Title Query Then Request on new fatal isNew:true AND severity:Fatal HTTP The Then part would look like this:","title":"Creating Rules to Perform Actions on Messages"},{"location":"creating-rules-to-perform-actions-on-messages/#creating-rules-to-perform-actions-on-messages","text":"elmah.io comes with a great rule engine for performing various actions when messages are logged in your log. The rule engine is located beneath each log on the log settings page: A rule consists of three parts: a title, a query and an action. The title should be a short text explaining what this rule does. We don't use the title for anything, so please write something that helps you identify rules and to keep them apart. The query should contain either a full-text search string or a Lucene query. When new messages are logged, the message is matched up against all queries registered on that log. If and only if a message matches a query, the action registered on the rule is performed. As mentioned above, the action part of a rule is executed when a message matches the query specified in the same rule. An action can be one of four types: Ignore, Hide, Mail and HTTP Request. In order to illustrate how to use each action type, here are four examples on useful rules.","title":"Creating Rules to Perform Actions on Messages"},{"location":"creating-rules-to-perform-actions-on-messages/#ignore-errors-with-a-http-status-code-of-400","text":"To ignore all messages with a HTTP status code of 400, you would need to set-up the following: Title Query Then Ignore 400s statusCode:400 Ignore The Then part would look like this:","title":"Ignore errors with a HTTP status code of 400"},{"location":"creating-rules-to-perform-actions-on-messages/#hide-warnings","text":"To hide all messages with a severity of Warning , you would need to set up the following: Title Query Then Hide Warnings severity:Warning Hide The Then part would look like this:","title":"Hide warnings"},{"location":"creating-rules-to-perform-actions-on-messages/#send-an-email-on-all-messages-containing-a-word","text":"To send an email on all messages containing the word billing somewhere, you would need to set up the following: Title Query Then Mail on billing billing Email The Then part would look like this:","title":"Send an email on all messages containing a word"},{"location":"creating-rules-to-perform-actions-on-messages/#make-a-http-request-on-all-new-and-fatal-messages","text":"To make a HTTP request on every new message with a severity of Fatal , you would need to set up the following: Title Query Then Request on new fatal isNew:true AND severity:Fatal HTTP The Then part would look like this:","title":"Make a HTTP request on all new and fatal messages"},{"location":"elmah-and-custom-errors/","text":"ELMAH and custom errors ELMAH and ASP.NET (MVC) custom errors isn't exactly known to be best friends. Question after question have been posted on forums like Stack Overflow, from people having problems with ELMAH, when custom errors are configured. In fact, these problems make perfect sense, since both ELMAH and custom errors are designed to catch errors and do something about them. Before looking at some code, we really recommend you to read Duston Moris Gorskis blog post Demystifying ASP.NET MVC 5 Error Pages and Error Logging . It provides a great introduction to different ways of implementing custom error pages in ASP.NET MVC. Back to ELMAH. In most implementations of custom error pages, ASP.NET actually swallows any uncaught exceptions, putting ELMAH out of play. To overcome this issue, you can utilize MVC's IExceptionFilter to log all exceptions, whether or not it is handled by a custom error page: public class ElmahExceptionLogger : IExceptionFilter { public void OnException (ExceptionContext context) { if (context.ExceptionHandled) { ErrorSignal.FromCurrentContext().Raise(context.Exception); } } } The OnException method on ElmahExceptionLogger is executed every time an error is happening, by registering it in Application_Start : protected void Application_Start() { ... GlobalConfiguration.Configuration.Filters.Add(new ElmahExceptionLogger()); ... }","title":"ELMAH and custom errors"},{"location":"elmah-and-custom-errors/#elmah-and-custom-errors","text":"ELMAH and ASP.NET (MVC) custom errors isn't exactly known to be best friends. Question after question have been posted on forums like Stack Overflow, from people having problems with ELMAH, when custom errors are configured. In fact, these problems make perfect sense, since both ELMAH and custom errors are designed to catch errors and do something about them. Before looking at some code, we really recommend you to read Duston Moris Gorskis blog post Demystifying ASP.NET MVC 5 Error Pages and Error Logging . It provides a great introduction to different ways of implementing custom error pages in ASP.NET MVC. Back to ELMAH. In most implementations of custom error pages, ASP.NET actually swallows any uncaught exceptions, putting ELMAH out of play. To overcome this issue, you can utilize MVC's IExceptionFilter to log all exceptions, whether or not it is handled by a custom error page: public class ElmahExceptionLogger : IExceptionFilter { public void OnException (ExceptionContext context) { if (context.ExceptionHandled) { ErrorSignal.FromCurrentContext().Raise(context.Exception); } } } The OnException method on ElmahExceptionLogger is executed every time an error is happening, by registering it in Application_Start : protected void Application_Start() { ... GlobalConfiguration.Configuration.Filters.Add(new ElmahExceptionLogger()); ... }","title":"ELMAH and custom errors"},{"location":"elmah-and-elmah-io-differences/","text":"ELMAH and elmah.io differences We receive a lot of questions like these: What is the difference between ELMAH and elmah.io? I though ELMAH was free. Why do you suddenly charge? My ELMAH SQL Server configuration doesn't work. Why not? We totally understand the confusion. The purpose of this article is to give a bit of background of what the differences between ELMAH and elmah.io and why they share similar names. What is ELMAH? ELMAH is an error logging framework originally developed by Atif Aziz able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH\u2019s plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch and many more exists. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log. What is elmah.io? elmah.io is a cloud-based error management system originally developed on top of ELMAH (see history for details). Besides supporting ELMAH, elmah.io also integrates with popular logging frameworks like log4net , NLog , Serilog and web frameworks like ASP.NET Core . elmah.io offers a superior notification model to ELMAH, with integrations to mail, Slack, HipChat and many others. elmah.io also built a lot of features outside the scope of ELMAH, like a complete uptime monitoring system. History So, why name a service elmah.io, when only a minor part of a client integration uses ELMAH? When elmah.io was introduced back in 2013, the intention was to create a cloud-based error logger for ELMAH. We had some simple search and graphing possibilities, but the platform was meant as an alternative to host your own errors logs in SQL Server or similar. In time, elmah.io grew from being a hobby project to an actual company. During those years, we realized that the potential of the platform exceeded the possibilities with ELMAH in many ways. New features not available in ELMAH have been added constantly. A process that would have been nearly impossible with ELMAH's many storage integrations. Today, elmah.io is a full error management system for everything from console applications to web apps and serverless code hosted on Azure or AWS. We've built an entire uptime monitoring system, able to monitor not only if your website fails but also if it even responds to requests. Why not change the name to something else, you may be thinking? That is our wish as well. But changing your SaaS (software-as-a-service) company name isn't exactly easy. We have tried a couple of times, first time back in 2016. We tried to name the different major features of elmah.io to sea creatures (like Stingray). We failed with the rename and people got confused. In 2017, we started looking at renaming the product again. This time to Unbug. We had learned from our previous mistake and this time silently started changing the name. We quickly realized that the domain change would cause a major risk in regards to SEO (search engine optimization) and confusion. For now, we are elmah.io. The name is not ideal, but it's definitely a lesson learned for another time :)","title":"ELMAH and elmah.io differences"},{"location":"elmah-and-elmah-io-differences/#elmah-and-elmahio-differences","text":"We receive a lot of questions like these: What is the difference between ELMAH and elmah.io? I though ELMAH was free. Why do you suddenly charge? My ELMAH SQL Server configuration doesn't work. Why not? We totally understand the confusion. The purpose of this article is to give a bit of background of what the differences between ELMAH and elmah.io and why they share similar names.","title":"ELMAH and elmah.io differences"},{"location":"elmah-and-elmah-io-differences/#what-is-elmah","text":"ELMAH is an error logging framework originally developed by Atif Aziz able to log all unhandled exceptions from .NET web applications. Errors can be logged to a variety of destinations through ELMAH\u2019s plugin model called error logs. Plugins for XML, SQL Server, MySQL, Elasticsearch and many more exists. ELMAH automatically collects a lot of information from the HTTP context when logging the error, giving you the possibility to inspect request parameters, cookies and much more for the failed request. Custom errors can be logged to ELMAH, by manually calling the error log.","title":"What is ELMAH?"},{"location":"elmah-and-elmah-io-differences/#what-is-elmahio","text":"elmah.io is a cloud-based error management system originally developed on top of ELMAH (see history for details). Besides supporting ELMAH, elmah.io also integrates with popular logging frameworks like log4net , NLog , Serilog and web frameworks like ASP.NET Core . elmah.io offers a superior notification model to ELMAH, with integrations to mail, Slack, HipChat and many others. elmah.io also built a lot of features outside the scope of ELMAH, like a complete uptime monitoring system.","title":"What is elmah.io?"},{"location":"elmah-and-elmah-io-differences/#history","text":"So, why name a service elmah.io, when only a minor part of a client integration uses ELMAH? When elmah.io was introduced back in 2013, the intention was to create a cloud-based error logger for ELMAH. We had some simple search and graphing possibilities, but the platform was meant as an alternative to host your own errors logs in SQL Server or similar. In time, elmah.io grew from being a hobby project to an actual company. During those years, we realized that the potential of the platform exceeded the possibilities with ELMAH in many ways. New features not available in ELMAH have been added constantly. A process that would have been nearly impossible with ELMAH's many storage integrations. Today, elmah.io is a full error management system for everything from console applications to web apps and serverless code hosted on Azure or AWS. We've built an entire uptime monitoring system, able to monitor not only if your website fails but also if it even responds to requests. Why not change the name to something else, you may be thinking? That is our wish as well. But changing your SaaS (software-as-a-service) company name isn't exactly easy. We have tried a couple of times, first time back in 2016. We tried to name the different major features of elmah.io to sea creatures (like Stingray). We failed with the rename and people got confused. In 2017, we started looking at renaming the product again. This time to Unbug. We had learned from our previous mistake and this time silently started changing the name. We quickly realized that the domain change would cause a major risk in regards to SEO (search engine optimization) and confusion. For now, we are elmah.io. The name is not ideal, but it's definitely a lesson learned for another time :)","title":"History"},{"location":"elmah-io-apps-bitbucket/","text":"Install Bitbucket App for elmah.io Get your API key In order to allow elmah.io to create issues on Bitbucket, you will need your team's API key. API keys on Bitbucket are only supported om team accounts. Go to your team's settings page (like https://bitbucket.org/account/user/elmahio/groups/) and click API key in the menu: Copy the generated API key. Install the Bitbucket App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Bitbucket app and click the Install button: Paste the API key copied in the previous step into the API Key textbox. In the Team textbox, input the name of the team owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Bitbucket repository.","title":"Bitbucket"},{"location":"elmah-io-apps-bitbucket/#install-bitbucket-app-for-elmahio","text":"","title":"Install Bitbucket App for elmah.io"},{"location":"elmah-io-apps-bitbucket/#get-your-api-key","text":"In order to allow elmah.io to create issues on Bitbucket, you will need your team's API key. API keys on Bitbucket are only supported om team accounts. Go to your team's settings page (like https://bitbucket.org/account/user/elmahio/groups/) and click API key in the menu: Copy the generated API key.","title":"Get your API key"},{"location":"elmah-io-apps-bitbucket/#install-the-bitbucket-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Bitbucket app and click the Install button: Paste the API key copied in the previous step into the API Key textbox. In the Team textbox, input the name of the team owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Bitbucket repository.","title":"Install the Bitbucket App on elmah.io"},{"location":"elmah-io-apps-botbuster/","text":"Install BotBuster App for elmah.io The BotBuster app for elmah.io, identifies and ignores messages generated by white hat bots like spiders, search engine bots and similar. Under normal circumstances, you want to allow access for white hat bots, but you don't want to get a notification every time one of them tries to request a resource not found on the server. Installing BotBuster couldn't be simpler. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the BotBuster app and click the Install button.","title":"BotBuster"},{"location":"elmah-io-apps-botbuster/#install-botbuster-app-for-elmahio","text":"The BotBuster app for elmah.io, identifies and ignores messages generated by white hat bots like spiders, search engine bots and similar. Under normal circumstances, you want to allow access for white hat bots, but you don't want to get a notification every time one of them tries to request a resource not found on the server. Installing BotBuster couldn't be simpler. Log into elmah.io and go to the log settings. Click the Apps tab. Locate the BotBuster app and click the Install button.","title":"Install BotBuster App for elmah.io"},{"location":"elmah-io-apps-github/","text":"Install GitHub App for elmah.io Generate Personal Access Token In order to allow elmah.io to create issues on GitHub, you will need to generate a Personal Access Token. To do so, log into GitHub and go to the New personal access token page. Input a token description, click the Generate token button and copy the generated token (colored with a green background). Install the GitHub App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitHub app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Owner textbox, input the name of the user or organization owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured GitHub repository.","title":"GitHub"},{"location":"elmah-io-apps-github/#install-github-app-for-elmahio","text":"","title":"Install GitHub App for elmah.io"},{"location":"elmah-io-apps-github/#generate-personal-access-token","text":"In order to allow elmah.io to create issues on GitHub, you will need to generate a Personal Access Token. To do so, log into GitHub and go to the New personal access token page. Input a token description, click the Generate token button and copy the generated token (colored with a green background).","title":"Generate Personal Access Token"},{"location":"elmah-io-apps-github/#install-the-github-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitHub app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Owner textbox, input the name of the user or organization owning the repository you want to create issues in. In the Repository textbox input the name of the repository. Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured GitHub repository.","title":"Install the GitHub App on elmah.io"},{"location":"elmah-io-apps-gitlab/","text":"Install GitLab App for elmah.io Generate Personal Access Token In order to allow elmah.io to create issues on GitLab, you will need to generate a Personal Access Token. To do so, log into GitLab and go to the Access Tokens page. Input a token name. check the api checkbox, click the Create personal access token button and copy the generated token. Install the GitLab App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitLab app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Project textbox, input the ID or name of the project you want issues created on. If you are self-hosting GitLab, input your custom URL in the URL textbox (example https://gitlab.hooli.com). Click the Test button and observe it turn green. When clicking Save , the app is added to your log. When new errors are logged, issues are automatically created in the configured GitLab project.","title":"GitLab"},{"location":"elmah-io-apps-gitlab/#install-gitlab-app-for-elmahio","text":"","title":"Install GitLab App for elmah.io"},{"location":"elmah-io-apps-gitlab/#generate-personal-access-token","text":"In order to allow elmah.io to create issues on GitLab, you will need to generate a Personal Access Token. To do so, log into GitLab and go to the Access Tokens page. Input a token name. check the api checkbox, click the Create personal access token button and copy the generated token.","title":"Generate Personal Access Token"},{"location":"elmah-io-apps-gitlab/#install-the-gitlab-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the GitLab app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Project textbox, input the ID or name of the project you want issues created on. If you are self-hosting GitLab, input your custom URL in the URL textbox (example https://gitlab.hooli.com). Click the Test button and observe it turn green. When clicking Save , the app is added to your log. When new errors are logged, issues are automatically created in the configured GitLab project.","title":"Install the GitLab App on elmah.io"},{"location":"elmah-io-apps-hipchat/","text":"Install HipChat App for elmah.io Generate OAuth 2 Token In order to allow elmah.io to log messages to HipChat, you will need to generate an OAuth 2 token. To do so, log into HipChat and go to the API Access page (replace elmahio with your subdomain). Input a label, click the Create button and copy the generated token. If you want to test your configuration using the Test button on the elmah.io UI, you wiill need to select both Send Notification and View Room in Scopes . Install the HipChat App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the HipChat app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Room textbox, input the name of the HipChat chat room you want messages from elmah.io to show up in. Click Save and the app is added to your log. When new errors are logged, messages start appearing in the chat room that you configured. HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this. Finally, if you need more control on what to log, you should read our guide on Integrating elmah.io with HipChat manually .","title":"HipChat"},{"location":"elmah-io-apps-hipchat/#install-hipchat-app-for-elmahio","text":"","title":"Install HipChat App for elmah.io"},{"location":"elmah-io-apps-hipchat/#generate-oauth-2-token","text":"In order to allow elmah.io to log messages to HipChat, you will need to generate an OAuth 2 token. To do so, log into HipChat and go to the API Access page (replace elmahio with your subdomain). Input a label, click the Create button and copy the generated token. If you want to test your configuration using the Test button on the elmah.io UI, you wiill need to select both Send Notification and View Room in Scopes .","title":"Generate OAuth 2 Token"},{"location":"elmah-io-apps-hipchat/#install-the-hipchat-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the HipChat app and click the Install button: Paste the token copied in the previous step into the Token textbox. In the Room textbox, input the name of the HipChat chat room you want messages from elmah.io to show up in. Click Save and the app is added to your log. When new errors are logged, messages start appearing in the chat room that you configured. HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this. Finally, if you need more control on what to log, you should read our guide on Integrating elmah.io with HipChat manually .","title":"Install the HipChat App on elmah.io"},{"location":"elmah-io-apps-ipfilter/","text":"Install IP Filter App for elmah.io The IP Filter app for elmah.io, automatically ignores messages from one or more IP addresses. This is a great way to ignore errors generated by both crawlers and errors generated by you. To install IP Filter, click the Install button on the Apps tab. This will show the IP Filter settings page: To ignore messages from a single IP address, input the IP in both the From and To fields. To ignore messages from a range of IP addresses, input the start and end IP address in the From and To fields. Both IP addresses are included in the ignored range. The IP Filter app ignores every message matching the specified IP range. This means that if you are logging something like Information messages through Serilog or similar, these messages are also ignored. In order for a message to have an IP, you will need to specify a server variable named REMOTE_ADDR when creating the message. This variable is automatically added (if available) when using the integration for ELMAH.","title":"IP Filter"},{"location":"elmah-io-apps-ipfilter/#install-ip-filter-app-for-elmahio","text":"The IP Filter app for elmah.io, automatically ignores messages from one or more IP addresses. This is a great way to ignore errors generated by both crawlers and errors generated by you. To install IP Filter, click the Install button on the Apps tab. This will show the IP Filter settings page: To ignore messages from a single IP address, input the IP in both the From and To fields. To ignore messages from a range of IP addresses, input the start and end IP address in the From and To fields. Both IP addresses are included in the ignored range. The IP Filter app ignores every message matching the specified IP range. This means that if you are logging something like Information messages through Serilog or similar, these messages are also ignored. In order for a message to have an IP, you will need to specify a server variable named REMOTE_ADDR when creating the message. This variable is automatically added (if available) when using the integration for ELMAH.","title":"Install IP Filter App for elmah.io"},{"location":"elmah-io-apps-jira/","text":"Install Jira App for elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Jira app and click the Install button: Input your site name which is the first part of the URL you use to log into Jira. For the URL https://elmahio.atlassian.net/ , the site parameter would be elmahio . In the Project field, input the key of the project. Note that a project have both a display name and a key. The property we are looking for here, is the uppercase identifier of the project. To create issues on Jira, you will need to input the username and password of a user with permission to create issues in the project specified above. You can use your own user credentials, but we recommend generating a user specific to elmah.io. The username must be the one found on your Jira profile. Replace YOURSITE with your site name in the following URL: https://YOURSITE.atlassian.net/secure/ViewProfile.jspa . Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Jira project.","title":"Jira"},{"location":"elmah-io-apps-jira/#install-jira-app-for-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Jira app and click the Install button: Input your site name which is the first part of the URL you use to log into Jira. For the URL https://elmahio.atlassian.net/ , the site parameter would be elmahio . In the Project field, input the key of the project. Note that a project have both a display name and a key. The property we are looking for here, is the uppercase identifier of the project. To create issues on Jira, you will need to input the username and password of a user with permission to create issues in the project specified above. You can use your own user credentials, but we recommend generating a user specific to elmah.io. The username must be the one found on your Jira profile. Replace YOURSITE with your site name in the following URL: https://YOURSITE.atlassian.net/secure/ViewProfile.jspa . Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured Jira project.","title":"Install Jira App for elmah.io"},{"location":"elmah-io-apps-mailman/","text":"Install Mailman App for elmah.io The Mailman app for elmah.io sends out an email to an address of your choice, every time a new error is logged. To install Mailman, click the Install button on the Apps tab. This will show the Mailman settings page: Input a valid email address in the Email input box and click Save . The Mailman app will look at new errors only. Errors are defined by messages with a severity of Error or Fatal and with isNew == true . isNew is a field automatically added by elmah.io when indexing each message. isNew is calculated by looking for similarities between the new message and already logged messages.","title":"Mailman"},{"location":"elmah-io-apps-mailman/#install-mailman-app-for-elmahio","text":"The Mailman app for elmah.io sends out an email to an address of your choice, every time a new error is logged. To install Mailman, click the Install button on the Apps tab. This will show the Mailman settings page: Input a valid email address in the Email input box and click Save . The Mailman app will look at new errors only. Errors are defined by messages with a severity of Error or Fatal and with isNew == true . isNew is a field automatically added by elmah.io when indexing each message. isNew is calculated by looking for similarities between the new message and already logged messages.","title":"Install Mailman App for elmah.io"},{"location":"elmah-io-apps-slack/","text":"Install Slack App for elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Slack app and click the Install button. You will be asked to allow access from elmah.io: Select your team and in the following screen, select the channel you want to show errors on Slack: Click the Authorize button and you will be redirected to elmah.io. The integration to Slack is now installed. Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this.","title":"Slack"},{"location":"elmah-io-apps-slack/#install-slack-app-for-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Slack app and click the Install button. You will be asked to allow access from elmah.io: Select your team and in the following screen, select the channel you want to show errors on Slack: Click the Authorize button and you will be redirected to elmah.io. The integration to Slack is now installed. Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this.","title":"Install Slack App for elmah.io"},{"location":"elmah-io-apps-teams/","text":"Install Microsoft Teams App for elmah.io Install webhook connector on Microsoft Teams In order to send messages to Microsoft Teams, you will need to install the Webhook connector on teams by clicking ... next to the channel you want for the elmah.io messages and click Connectors . Locate the Incoming Webhook and click Add . Input 'elmah.io' in the name text box and upload another image if you'd like. After clicking the Create button, you will see a webhook URL to use for the integration: Copy the URL. Install the Microsoft Teams App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured. The Office 365 API used behind the scenes for this app uses throttling rather than a maximum of allowed requests. This means that you may start experiencing messages not being sent, if you start logging a large amount of messages. We have experienced a lot of weird error codes when communicating with the API. An example of this is an exception while posting data to the API, but the data is successfully shown on Teams. The result of this error is, that elmah.io retries the failing request multiple times, which causes the same message to be shown multiple times on Teams.","title":"Microsoft Teams"},{"location":"elmah-io-apps-teams/#install-microsoft-teams-app-for-elmahio","text":"","title":"Install Microsoft Teams App for elmah.io"},{"location":"elmah-io-apps-teams/#install-webhook-connector-on-microsoft-teams","text":"In order to send messages to Microsoft Teams, you will need to install the Webhook connector on teams by clicking ... next to the channel you want for the elmah.io messages and click Connectors . Locate the Incoming Webhook and click Add . Input 'elmah.io' in the name text box and upload another image if you'd like. After clicking the Create button, you will see a webhook URL to use for the integration: Copy the URL.","title":"Install webhook connector on Microsoft Teams"},{"location":"elmah-io-apps-teams/#install-the-microsoft-teams-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the Microsoft Teams app and click the Install button. In the overlay, paste the URL from the previous step: Click Save and the app is added to your log. When new errors are logged, messages start appearing in the channel that you configured. The Office 365 API used behind the scenes for this app uses throttling rather than a maximum of allowed requests. This means that you may start experiencing messages not being sent, if you start logging a large amount of messages. We have experienced a lot of weird error codes when communicating with the API. An example of this is an exception while posting data to the API, but the data is successfully shown on Teams. The result of this error is, that elmah.io retries the failing request multiple times, which causes the same message to be shown multiple times on Teams.","title":"Install the Microsoft Teams App on elmah.io"},{"location":"elmah-io-apps-webclient/","text":"Install WebClient App for elmah.io The WebClient app integrates elmah.io with every system providing a HTTP based API. To install WebClient, click the Install button on the Apps tab. This will show the WebClient settings page: Input a valid URL plus body and content type (if required). Finally hit Save . The WebClient will make a HTTP request on the inputted URL every time a new message is logged. Be aware that this can potentially be a lot of requests, since everything from verbose to fatal message will trigger the HTTP request. Most services (like Slack and HipChat) only allow for a maximum number of requests per minute.","title":"WebClient"},{"location":"elmah-io-apps-webclient/#install-webclient-app-for-elmahio","text":"The WebClient app integrates elmah.io with every system providing a HTTP based API. To install WebClient, click the Install button on the Apps tab. This will show the WebClient settings page: Input a valid URL plus body and content type (if required). Finally hit Save . The WebClient will make a HTTP request on the inputted URL every time a new message is logged. Be aware that this can potentially be a lot of requests, since everything from verbose to fatal message will trigger the HTTP request. Most services (like Slack and HipChat) only allow for a maximum number of requests per minute.","title":"Install WebClient App for elmah.io"},{"location":"elmah-io-apps-youtrack/","text":"Install YouTrack App for elmah.io Get your token In order to allow elmah.io to create issues on YouTrack, you will need a permanen token. Go to your profile , click the Update personal information and manage logins link and select the Authentication tab. Here you can generate a new token: Copy the generated token. Install the YouTrack App on elmah.io Log into elmah.io and go to the log settings. Click the Apps tab. Locate the YouTrack app and click the Install button. Input your instance, project and token from the previous step: Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured YouTrack project.","title":"YouTrack"},{"location":"elmah-io-apps-youtrack/#install-youtrack-app-for-elmahio","text":"","title":"Install YouTrack App for elmah.io"},{"location":"elmah-io-apps-youtrack/#get-your-token","text":"In order to allow elmah.io to create issues on YouTrack, you will need a permanen token. Go to your profile , click the Update personal information and manage logins link and select the Authentication tab. Here you can generate a new token: Copy the generated token.","title":"Get your token"},{"location":"elmah-io-apps-youtrack/#install-the-youtrack-app-on-elmahio","text":"Log into elmah.io and go to the log settings. Click the Apps tab. Locate the YouTrack app and click the Install button. Input your instance, project and token from the previous step: Click Save and the app is added to your log. When new errors are logged, issues are automatically created in the configured YouTrack project.","title":"Install the YouTrack App on elmah.io"},{"location":"export-data-from-elmah-io-to-json/","text":"Export data from elmah.io to JSON If you want to export data from elmah.io, we support this through the Elmah.Io.Export tool . The tool is available on GitHub and should be built on an OS of your choice (the tool is implemented in .NET Core). To export all data from a log, run the tool with the minimum number of parameters: dotnet Elmah.Io.Export.dll -ApiKey c7e049966ddf450f8ce6aeded7b581d0 -LogId 9f01ca78-174a-4a96-9f84-a336917a9deb The following switches are available: Name Required Default Description -ApiKey Your API key needed to access your subscription ( where is my API key? ). -LogId The ID of the log you want to export from ( where is my log ID? ). -Filename Export-{ticks}.json Name of the output file. -DateFrom DateTime.Min Date and time in ISO8601 to export messages from. -DateTo DateTime.Max Date and time in ISO8601 to export messages to. -Query A lucene query to filter messages by. See Query messages using full-text search for details. -IncludeHeaders false Indicates if the output should include headers like cookies and server variables (runs slower).","title":"Export data from elmah.io to JSON"},{"location":"export-data-from-elmah-io-to-json/#export-data-from-elmahio-to-json","text":"If you want to export data from elmah.io, we support this through the Elmah.Io.Export tool . The tool is available on GitHub and should be built on an OS of your choice (the tool is implemented in .NET Core). To export all data from a log, run the tool with the minimum number of parameters: dotnet Elmah.Io.Export.dll -ApiKey c7e049966ddf450f8ce6aeded7b581d0 -LogId 9f01ca78-174a-4a96-9f84-a336917a9deb The following switches are available: Name Required Default Description -ApiKey Your API key needed to access your subscription ( where is my API key? ). -LogId The ID of the log you want to export from ( where is my log ID? ). -Filename Export-{ticks}.json Name of the output file. -DateFrom DateTime.Min Date and time in ISO8601 to export messages from. -DateTo DateTime.Max Date and time in ISO8601 to export messages to. -Query A lucene query to filter messages by. See Query messages using full-text search for details. -IncludeHeaders false Indicates if the output should include headers like cookies and server variables (runs slower).","title":"Export data from elmah.io to JSON"},{"location":"handle-elmah-io-downtime/","text":"Handle elmah.io downtime Like every other SaaS product out there, we cannot promise you 100% uptime on elmah.io. We understand, that your logging data is extremely important for your business and we do everything in our power to secure that elmah.io is running smoothly. To monitor our API's and websites, check out status.elmah.io . But how do you handle the time where you need to log a message in elmah.io and the service is down? You have a few options actually: Subscribe to the OnMessageFail event You can subscribe an event handler to listen for this situation (where communicating with the elmah.io API fails). To hook up an event handler, write this piece of code in your initialization code: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessageFail += (sender, args) = { var message = args.Message; var exception = args.Error; // TODO: log message and/or exception somewhere else. }; The example is for ASP.NET and using the Elmah.Io.Client package. Similar options are available for other web and logging frameworks. Log to multiple logs If you want to be able to rollback to another solution, in case elmah.io goes down, you can actually log to multiple error logs as described here: Logging to multiple ELMAH logs . If you are using one of our integrations for other web and logging framework, various options are available too. This could be logging to a local file or database. We constantly work to improve the uptime of the entire solution. Response explanation Here's an overview of the types of errors you can experience from the API: Response Meaning Timeout Something is very wrong with our API or Azure. You can be sure that we are working 24/7 to fix it. 500 The API is reachable, but we have a problem like communicating with Azure Service bus. Azure has great uptime and all of our resources are dedicated and replicated. Still, we experience short periods of dowmtime from time to time. 429 We allow a maximum (per API key) of 500 requests per minute and 3600 per hour. 429 means that you have crossed that line. This status code doesn't indicate that the API is down. 4xx Something is wrong with the request. Check out the API documentation for details. This status code doesn't indicate that the API is down.","title":"Handle elmah.io downtime"},{"location":"handle-elmah-io-downtime/#handle-elmahio-downtime","text":"Like every other SaaS product out there, we cannot promise you 100% uptime on elmah.io. We understand, that your logging data is extremely important for your business and we do everything in our power to secure that elmah.io is running smoothly. To monitor our API's and websites, check out status.elmah.io . But how do you handle the time where you need to log a message in elmah.io and the service is down? You have a few options actually: Subscribe to the OnMessageFail event You can subscribe an event handler to listen for this situation (where communicating with the elmah.io API fails). To hook up an event handler, write this piece of code in your initialization code: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessageFail += (sender, args) = { var message = args.Message; var exception = args.Error; // TODO: log message and/or exception somewhere else. }; The example is for ASP.NET and using the Elmah.Io.Client package. Similar options are available for other web and logging frameworks. Log to multiple logs If you want to be able to rollback to another solution, in case elmah.io goes down, you can actually log to multiple error logs as described here: Logging to multiple ELMAH logs . If you are using one of our integrations for other web and logging framework, various options are available too. This could be logging to a local file or database. We constantly work to improve the uptime of the entire solution.","title":"Handle elmah.io downtime"},{"location":"handle-elmah-io-downtime/#response-explanation","text":"Here's an overview of the types of errors you can experience from the API: Response Meaning Timeout Something is very wrong with our API or Azure. You can be sure that we are working 24/7 to fix it. 500 The API is reachable, but we have a problem like communicating with Azure Service bus. Azure has great uptime and all of our resources are dedicated and replicated. Still, we experience short periods of dowmtime from time to time. 429 We allow a maximum (per API key) of 500 requests per minute and 3600 per hour. 429 means that you have crossed that line. This status code doesn't indicate that the API is down. 4xx Something is wrong with the request. Check out the API documentation for details. This status code doesn't indicate that the API is down.","title":"Response explanation"},{"location":"how-prices-are-calculated/","text":"How prices are calculated When using elmah.io, you may experience the need to switch plan, update your credit card and other tasks which will require changes to your current payment. Every time you change something that requires a new or upcoming charge on your credit card, we reset your subscription. This means that we charge you the difference from what you already paid, to the cost of what you are switching to. Example 1: Switch to a higher plan If you purchased a Small Business ($29) at June 1. and want to upgrade to Business ($49) on June 15, we charge you ~ $35. You already paid $15 for half of June on the Small Business plan, why the remaining amount is deducted from the $49. Your next payment will be on July 15. Example 2: Switch to a lower plan If your purchased a Business plan ($49) on June 15. and downgrade to a Small Business plan ($29) on July 1. you will be charged $49 on June 15. and $29 on July 15. You commit to either a month or a year in advance. When downgrading to a lower plan, you will stay on the current plan until your subscription is renewed. When that happens, you are charged the price of the lower plan. Example 3: Update your credit card Our payment provider requires a payment, when inputting a new credit card. Updating credit cards therefore works exactly like when upgrading to a larger plan. We look at what you have already paid and calculate a discount based on that as well as the price for the plan you are already on.","title":"How prices are calculated"},{"location":"how-prices-are-calculated/#how-prices-are-calculated","text":"When using elmah.io, you may experience the need to switch plan, update your credit card and other tasks which will require changes to your current payment. Every time you change something that requires a new or upcoming charge on your credit card, we reset your subscription. This means that we charge you the difference from what you already paid, to the cost of what you are switching to. Example 1: Switch to a higher plan If you purchased a Small Business ($29) at June 1. and want to upgrade to Business ($49) on June 15, we charge you ~ $35. You already paid $15 for half of June on the Small Business plan, why the remaining amount is deducted from the $49. Your next payment will be on July 15. Example 2: Switch to a lower plan If your purchased a Business plan ($49) on June 15. and downgrade to a Small Business plan ($29) on July 1. you will be charged $49 on June 15. and $29 on July 15. You commit to either a month or a year in advance. When downgrading to a lower plan, you will stay on the current plan until your subscription is renewed. When that happens, you are charged the price of the lower plan. Example 3: Update your credit card Our payment provider requires a payment, when inputting a new credit card. Updating credit cards therefore works exactly like when upgrading to a larger plan. We look at what you have already paid and calculate a discount based on that as well as the price for the plan you are already on.","title":"How prices are calculated"},{"location":"how-to-configure-api-key-permissions/","text":"How to configure API key permissions Security on the elmah.io API is handled through the use of API keys. All requests to the API must be accompanied by an API key. When creating your organization, a default API key was automatically created. API keys can be revoked and you can create multiple API keys for different purposes and projects. Much like a user can be awarded different levels of access on elmah.io, API keys also have a set of permissions. The default created API key for your organization, only have permission to write log messages to elmah.io. API key permissions were added in August 2018, why keys created before that have all permissions enabled. We recommend those of you with old API keys to configure the needed permissions. To configure permissions for a new or existing API key, either click the Edit or Add API Key button on the API Keys tab of your organization settings. This will show the API key editor view: Like mentioned previously, new keys have the messages_write permission enabled only. This permission will cover logging from your application to elmah.io. If your application needs to browse messages from elmah.io, create new logs/applications, etc. you will need to enable the corresponding permission. Notice that read permissions don't need to be enabled, in order for you to browse logs and log messages on the elmah.io UI. API keys are used by the range of client integrations only. Your API key shouldn't be shared outside your organization. In some situations, you will need to share your API key (like when logging from JavaScript). In these cases, it's essential that your API key only have the messages_write permission enabled. With all permissions enabled, everyone will be able to browse your logs.","title":"How to configure API key permissions"},{"location":"how-to-configure-api-key-permissions/#how-to-configure-api-key-permissions","text":"Security on the elmah.io API is handled through the use of API keys. All requests to the API must be accompanied by an API key. When creating your organization, a default API key was automatically created. API keys can be revoked and you can create multiple API keys for different purposes and projects. Much like a user can be awarded different levels of access on elmah.io, API keys also have a set of permissions. The default created API key for your organization, only have permission to write log messages to elmah.io. API key permissions were added in August 2018, why keys created before that have all permissions enabled. We recommend those of you with old API keys to configure the needed permissions. To configure permissions for a new or existing API key, either click the Edit or Add API Key button on the API Keys tab of your organization settings. This will show the API key editor view: Like mentioned previously, new keys have the messages_write permission enabled only. This permission will cover logging from your application to elmah.io. If your application needs to browse messages from elmah.io, create new logs/applications, etc. you will need to enable the corresponding permission. Notice that read permissions don't need to be enabled, in order for you to browse logs and log messages on the elmah.io UI. API keys are used by the range of client integrations only. Your API key shouldn't be shared outside your organization. In some situations, you will need to share your API key (like when logging from JavaScript). In these cases, it's essential that your API key only have the messages_write permission enabled. With all permissions enabled, everyone will be able to browse your logs.","title":"How to configure API key permissions"},{"location":"include-filename-and-line-number-in-stacktraces/","text":"Include filename and line number in stack traces When deploying your application to the test and production environment, you normally want to use the Release configuration. When doing so, your code is optimized, web.config transformation is running and a few additional things. But, part of running on a Release build is, that you lose the ability to see filenames and line numbers in the stack traces produced by your system. .NET offer the concept of PDB files, which is automatically generated when building your code. The PDB file contains information for the debugger to work, like which file to look up when a breakpoint is reached in your code. Unless you have changed the default settings inside Visual Studio, both the Debug and Release configuration generates a PDB file. So, if both Debug and Release produces a PDB file, why does Debug builds include file name and line number in stack traces, while the Release build doesn't? The reason is most often caused by the fact that PDB files aren't published as part of the deployment. To do so, right click your project in Visual Studio and Select Properties . Click the Package/Publish Web tab and make sure that the Release configuration is selected in the dropdown. Next, remove the check in Exclude generated debug symbols : Also, make sure that the PDB file is generated as part of Release builds. Select the Build tab and click Advanced... . In Debug Info you want to make sure that either pdb-only or full is selected ( pdb-only being the default): On your next deployment, PDB files are published as part of the build. Depending on who you talk to, deploying PDB files as part of your build may be considered a hack. Since PDB file can contain sensitive information about your implementation, publishing these files should only be done, if you have full control of the environment you are deploying to. When releasing software to external users/customers, you don't want to include your PDB files. In this case, you should store the PDB files internally, in a symbol server or similar.","title":"Include filename and like number in stack traces"},{"location":"include-filename-and-line-number-in-stacktraces/#include-filename-and-line-number-in-stack-traces","text":"When deploying your application to the test and production environment, you normally want to use the Release configuration. When doing so, your code is optimized, web.config transformation is running and a few additional things. But, part of running on a Release build is, that you lose the ability to see filenames and line numbers in the stack traces produced by your system. .NET offer the concept of PDB files, which is automatically generated when building your code. The PDB file contains information for the debugger to work, like which file to look up when a breakpoint is reached in your code. Unless you have changed the default settings inside Visual Studio, both the Debug and Release configuration generates a PDB file. So, if both Debug and Release produces a PDB file, why does Debug builds include file name and line number in stack traces, while the Release build doesn't? The reason is most often caused by the fact that PDB files aren't published as part of the deployment. To do so, right click your project in Visual Studio and Select Properties . Click the Package/Publish Web tab and make sure that the Release configuration is selected in the dropdown. Next, remove the check in Exclude generated debug symbols : Also, make sure that the PDB file is generated as part of Release builds. Select the Build tab and click Advanced... . In Debug Info you want to make sure that either pdb-only or full is selected ( pdb-only being the default): On your next deployment, PDB files are published as part of the build. Depending on who you talk to, deploying PDB files as part of your build may be considered a hack. Since PDB file can contain sensitive information about your implementation, publishing these files should only be done, if you have full control of the environment you are deploying to. When releasing software to external users/customers, you don't want to include your PDB files. In this case, you should store the PDB files internally, in a symbol server or similar.","title":"Include filename and line number in stack traces"},{"location":"integrate-elmah-io-with-hipchat/","text":"Integrate with HipChat Before we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page (replace youraccount with your account name). Create a new token with the Send Notification type and label it something meaningful: We will need the generated token in a minute, so keep that tab open. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM ): Field Value Method POST URL https://api.hipchat.com/v2/room/YOUR_ROOM/notification Content Type application/json Body {\"from\":\"elmah.io\",\"message\":\"$message\"} Authentication Bearer Token Token YOUR_TOKEN The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat: HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this","title":"Integrating with HipChat manually"},{"location":"integrate-elmah-io-with-hipchat/#integrate-with-hipchat","text":"Before we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page (replace youraccount with your account name). Create a new token with the Send Notification type and label it something meaningful: We will need the generated token in a minute, so keep that tab open. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM ): Field Value Method POST URL https://api.hipchat.com/v2/room/YOUR_ROOM/notification Content Type application/json Body {\"from\":\"elmah.io\",\"message\":\"$message\"} Authentication Bearer Token Token YOUR_TOKEN The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat: HipChat doesn't allow more than 500 requests per 5 minutes. If you generate more messages to elmah.io, not all of them will show up in HipChat because of this","title":"Integrate with HipChat"},{"location":"integrate-elmah-io-with-slack/","text":"Integrate with Slack This document is obsolete. You should integrate with Slack using our Slack App . In fact, Slack recommend not sharing test tokens outside your company, which is why this guide probably will be deleted in the near future. Start by copying your Slack-token from the API page . We will need this when setting up the integration. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL): Field Value Method POST URL https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io The final result should look like this: Don't worry about the empty Content-Type and Body. Everything needed to post the message to Slack is embedded into the URL. To learn more about the structure of the URL, jump to Breaking it down Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack: Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this. Breaking it down You should have received a message on Slack already. To learn more about how to specify and extend the configuration for Slack, this is the section for you. Let's start by inspecting the simplest possible Slack URL: https://slack.com/api/chat.postMessage?token=xxxx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxx-xxxxxxxxxx channel=%23general text=$message The initial part ( https://slack.com/api/chat.postMessage ) points out the method to invoke on Slack. In this case, we want to post a new message ( chat.postMessage ). The token query parameter contains your access token as found on the API page . The channel parameter contains the name or the ID of the channel you want to post the chat message to. In the example above, I specify the #general channel, but it can be any channel on your account. Observe how I've URL encoded the # character. Next up is the text parameter which contains the actual message we want to post to #general. By inserting $message , I tell elmah.io to insert the title or headline of the logged message. In case of an exception, this will be the exception message generated at your website. elmah.io supports a range of variables, available on the Rules tab on the log settings. To add a sender name other than Bot , add a username parameter like this: username=elmah.io . If you want a nice profile icon as well, you can append the following parameter: icon_url=https://elmah.io/icons/AppIcon50x50.png . This tells Slack to show a nice elmah.io icon next to the chat messages.","title":"Integrating with Slack manually"},{"location":"integrate-elmah-io-with-slack/#integrate-with-slack","text":"This document is obsolete. You should integrate with Slack using our Slack App . In fact, Slack recommend not sharing test tokens outside your company, which is why this guide probably will be deleted in the near future. Start by copying your Slack-token from the API page . We will need this when setting up the integration. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL): Field Value Method POST URL https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io The final result should look like this: Don't worry about the empty Content-Type and Body. Everything needed to post the message to Slack is embedded into the URL. To learn more about the structure of the URL, jump to Breaking it down Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack: Slack doesn't allow more than a single request per second. If you generate more than one message to elmah.io per second, not all of them will show up in Slack because of this.","title":"Integrate with Slack"},{"location":"integrate-elmah-io-with-slack/#breaking-it-down","text":"You should have received a message on Slack already. To learn more about how to specify and extend the configuration for Slack, this is the section for you. Let's start by inspecting the simplest possible Slack URL: https://slack.com/api/chat.postMessage?token=xxxx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxx-xxxxxxxxxx channel=%23general text=$message The initial part ( https://slack.com/api/chat.postMessage ) points out the method to invoke on Slack. In this case, we want to post a new message ( chat.postMessage ). The token query parameter contains your access token as found on the API page . The channel parameter contains the name or the ID of the channel you want to post the chat message to. In the example above, I specify the #general channel, but it can be any channel on your account. Observe how I've URL encoded the # character. Next up is the text parameter which contains the actual message we want to post to #general. By inserting $message , I tell elmah.io to insert the title or headline of the logged message. In case of an exception, this will be the exception message generated at your website. elmah.io supports a range of variables, available on the Rules tab on the log settings. To add a sender name other than Bot , add a username parameter like this: username=elmah.io . If you want a nice profile icon as well, you can append the following parameter: icon_url=https://elmah.io/icons/AppIcon50x50.png . This tells Slack to show a nice elmah.io icon next to the chat messages.","title":"Breaking it down"},{"location":"integrate-elmah-io-with-zapier/","text":"Integrate with Zapier In short, Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exist, in this example we use the GitHub action to create a new issue every time a new message is logged. Create a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown: Select elmah.io in the Choose a Trigger app\u2026 dropdown and then select New Error in the Choose a Trigger\u2026 dropdown. In the Choose an Action app\u2026 select GitHub and select Create Issue in the Choose an Action\u2026 dropdown. This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue. In Section 2 select the Connect a different elmah.io Account and input a name and the log id of the log you want to integrate: Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error: In Step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally, I\u2019ve selected bug as a label. Test the Zap and hit Continue : Finally, name your Zap and click the Turn Zap on button: When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!","title":"Integrating with Zapier"},{"location":"integrate-elmah-io-with-zapier/#integrate-with-zapier","text":"In short, Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exist, in this example we use the GitHub action to create a new issue every time a new message is logged. Create a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown: Select elmah.io in the Choose a Trigger app\u2026 dropdown and then select New Error in the Choose a Trigger\u2026 dropdown. In the Choose an Action app\u2026 select GitHub and select Create Issue in the Choose an Action\u2026 dropdown. This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue. In Section 2 select the Connect a different elmah.io Account and input a name and the log id of the log you want to integrate: Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error: In Step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally, I\u2019ve selected bug as a label. Test the Zap and hit Continue : Finally, name your Zap and click the Turn Zap on button: When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!","title":"Integrate with Zapier"},{"location":"logging-custom-data/","text":"Logging custom data ELMAH stores a lot of contextual information when an error occurs. Things like cookies, stack trace, server variables and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client. Let\u2019s look at some code. You have two options of decorating your errors with custom variables. Use the Data dictionary on .NET\u2019s Exception type I talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named Data and of type IDictionary . The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to elmah.io\u2019s API . To log custom data using Data , just add a new key/value pair to the Data dictionary: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add( InputValueWas , inputValue); ErrorSignal.FromCurrentContext().Raise(e); } In the example I add a custom variable named InputValueWas with the value of the inputValue variable. This way I will be able to see which input value caused the exception. Use the OnMessage hook in the elmah.io client You may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (args.Message.Data == null) args.Message.Data = new List Item (); args.Message.Data.Add(new Item { Key = SomeOtherVariable , Value = someVariable }); }; You may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception. In the code example I subscribe a new event handler to the OnMessage event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the Data dictionary of the message logged to elmah.io. Looking at your custom data Logging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details: Like the content in the other tabs of the error details, you will be able to filter results by the variable key. Searching custom data Custom data is not searchable by default. Sometimes it makes sense, that errors can be searched from values logged as part of custom data. For now, this feature is supported through the use of variable naming, but we may extend this to a configuration option through the UI as well. To make a custom variable and its value searchable through the UI (as well as through the API), name the variable with the prefix X-ELMAHIO-SEARCH- . The variable will become searchable through the name added after the prefix. Example: Elmah.ErrorLog.GetDefault(null); var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (args.Message.Data == null) args.Message.Data = new List Item (); args.Message.Data.Add(new Item { Key = X-ELMAHIO-SEARCH-myVariable , Value = Some funky value }); }; would make myVariable searchable using this query: data.myVariable:funky Observe how the X-ELMAHIO-SEARCH- prefix is replaced with the data. prefix when indexed in elmah.io. To avoid someone filling up our cluster with custom data, only the first three variables prefixed with X-ELMAHIO-SEARCH- are made searchable. Also, variables with a value containing more than 256 characters are not indexed.","title":"Logging custom data"},{"location":"logging-custom-data/#logging-custom-data","text":"ELMAH stores a lot of contextual information when an error occurs. Things like cookies, stack trace, server variables and much more are stored to ease debugging the error at a later point in time. Most error log implementations for ELMAH doesn't support custom variables. Luckily, this is not the case for the elmah.io client. Let\u2019s look at some code. You have two options of decorating your errors with custom variables.","title":"Logging custom data"},{"location":"logging-custom-data/#use-the-data-dictionary-on-nets-exception-type","text":"I talk to a lot of developers and not all of them know about the wonderful world of the Data dictionary. All exceptions in .NET contains a property named Data and of type IDictionary . The Data dictionary is intended for user-defined information about the exception. The elmah.io client iterates through key/values in this dictionary and ship it off to elmah.io\u2019s API . To log custom data using Data , just add a new key/value pair to the Data dictionary: try { CallSomeBusinessLogic(inputValue); } catch (Exception e) { e.Data.Add( InputValueWas , inputValue); ErrorSignal.FromCurrentContext().Raise(e); } In the example I add a custom variable named InputValueWas with the value of the inputValue variable. This way I will be able to see which input value caused the exception.","title":"Use the Data dictionary on .NET\u2019s Exception type"},{"location":"logging-custom-data/#use-the-onmessage-hook-in-the-elmahio-client","text":"You may not use ELMAH\u2019s ErrorSignal feature, but rely on ELMAH to log uncaught exceptions only. In this scenario you probably don\u2019t have access to the thrown exception. The elmah.io client offers a hook for you to be able to execute code every time something is logged: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (args.Message.Data == null) args.Message.Data = new List Item (); args.Message.Data.Add(new Item { Key = SomeOtherVariable , Value = someVariable }); }; You may not have seen the Logger type of elmah.io before, but what\u2019s important to know right now is, that Logger is responsible for logging messages to the elmah.io API. Another new term here is Message. A message is the type encapsulating all of the information about the thrown exception. In the code example I subscribe a new event handler to the OnMessage event. This tells the elmah.io client to execute your event handler, before actually logging an exception to elmah.io. I use the event to add a custom variable to the Data dictionary of the message logged to elmah.io.","title":"Use the OnMessage hook in the elmah.io client"},{"location":"logging-custom-data/#looking-at-your-custom-data","text":"Logging custom data doesn\u2019t really make anything easier, unless you have a place to show them. Luckily for you, we have thought about that and now offers a new tab on the error details: Like the content in the other tabs of the error details, you will be able to filter results by the variable key.","title":"Looking at your custom data"},{"location":"logging-custom-data/#searching-custom-data","text":"Custom data is not searchable by default. Sometimes it makes sense, that errors can be searched from values logged as part of custom data. For now, this feature is supported through the use of variable naming, but we may extend this to a configuration option through the UI as well. To make a custom variable and its value searchable through the UI (as well as through the API), name the variable with the prefix X-ELMAHIO-SEARCH- . The variable will become searchable through the name added after the prefix. Example: Elmah.ErrorLog.GetDefault(null); var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (args.Message.Data == null) args.Message.Data = new List Item (); args.Message.Data.Add(new Item { Key = X-ELMAHIO-SEARCH-myVariable , Value = Some funky value }); }; would make myVariable searchable using this query: data.myVariable:funky Observe how the X-ELMAHIO-SEARCH- prefix is replaced with the data. prefix when indexed in elmah.io. To avoid someone filling up our cluster with custom data, only the first three variables prefixed with X-ELMAHIO-SEARCH- are made searchable. Also, variables with a value containing more than 256 characters are not indexed.","title":"Searching custom data"},{"location":"logging-errors-programmatically/","text":"Logging errors programmatically So you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { // What to do? } Obviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s ErrorSignal class we can log the error: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { ErrorSignal.FromCurrentContext().Raise(e); } We call the static method FromCurrentContext on the ErrorSignal class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint. In the example above, I use the FromCurrentContext helper to create a new instance of ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the http context: ErrorLog.GetDefault(null).Log(new Error(e)); If you simply want to log text messages and don't need all of the HTTP context information, consider using one of our integrations for popular logging frameworks like log4net , NLog or Serilog . Also, the Elmah.Io.Client package contains a logging API documented here .","title":"Logging errors programmatically"},{"location":"logging-errors-programmatically/#logging-errors-programmatically","text":"So you\u2019ve setup a shiny new ELMAH log and all of your un-handled errors are logged to ELMAH. Now you\u2019re wondering: \u201cHow do I log my handled errors to ELMAH programmatically?\u201d You are in luck! ELMAH provides a nice API to do just that through error signaling. Consider the following code: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { // What to do? } Obviously an exception is thrown when trying to divide by zero, but what if we want to catch (and log) that exception instead of throwing it back through the call stack? With ELMAH\u2019s ErrorSignal class we can log the error: try { int i = 0; int result = 42 / i; } catch (DivideByZeroException e) { ErrorSignal.FromCurrentContext().Raise(e); } We call the static method FromCurrentContext on the ErrorSignal class, which returns a new object for doing the actual logging. Logging happens through the Raise method, which logs the exception to the configured ELMAH storage endpoint. In the example above, I use the FromCurrentContext helper to create a new instance of ErrorSignal . ELMAH also works outside the context of a webserver and in this case, you would simply use the default logger with null as the http context: ErrorLog.GetDefault(null).Log(new Error(e)); If you simply want to log text messages and don't need all of the HTTP context information, consider using one of our integrations for popular logging frameworks like log4net , NLog or Serilog . Also, the Elmah.Io.Client package contains a logging API documented here .","title":"Logging errors programmatically"},{"location":"logging-through-a-http-proxy/","text":"Logging through a HTTP proxy You may find yourself in a situation, where your production web servers aren't allowing HTTP requests towards the public Internet. This also impacts the elmah.io client, which requires access to the URL https://api.elmah.io. A popular choice of implementing this kind of restriction nowadays, is through a HTTP proxy like squid. Luckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through web.config : ?xml version= 1.0 encoding= utf-8 ? configuration configSections sectionGroup name= elmah section name= security requirePermission= false type= Elmah.SecuritySectionHandler, Elmah / section name= errorLog requirePermission= false type= Elmah.ErrorLogSectionHandler, Elmah / section name= errorMail requirePermission= false type= Elmah.ErrorMailSectionHandler, Elmah / section name= errorFilter requirePermission= false type= Elmah.ErrorFilterSectionHandler, Elmah / /sectionGroup /configSections elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= ... LogId= ... / /elmah system.net defaultProxy proxy usesystemdefault= True proxyaddress= http://192.168.0.1:3128 bypassonlocal= False / /defaultProxy /system.net /configuration The above example is of course greatly simplified. The elmah.io client automatically picks up the defaultProxy configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port you are using). Proxies with username/password Some proxies require a username/password. Unfortunately, the defaultProxy element doesn't support authentication. You have two ways to set this up: Use default credentials Make sure to set the useDefaultCredentials attribute to true : system.net defaultProxy useDefaultCredentials= true ... /defaultProxy /system.net Run your web app (application pool) as a user with access to the proxy. Implement your own proxy Add the following class: public class AuthenticatingProxy : IWebProxy { public ICredentials Credentials { get { return new NetworkCredential( username , password ); } set {} } public Uri GetProxy(Uri destination) { return new Uri( http://localhost:8888 ); } public bool IsBypassed(Uri host) { return false; } } Configure the new proxy in web.config : defaultProxy useDefaultCredentials= false module type= YourNamespace.AuthenticatingProxy, YourAssembly / /defaultProxy ASP.NET Core ASP.NET Core websites doesn't have a web.config file. In this case, you will need to configure the proxy through code: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); options.WebProxy = new WebProxy( localhost , 8888); }); ... } In the example above, a proxy running on port 8888 locally, is set up using the WebProxy property of the elmah.io options. ASP.NET Core 2.1 seems to have some problems when setting up authenticated proxies. We will update the documentation as soon as we know more.","title":"Logging through a HTTP proxy"},{"location":"logging-through-a-http-proxy/#logging-through-a-http-proxy","text":"You may find yourself in a situation, where your production web servers aren't allowing HTTP requests towards the public Internet. This also impacts the elmah.io client, which requires access to the URL https://api.elmah.io. A popular choice of implementing this kind of restriction nowadays, is through a HTTP proxy like squid. Luckily the elmah.io client supports proxy configuration out of the box. Let\u2019s look at how to configure a HTTP proxy through web.config : ?xml version= 1.0 encoding= utf-8 ? configuration configSections sectionGroup name= elmah section name= security requirePermission= false type= Elmah.SecuritySectionHandler, Elmah / section name= errorLog requirePermission= false type= Elmah.ErrorLogSectionHandler, Elmah / section name= errorMail requirePermission= false type= Elmah.ErrorMailSectionHandler, Elmah / section name= errorFilter requirePermission= false type= Elmah.ErrorFilterSectionHandler, Elmah / /sectionGroup /configSections elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= ... LogId= ... / /elmah system.net defaultProxy proxy usesystemdefault= True proxyaddress= http://192.168.0.1:3128 bypassonlocal= False / /defaultProxy /system.net /configuration The above example is of course greatly simplified. The elmah.io client automatically picks up the defaultProxy configuration through the system.net element. defaultProxy tunnels every request from your server, including requests to elmah.io, through the proxy located on 192.18.0.1 port 3128 (or whatever IP/hostname and port you are using).","title":"Logging through a HTTP proxy"},{"location":"logging-through-a-http-proxy/#proxies-with-usernamepassword","text":"Some proxies require a username/password. Unfortunately, the defaultProxy element doesn't support authentication. You have two ways to set this up:","title":"Proxies with username/password"},{"location":"logging-through-a-http-proxy/#use-default-credentials","text":"Make sure to set the useDefaultCredentials attribute to true : system.net defaultProxy useDefaultCredentials= true ... /defaultProxy /system.net Run your web app (application pool) as a user with access to the proxy.","title":"Use default credentials"},{"location":"logging-through-a-http-proxy/#implement-your-own-proxy","text":"Add the following class: public class AuthenticatingProxy : IWebProxy { public ICredentials Credentials { get { return new NetworkCredential( username , password ); } set {} } public Uri GetProxy(Uri destination) { return new Uri( http://localhost:8888 ); } public bool IsBypassed(Uri host) { return false; } } Configure the new proxy in web.config : defaultProxy useDefaultCredentials= false module type= YourNamespace.AuthenticatingProxy, YourAssembly / /defaultProxy","title":"Implement your own proxy"},{"location":"logging-through-a-http-proxy/#aspnet-core","text":"ASP.NET Core websites doesn't have a web.config file. In this case, you will need to configure the proxy through code: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); options.WebProxy = new WebProxy( localhost , 8888); }); ... } In the example above, a proxy running on port 8888 locally, is set up using the WebProxy property of the elmah.io options. ASP.NET Core 2.1 seems to have some problems when setting up authenticated proxies. We will update the documentation as soon as we know more.","title":"ASP.NET Core"},{"location":"logging-to-elmah-io-from-aspnet-core/","text":"Logging to elmah.io from ASP.NET Core If you are looking to log all uncaught errors from ASP.NET Core, you've come to the right place. For help setting up general .NET Core logging similar to log4net, check out Logging from Microsoft.Extensions.Logging . To log all warnings and errors from ASP.NET Core, install the following NuGet package: Install-Package Elmah.Io.AspNetCore Call AddElmahIo in the ConfigureServices -method in the Startup.cs file: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); }); ... } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Configure -method in the Startup.cs file: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { ... app.UseElmahIo(); ... } Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions (like UseDeveloperExceptionPage and UseExceptionHandler ), but before any calls to UseStaticFiles , UseMvc and similar. That's it. Every uncaught exception will be logged to elmah.io. Configuring API key and log ID in options If you have different environments (everyone have a least localhost and production), you should consider adding the API key and log ID in your appsettings.json file: { ... ElmahIo : { ApiKey : API_KEY , LogId : LOG_ID } } Configuring elmah.io is done by calling the Configure method instead of AddElmahIo : public void ConfigureServices(IServiceCollection services) { services.Configure ElmahIoOptions (Configuration.GetSection( ElmahIo )); } You can still configure additional options on the ElmahIoOptions object: public void ConfigureServices(IServiceCollection services) { services.Configure ElmahIoOptions (Configuration.GetSection( ElmahIo )); services.Configure ElmahIoOptions (o = { o.OnMessage = msg = { msg.Version = 1.0.0 ; }; }); } Logging exceptions manually While automatically logging all uncaught exceptions is definitely a nice feature, sometimes you may want to catch exceptions and log them manually. If you just want to log the exception details, without all of the contextual information about the HTTP context (cookies, server variables, etc.), we recommend you to look at our integration for Microsoft.Extensions.Logging . If the context is important for the error, you can utilize the Ship -methods available in Elmah.Io.AspNetCore : try { var i = 0; var result = 42/i; } catch (DivideByZeroException e) { e.Ship(HttpContext); } When catching an exception, you simply call the Ship extension method with the current HTTP context as parameter. Additional options Events elmah.io for ASP.NET Core supports a range of events for hooking into the process of logging messages. Events are registered as actions when installing the elmah.io middleware: services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); o.OnMessage = message = { message.Version = 42 ; }; o.OnError = (message, exception) = { logger.LogError(1, exception, Error during log to elmah.io ); }; }); The actions provide a mechanism for hooking into the log process. The action registered in the OnMessage property is called by elmah.io just before logging a new message to the API. Use this action to decorate/enrich your log messages with additional data, like a version number. The OnError action is called if communication with the elmah.io API failed. If this happens, you should log the message to a local log (through Microsoft.Extensions.Logging, Serilog or similar). Do not log to elmah.io in your OnError action, since that could cause an infinite loop in your code. While elmah.io supports ignore rules serverside, you may want to filter out errors without even hitting the elmah.io API. Using the OnFilter function on the options object, filtering is easy: services.AddElmahIo(o = { ... o.OnFilter = message = { return message.Type == System.NullReferenceException ; }; }); The example above, ignores all messages of type System.NullReferenceException . Formatting exceptions A default exception formatter is used to format any exceptions, before sending them off to the elmah.io API. To override the format of the details field in elmah.io, set a new IExceptionFormatter in the ExceptionFormatter property on the ElmahIoOptions object: services.AddElmahIo(o = { ... o.ExceptionFormatter = new DefaultExceptionFormatter(); } Besides the default exception formatted ( DefaultExceptionFormatter ), Elmah.Io.AspNetCore comes with a formatter called YellowScreenOfDeathExceptionFormatter . This formatter, outputs an exception and its inner exceptions as a list of exceptions, much like on the ASP.NET yellow screen of death. If you want, implementing your own exception formatter, requires you to implement a single method. Logging responses not throwing an exception As default, uncaught exceptions (500's) and 404's are logged automatically. Let's say you have a controller returning a Bad Request and want to log that as well. Since returning a 400 from a controller doesn't trigger an exception, you will need to configure this status code: services.AddElmahIo(o = { ... o.HandledStatusCodesToLog = new List int { 400 }; } Logging through a proxy Since ASP.NET Core no longer support proxy configuration through web.config , you can log to elmah.io by configuring a proxy manually: services.AddElmahIo(o = { ... o.WebProxy = new System.Net.WebProxy( localhost , 8888); } In this example, the elmah.io client routes all traffic through http://localhost:8000 .","title":"Logging from ASP.NET Core"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-to-elmahio-from-aspnet-core","text":"If you are looking to log all uncaught errors from ASP.NET Core, you've come to the right place. For help setting up general .NET Core logging similar to log4net, check out Logging from Microsoft.Extensions.Logging . To log all warnings and errors from ASP.NET Core, install the following NuGet package: Install-Package Elmah.Io.AspNetCore Call AddElmahIo in the ConfigureServices -method in the Startup.cs file: public void ConfigureServices(IServiceCollection services) { services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); }); ... } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the log Id of the log you want to log to. Call UseElmahIo in the Configure -method in the Startup.cs file: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { ... app.UseElmahIo(); ... } Make sure to call the UseElmahIo -method after installation of other pieces of middleware handling exceptions (like UseDeveloperExceptionPage and UseExceptionHandler ), but before any calls to UseStaticFiles , UseMvc and similar. That's it. Every uncaught exception will be logged to elmah.io.","title":"Logging to elmah.io from ASP.NET Core"},{"location":"logging-to-elmah-io-from-aspnet-core/#configuring-api-key-and-log-id-in-options","text":"If you have different environments (everyone have a least localhost and production), you should consider adding the API key and log ID in your appsettings.json file: { ... ElmahIo : { ApiKey : API_KEY , LogId : LOG_ID } } Configuring elmah.io is done by calling the Configure method instead of AddElmahIo : public void ConfigureServices(IServiceCollection services) { services.Configure ElmahIoOptions (Configuration.GetSection( ElmahIo )); } You can still configure additional options on the ElmahIoOptions object: public void ConfigureServices(IServiceCollection services) { services.Configure ElmahIoOptions (Configuration.GetSection( ElmahIo )); services.Configure ElmahIoOptions (o = { o.OnMessage = msg = { msg.Version = 1.0.0 ; }; }); }","title":"Configuring API key and log ID in options"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-exceptions-manually","text":"While automatically logging all uncaught exceptions is definitely a nice feature, sometimes you may want to catch exceptions and log them manually. If you just want to log the exception details, without all of the contextual information about the HTTP context (cookies, server variables, etc.), we recommend you to look at our integration for Microsoft.Extensions.Logging . If the context is important for the error, you can utilize the Ship -methods available in Elmah.Io.AspNetCore : try { var i = 0; var result = 42/i; } catch (DivideByZeroException e) { e.Ship(HttpContext); } When catching an exception, you simply call the Ship extension method with the current HTTP context as parameter.","title":"Logging exceptions manually"},{"location":"logging-to-elmah-io-from-aspnet-core/#additional-options","text":"","title":"Additional options"},{"location":"logging-to-elmah-io-from-aspnet-core/#events","text":"elmah.io for ASP.NET Core supports a range of events for hooking into the process of logging messages. Events are registered as actions when installing the elmah.io middleware: services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); o.OnMessage = message = { message.Version = 42 ; }; o.OnError = (message, exception) = { logger.LogError(1, exception, Error during log to elmah.io ); }; }); The actions provide a mechanism for hooking into the log process. The action registered in the OnMessage property is called by elmah.io just before logging a new message to the API. Use this action to decorate/enrich your log messages with additional data, like a version number. The OnError action is called if communication with the elmah.io API failed. If this happens, you should log the message to a local log (through Microsoft.Extensions.Logging, Serilog or similar). Do not log to elmah.io in your OnError action, since that could cause an infinite loop in your code. While elmah.io supports ignore rules serverside, you may want to filter out errors without even hitting the elmah.io API. Using the OnFilter function on the options object, filtering is easy: services.AddElmahIo(o = { ... o.OnFilter = message = { return message.Type == System.NullReferenceException ; }; }); The example above, ignores all messages of type System.NullReferenceException .","title":"Events"},{"location":"logging-to-elmah-io-from-aspnet-core/#formatting-exceptions","text":"A default exception formatter is used to format any exceptions, before sending them off to the elmah.io API. To override the format of the details field in elmah.io, set a new IExceptionFormatter in the ExceptionFormatter property on the ElmahIoOptions object: services.AddElmahIo(o = { ... o.ExceptionFormatter = new DefaultExceptionFormatter(); } Besides the default exception formatted ( DefaultExceptionFormatter ), Elmah.Io.AspNetCore comes with a formatter called YellowScreenOfDeathExceptionFormatter . This formatter, outputs an exception and its inner exceptions as a list of exceptions, much like on the ASP.NET yellow screen of death. If you want, implementing your own exception formatter, requires you to implement a single method.","title":"Formatting exceptions"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-responses-not-throwing-an-exception","text":"As default, uncaught exceptions (500's) and 404's are logged automatically. Let's say you have a controller returning a Bad Request and want to log that as well. Since returning a 400 from a controller doesn't trigger an exception, you will need to configure this status code: services.AddElmahIo(o = { ... o.HandledStatusCodesToLog = new List int { 400 }; }","title":"Logging responses not throwing an exception"},{"location":"logging-to-elmah-io-from-aspnet-core/#logging-through-a-proxy","text":"Since ASP.NET Core no longer support proxy configuration through web.config , you can log to elmah.io by configuring a proxy manually: services.AddElmahIo(o = { ... o.WebProxy = new System.Net.WebProxy( localhost , 8888); } In this example, the elmah.io client routes all traffic through http://localhost:8000 .","title":"Logging through a proxy"},{"location":"logging-to-elmah-io-from-aspnet-mvc/","text":"Logging to elmah.io from ASP.NET MVC Even though ELMAH works out of the box with ASP.NET MVC, ELMAH and MVC provides some features which interfere with one another. As usual, the great community around ELMAH have done something to fix this, by using the Elmah.Mvc NuGet package. We've built a package for ASP.NET MVC exclusively, which installs all the necessary packages. To start logging exceptions from ASP.NET MVC, install the NuGet package: Install-Package Elmah.Io.Mvc During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it. Every unhandled exception in ASP.NET MVC, is logged to elmah.io. As part of the installation, we also installed Elmah.MVC , which adds some interesting logic around routing and authentication. Take a look in the web.config for application settings with the elmah.mvc. prefix. For documentation about these settings, check out the Elmah.MVC project on GitHub. Since Elmah.MVC configures its own URL for accessing the ELMAH UI (just /elmah and not /elmah.axd ), you can remove the location element in web.config , added by the Elmah.Io.Mvc NuGet package installer.","title":"Logging from ASP.NET MVC"},{"location":"logging-to-elmah-io-from-aspnet-mvc/#logging-to-elmahio-from-aspnet-mvc","text":"Even though ELMAH works out of the box with ASP.NET MVC, ELMAH and MVC provides some features which interfere with one another. As usual, the great community around ELMAH have done something to fix this, by using the Elmah.Mvc NuGet package. We've built a package for ASP.NET MVC exclusively, which installs all the necessary packages. To start logging exceptions from ASP.NET MVC, install the NuGet package: Install-Package Elmah.Io.Mvc During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it. Every unhandled exception in ASP.NET MVC, is logged to elmah.io. As part of the installation, we also installed Elmah.MVC , which adds some interesting logic around routing and authentication. Take a look in the web.config for application settings with the elmah.mvc. prefix. For documentation about these settings, check out the Elmah.MVC project on GitHub. Since Elmah.MVC configures its own URL for accessing the ELMAH UI (just /elmah and not /elmah.axd ), you can remove the location element in web.config , added by the Elmah.Io.Mvc NuGet package installer.","title":"Logging to elmah.io from ASP.NET MVC"},{"location":"logging-to-elmah-io-from-aws-lambdas/","text":"Logging from AWS Lambdas Since AWS now supports .NET Core, logging to elmah.io from a lambda is easy. Logging to elmah.io from AWS Serverless Application AWS Serverless Applications are running on ASP.NET Core. The configuration therefore matches our documentation for ASP.NET Core. Check out Logging from ASP.NET Core for details on how to log all uncaught exceptions from an AWS Serverless Application. The .NET SDK for AWS comes with native support for logging to CloudWatch. We recommend to use Microsoft.Extensions.Logging for logging everything to CloudWatch and warnings and errors to elmah.io. The configuration follows that of Logging from Microsoft.Extensions.Logging . AWS Serverless Applications doesn't have a Program.cs file. To configure logging, you will need to modify either LambdaEntryPoint.cs , LocalEntryPoint.cs or both: public class LambdaEntryPoint : Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction { protected override void Init(IWebHostBuilder builder) { builder .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); }); logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Warning); }); } } The same configuration would go into LocalEntryPoint.cs , if you want to log from localhost as well. Logging from AWS Lambda Project AWS Lambda Project comes with native support for CloudWatch too. In our experience, it's not possible to configure multiple destinations on LambdaLogger , why you would want to use another framework when logging to elmah.io from an AWS Lambda Project. We recommend using a logging framework like Serilog , Microsoft.Extensions.Logging , NLog or log4net .","title":"Logging from AWS Lambdas"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-from-aws-lambdas","text":"Since AWS now supports .NET Core, logging to elmah.io from a lambda is easy.","title":"Logging from AWS Lambdas"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-to-elmahio-from-aws-serverless-application","text":"AWS Serverless Applications are running on ASP.NET Core. The configuration therefore matches our documentation for ASP.NET Core. Check out Logging from ASP.NET Core for details on how to log all uncaught exceptions from an AWS Serverless Application. The .NET SDK for AWS comes with native support for logging to CloudWatch. We recommend to use Microsoft.Extensions.Logging for logging everything to CloudWatch and warnings and errors to elmah.io. The configuration follows that of Logging from Microsoft.Extensions.Logging . AWS Serverless Applications doesn't have a Program.cs file. To configure logging, you will need to modify either LambdaEntryPoint.cs , LocalEntryPoint.cs or both: public class LambdaEntryPoint : Amazon.Lambda.AspNetCoreServer.APIGatewayProxyFunction { protected override void Init(IWebHostBuilder builder) { builder .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); }); logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Warning); }); } } The same configuration would go into LocalEntryPoint.cs , if you want to log from localhost as well.","title":"Logging to elmah.io from AWS Serverless Application"},{"location":"logging-to-elmah-io-from-aws-lambdas/#logging-from-aws-lambda-project","text":"AWS Lambda Project comes with native support for CloudWatch too. In our experience, it's not possible to configure multiple destinations on LambdaLogger , why you would want to use another framework when logging to elmah.io from an AWS Lambda Project. We recommend using a logging framework like Serilog , Microsoft.Extensions.Logging , NLog or log4net .","title":"Logging from AWS Lambda Project"},{"location":"logging-to-elmah-io-from-azure-functions/","text":"Logging to elmah.io from Azure Functions Logging errors from Azure Functions , requires only a few lines of code. We've created a client specifically for Azure Functions. For Functions v1, make sure to install the Microsoft.Azure.WebJobs in minimum version 2.2.0 Install the newest Elmah.Io.Functions package in your Azure Functions project: Install-Package Elmah.Io.Functions Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter( API_KEY , LOG_ID )] public static class Function1 { [FunctionName( Function1 )] public static void Run([TimerTrigger( 0 */1 * * * * )]TimerInfo myTimer, TraceWriter log) { throw new Exception( Some exception ); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. If your function method is declared as async, remember to change the return type to Task . Without it, the function host never invoke ElmahIoExceptionFilter . The filter also supports config variables: [ElmahIoExceptionFilter( %apiKey% , %logId% )] The variables above, would require you to add your API key and log ID to your settings.json : { Values : { apiKey : API_KEY , logId : LOG_ID } }","title":"Logging from Azure Functions"},{"location":"logging-to-elmah-io-from-azure-functions/#logging-to-elmahio-from-azure-functions","text":"Logging errors from Azure Functions , requires only a few lines of code. We've created a client specifically for Azure Functions. For Functions v1, make sure to install the Microsoft.Azure.WebJobs in minimum version 2.2.0 Install the newest Elmah.Io.Functions package in your Azure Functions project: Install-Package Elmah.Io.Functions Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter( API_KEY , LOG_ID )] public static class Function1 { [FunctionName( Function1 )] public static void Run([TimerTrigger( 0 */1 * * * * )]TimerInfo myTimer, TraceWriter log) { throw new Exception( Some exception ); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. If your function method is declared as async, remember to change the return type to Task . Without it, the function host never invoke ElmahIoExceptionFilter . The filter also supports config variables: [ElmahIoExceptionFilter( %apiKey% , %logId% )] The variables above, would require you to add your API key and log ID to your settings.json : { Values : { apiKey : API_KEY , logId : LOG_ID } }","title":"Logging to elmah.io from Azure Functions"},{"location":"logging-to-elmah-io-from-azure-webjobs/","text":"Logging to elmah.io from Azure WebJobs Logging errors from Azure WebJobs , requires only a few lines of code. We've created a client specifically for Azure WebJobs. Install the Elmah.Io.Functions package: Install-Package Elmah.Io.Functions Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter( API_KEY , LOG_ID )] public class Functions { public static void ProcessQueueMessage([QueueTrigger( queue )] string msg, TextWriter log) { throw new Exception( Some exception ); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. If your WebJob method is declared as async, remember to change the return type to Task . Without it, ElmahIoExceptionFilter is never invoked. The filter also supports config variables: [ElmahIoExceptionFilter( %apiKey% , %logId% )] The variables above, would require you to add your API key and log ID to your App.config : configuration appSettings add key= apiKey value= API_KEY / add key= logId value= LOG_ID / /appSettings /configuration","title":"Logging from Azure WebJobs"},{"location":"logging-to-elmah-io-from-azure-webjobs/#logging-to-elmahio-from-azure-webjobs","text":"Logging errors from Azure WebJobs , requires only a few lines of code. We've created a client specifically for Azure WebJobs. Install the Elmah.Io.Functions package: Install-Package Elmah.Io.Functions Log all uncaught exceptions using the ElmahIoExceptionFilter attribute: [ElmahIoExceptionFilter( API_KEY , LOG_ID )] public class Functions { public static void ProcessQueueMessage([QueueTrigger( queue )] string msg, TextWriter log) { throw new Exception( Some exception ); } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your log ID. If your WebJob method is declared as async, remember to change the return type to Task . Without it, ElmahIoExceptionFilter is never invoked. The filter also supports config variables: [ElmahIoExceptionFilter( %apiKey% , %logId% )] The variables above, would require you to add your API key and log ID to your App.config : configuration appSettings add key= apiKey value= API_KEY / add key= logId value= LOG_ID / /appSettings /configuration","title":"Logging to elmah.io from Azure WebJobs"},{"location":"logging-to-elmah-io-from-blogengine-net/","text":"Logging to elmah.io from BlogEngine.NET Because BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact, ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io. Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the elmah element: errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / Where API_KEY is your API key and LOG_ID is your log ID. To wrap this up, you may have noticed that there\u2019s a NuGet package to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also, make sure to clean up the dual error log configuration: elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= APIKEY LogId= LOGID / security allowRemoteAccess= true / errorLog type= Elmah.SqlServerCompactErrorLog, Elmah connectionStringName= elmah-sqlservercompact / /elmah","title":"Logging from BlogEngine.NET"},{"location":"logging-to-elmah-io-from-blogengine-net/#logging-to-elmahio-from-blogenginenet","text":"Because BlogEngine.NET is written in ASP.NET, it doesn\u2019t really need any custom code to use ELMAH and elmah.io. In fact, ELMAH works out of the box for most web frameworks by Microsoft. If you are building and deploying the code yourself, installing elmah.io is achieved using our NuGet package: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). When installed, BlogEngine.NET starts reporting errors to elmah.io. To check it out, force an internal server error or similar, and visit /elmah.axd or the search area of your log at elmah.io. Some of you may use the BlogEngine.NET binaries or even installed it using a one-click installer. In this case you will need to add elmah.io manually. To do that, use a tool like NuGet Package Explorer to download the most recent versions of ELMAH and elmah.io. Copy Elmah.dll and Elmah.Io.dll to the bin directory of your BlogEngine.NET installation. Also modify your web.config to include the ELMAH config as shown in the config example. Last but not least, remember to add the elmah.io error logger configuration as a child node to the elmah element: errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / Where API_KEY is your API key and LOG_ID is your log ID. To wrap this up, you may have noticed that there\u2019s a NuGet package to bring ELMAH support into BlogEngine.NET. This package adds the ELMAH assembly and config as well as adds a nice BlogEngine.NET compliant URL for browsing errors. Feel free to use this package, but remember to add it after the elmah.io package. Also, make sure to clean up the dual error log configuration: elmah security allowRemoteAccess= false / errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= APIKEY LogId= LOGID / security allowRemoteAccess= true / errorLog type= Elmah.SqlServerCompactErrorLog, Elmah connectionStringName= elmah-sqlservercompact / /elmah","title":"Logging to elmah.io from BlogEngine.NET"},{"location":"logging-to-elmah-io-from-console-application/","text":"Logging to elmah.io from Console Even though elmah.io support various logging frameworks like Serilog , log4net and NLog , logging from a simple console application is dead simple. Since we currently provide two different versions of our API, the examples are split by version. To start logging, install the Elmah.Io.Client NuGet package (in either version 2.x or 3.x): Install-Package Elmah.Io.Client Version 3.x Create a new ElmahioAPI : var logger = ElmahioAPI.Create( API_KEY ); Replace API_KEY with your API key ( Where is my API key? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: var logId = new Guid( LOG_ID ); logger.Messages.Fatal(logId, new ApplicationException( A fatal exception ), Fatal message ); logger.Messages.Error(logId, new ApplicationException( An exception ), Error message ); logger.Messages.Warning(logId, A warning ); logger.Messages.Information(logId, An info message ); logger.Messages.Debug(logId, A debug message ); logger.Messages.Verbose(logId, A verbose message ); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ). Version 2.x Create a new Logger and assign it to a variable of type ILogger : Elmah.Io.Client.ILogger logger = new Elmah.Io.Client.Logger(new Guid( LOG_ID )); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: logger.Verbose( Verbose message ); logger.Debug( Debug message ); logger.Information( Information message ); logger.Warning( Warning message ); logger.Error( Error message ); logger.Fatal( Fatal message );","title":"Logging from Console"},{"location":"logging-to-elmah-io-from-console-application/#logging-to-elmahio-from-console","text":"Even though elmah.io support various logging frameworks like Serilog , log4net and NLog , logging from a simple console application is dead simple. Since we currently provide two different versions of our API, the examples are split by version. To start logging, install the Elmah.Io.Client NuGet package (in either version 2.x or 3.x): Install-Package Elmah.Io.Client","title":"Logging to elmah.io from Console"},{"location":"logging-to-elmah-io-from-console-application/#version-3x","text":"Create a new ElmahioAPI : var logger = ElmahioAPI.Create( API_KEY ); Replace API_KEY with your API key ( Where is my API key? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: var logId = new Guid( LOG_ID ); logger.Messages.Fatal(logId, new ApplicationException( A fatal exception ), Fatal message ); logger.Messages.Error(logId, new ApplicationException( An exception ), Error message ); logger.Messages.Warning(logId, A warning ); logger.Messages.Information(logId, An info message ); logger.Messages.Debug(logId, A debug message ); logger.Messages.Verbose(logId, A verbose message ); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ).","title":"Version 3.x"},{"location":"logging-to-elmah-io-from-console-application/#version-2x","text":"Create a new Logger and assign it to a variable of type ILogger : Elmah.Io.Client.ILogger logger = new Elmah.Io.Client.Logger(new Guid( LOG_ID )); Replace LOG_ID with your log ID from elmah.io ( Where is my log ID? ). The elmah.io client supports logging in different log levels much like other logging frameworks for .NET: logger.Verbose( Verbose message ); logger.Debug( Debug message ); logger.Information( Information message ); logger.Warning( Warning message ); logger.Error( Error message ); logger.Fatal( Fatal message );","title":"Version 2.x"},{"location":"logging-to-elmah-io-from-devexpress/","text":"Logging to elmah.io from DevExpress (eXpressApp Framework) eXpressApp Framework (XAF) is built on top of ASP.NET. Installing elmah.io corresponds any other ASP.NET site: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To verify the integration, throw a new exception in Default.aspx or similar: body class= VerticalTemplate % throw new Exception( Test exception ); % form id= form2 runat= server ... /form /body Launch the project and see the test exception flow into elmah.io.","title":"Logging from DevExpress (eXpressApp Framework)"},{"location":"logging-to-elmah-io-from-devexpress/#logging-to-elmahio-from-devexpress-expressapp-framework","text":"eXpressApp Framework (XAF) is built on top of ASP.NET. Installing elmah.io corresponds any other ASP.NET site: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To verify the integration, throw a new exception in Default.aspx or similar: body class= VerticalTemplate % throw new Exception( Test exception ); % form id= form2 runat= server ... /form /body Launch the project and see the test exception flow into elmah.io.","title":"Logging to elmah.io from DevExpress (eXpressApp Framework)"},{"location":"logging-to-elmah-io-from-elmah/","text":"Logging to elmah.io from ELMAH This article will explain the steps necessary to log errors from your web application into elmah.io. We also offer more specific guides on ASP.NET MVC , Web API , Nancy and a lot of other web- and logging-frameworks. Read through this tutorial and head over to a tutorial specific for your choice of framework afterwards. If you don\u2019t know ELMAH, check out our ELMAH Tutorial - what is ELMAH and visit the nice folks over at the ELMAH project page . Let\u2019s get started. Create a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like): Select a project template of your choice: Navigate to elmah.io and login using username/password or your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log: When created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Keep the page open in order to copy your API key and log ID at a later step: Navigate back to your web project, right click References and select Manage NuGet Packages : In the NuGet dialog, search for elmah.io: Click Install and input your API key and log ID in the dialog appearing during installation of the NuGet package: You\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log: See the notfound error? Congrats! Every error on your application is now logged to elmah.io.","title":"Logging from ELMAH"},{"location":"logging-to-elmah-io-from-elmah/#logging-to-elmahio-from-elmah","text":"This article will explain the steps necessary to log errors from your web application into elmah.io. We also offer more specific guides on ASP.NET MVC , Web API , Nancy and a lot of other web- and logging-frameworks. Read through this tutorial and head over to a tutorial specific for your choice of framework afterwards. If you don\u2019t know ELMAH, check out our ELMAH Tutorial - what is ELMAH and visit the nice folks over at the ELMAH project page . Let\u2019s get started. Create a new ASP.NET MVC project in Visual Studio (you can choose another web project type if you\u2019d like): Select a project template of your choice: Navigate to elmah.io and login using username/password or your favorite social provider. When logged in, elmah.io redirects you to the dashboard. Click on Create new log and name your log: When created, elmah.io shows you the install instructions. Don\u2019t pay too much attention to the install steps, because the rest of this tutorial will guide you through the installation. Keep the page open in order to copy your API key and log ID at a later step: Navigate back to your web project, right click References and select Manage NuGet Packages : In the NuGet dialog, search for elmah.io: Click Install and input your API key and log ID in the dialog appearing during installation of the NuGet package: You\u2019re ready to rock and roll. Hit F5 and input a URL you know doesn\u2019t exist (like http://localhost:64987/notfound). You should see the standard 404 message displayed in the browser. To verify that the installation of elmah.io is successful, navigate back to the elmah.io dashboard and select the Search tab of your newly created log: See the notfound error? Congrats! Every error on your application is now logged to elmah.io.","title":"Logging to elmah.io from ELMAH"},{"location":"logging-to-elmah-io-from-entity-framework-core/","text":"Logging to elmah.io from Entity Framework Core Both elmah.io and Entity Framework Core supports logging through Microsoft.Extensions.Logging. To log all errors happening inside Entity Framework Core, install the Elmah.Io.Extensions.Logging NuGet package: Install-Package Elmah.Io.Extensions.Logging Then add elmah.io to a new or existing LoggerFactory : var loggerFactory = new LoggerFactory() .AddElmahIo( API_KEY , new Guid( LOG_ID )); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the log ID ( Where is my log ID? ) that should receive errors from Entity Framework. When using Entity Framework Core from ASP.NET Core, you never create your own LoggerFactory . Factories are provided through DI by ASP.NET Core. Check out this sample for details. Finally, enable logging in Entity Framework Core: optionsBuilder .UseLoggerFactory(loggerFactory) .UseSqlServer(...); ( UseSqlServer included for illustration purposes only - elmah.io works with any provider) That's it! All errors happening in Entity Framework Core, are now logged in elmah.io.","title":"Logging from Entity Framework Core"},{"location":"logging-to-elmah-io-from-entity-framework-core/#logging-to-elmahio-from-entity-framework-core","text":"Both elmah.io and Entity Framework Core supports logging through Microsoft.Extensions.Logging. To log all errors happening inside Entity Framework Core, install the Elmah.Io.Extensions.Logging NuGet package: Install-Package Elmah.Io.Extensions.Logging Then add elmah.io to a new or existing LoggerFactory : var loggerFactory = new LoggerFactory() .AddElmahIo( API_KEY , new Guid( LOG_ID )); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the log ID ( Where is my log ID? ) that should receive errors from Entity Framework. When using Entity Framework Core from ASP.NET Core, you never create your own LoggerFactory . Factories are provided through DI by ASP.NET Core. Check out this sample for details. Finally, enable logging in Entity Framework Core: optionsBuilder .UseLoggerFactory(loggerFactory) .UseSqlServer(...); ( UseSqlServer included for illustration purposes only - elmah.io works with any provider) That's it! All errors happening in Entity Framework Core, are now logged in elmah.io.","title":"Logging to elmah.io from Entity Framework Core"},{"location":"logging-to-elmah-io-from-express/","text":"Logging to elmah.io from Express That's right. elmah.io doesn't only work with .NET. To integrate elmah.io into a Node Express web application, install the elmah.io npm package npm install elmah.io Add the following to your Express application: var elmah = require( elmah.io ); var express = require( express ); var app = express(); app.use(elmah.auto({logId: LOG_ID , application: My App Name , version: 42.0.0 })); Replace LOG_ID with your log ID ( Where is my log ID? ). Every error is logged to elmah.io.","title":"Logging from Express"},{"location":"logging-to-elmah-io-from-express/#logging-to-elmahio-from-express","text":"That's right. elmah.io doesn't only work with .NET. To integrate elmah.io into a Node Express web application, install the elmah.io npm package npm install elmah.io Add the following to your Express application: var elmah = require( elmah.io ); var express = require( express ); var app = express(); app.use(elmah.auto({logId: LOG_ID , application: My App Name , version: 42.0.0 })); Replace LOG_ID with your log ID ( Where is my log ID? ). Every error is logged to elmah.io.","title":"Logging to elmah.io from Express"},{"location":"logging-to-elmah-io-from-javascript/","text":"Logging to elmah.io from JavaScript We are currently building elmah.io.js. The description below is an example of how installation and usage may turn out. Nothing of the below works yet! :) Logging to elmah.io from JavaScript Installation Configuration in code Logging manually Events Filtering log messages Enriching log messages Handling errors Message reference elmah.io doesn't only support server-side .NET logging. We also log JavaScript errors happening on your website. Logging client-side errors, requires nothing more than installing the elmahio.js script on your website. Installation Pick an installation method of your choice: Manually CDN npm NuGet Library Manager Bower Download the latest release as a zip: https://github.com/elmahio/elmah.io.js/releases Unpack and copy elmahio.min.js to the Scripts folder or whatever folder you use to store JavaScript files. Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/Scripts/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= https://cdn.rawgit.com/elmahio/elmah.io.js/1.0.2/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Install the elmah.io.js npm package: npm install elmah.io.js Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/node_modules/elmah.io.js/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Since Bower is no longer maintained , installing elmah.io.js through Bower, is supported using bower-npm-resolver . Install the resolver: npm install bower-npm-resolver --save Add the resolver in your .bowerrc file: { resolvers : [ bower-npm-resolver ] } Install the elmah.io.js npm package: bower install npm:elmah.io.js --save Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/bower_components/elmah.io.js/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Add the elmah.io.js library in your libman.json file: { ... libraries : [ ... { provider : filesystem , library : https://raw.githubusercontent.com/elmahio/elmah.io.js/1.0.2/dist/elmahio.min.js , destination : wwwroot/lib/elmahio } ] } or using the LibMan CLI: libman install https://github.com/elmahio/elmah.io.js/blob/1.0.2/elmahio.min.js --provider filesystem --destination wwwroot\\lib\\elmahio Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/lib/elmahio/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Install the elmah.io.js NuGet package: Install-Package elmah.io.js Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/Scripts/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script That's it. All uncaught errors on your website, are now logged to elmah.io. Configuration in code If you prefer configuring in code (or need to access the options for something else), API key and log ID can be configured by referencing the elmahio.min.js script with parameters: script src= ~/scripts/elmahio.min.js type= text/javascript /script Then initialize the logger in JavaScript: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID' }); The application property on elmah.io, can be set on all log messages by setting the application option: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID', application: 'My application name' }); For debug purposes, debug output from the logger to the console can be enabled using the debug option: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID', debug: true }); Logging manually You may want to log errors manually or even log information messages from JavaScript. To do so, Elmahio is actually a logging framework too: var logger = new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID' }); logger.verbose('This is verbose'); logger.verbose('This is verbose', new Error('A JavaScript error object')); logger.debug('This is debug'); logger.debug('This is debug', new Error('A JavaScript error object')); logger.information('This is information'); logger.information('This is information', new Error('A JavaScript error object')); logger.warning('This is warning'); logger.warning('This is warning', new Error('A JavaScript error object')); logger.error('This is error'); logger.error('This is error', new Error('A JavaScript error object')); logger.fatal('This is fatal'); logger.fatal('This is fatal', new Error('A JavaScript error object')); logger.log({ title: 'This is a custom log message'), type: 'Of some type', severity: 'Error' }); The Error object used, should be a JavaScript Error object . As for the log -function, check out message reference . Manual logging only works when initializing the elmah.io logger from code. Events Filtering log messages Log messages can be filtered, by adding an OnFilter callback on the options: new Elmahio({ ... onFilter: function(msg) { return msg.severity === 'Verbose'; } }) In the example, all log messages with a severity of Verbose , are not logged to elmah.io. Enriching log messages Log messages can be enriched by adding an onMessage callback on the options: new Elmahio({ ... onMessage: function(msg) { msg.data.push({key: 'MyCustomKey', value: 'MyCustomValue'}); } }); In the example, all log messages are enriched with a data variable with they key MyCustomKey and value MyCustomValue . Handling errors To react on errors happening in elmah.io.js, add a callback to onError : new Elmahio({ ... onError: function(status, text) { console.log('An error happened in elmah.io.js', status, text); } }); In the example, all errors are written to the console. Message reference This is an example of the elmah.io.js msg object that is used in various callbacks, etc.: { title: 'The title of the message', detail: 'The error stack', source: 'The source of the error (typically a filename)', severity: 'Error', type: 'The type of the error', url: 'http://url.of/current/page', application: 'Application name set through options', queryString: [ {key: 'id', value: '42'} ], data: [ {key: 'User-Language', value: 'en-US'}, {key: 'Color-Depth', value: '24'} ], serverVariables: [ {key: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'} ] }","title":"Logging from JavaScript"},{"location":"logging-to-elmah-io-from-javascript/#logging-to-elmahio-from-javascript","text":"We are currently building elmah.io.js. The description below is an example of how installation and usage may turn out. Nothing of the below works yet! :) Logging to elmah.io from JavaScript Installation Configuration in code Logging manually Events Filtering log messages Enriching log messages Handling errors Message reference elmah.io doesn't only support server-side .NET logging. We also log JavaScript errors happening on your website. Logging client-side errors, requires nothing more than installing the elmahio.js script on your website.","title":"Logging to elmah.io from JavaScript"},{"location":"logging-to-elmah-io-from-javascript/#installation","text":"Pick an installation method of your choice: Manually CDN npm NuGet Library Manager Bower Download the latest release as a zip: https://github.com/elmahio/elmah.io.js/releases Unpack and copy elmahio.min.js to the Scripts folder or whatever folder you use to store JavaScript files. Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/Scripts/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= https://cdn.rawgit.com/elmahio/elmah.io.js/1.0.2/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Install the elmah.io.js npm package: npm install elmah.io.js Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/node_modules/elmah.io.js/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Since Bower is no longer maintained , installing elmah.io.js through Bower, is supported using bower-npm-resolver . Install the resolver: npm install bower-npm-resolver --save Add the resolver in your .bowerrc file: { resolvers : [ bower-npm-resolver ] } Install the elmah.io.js npm package: bower install npm:elmah.io.js --save Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/bower_components/elmah.io.js/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Add the elmah.io.js library in your libman.json file: { ... libraries : [ ... { provider : filesystem , library : https://raw.githubusercontent.com/elmahio/elmah.io.js/1.0.2/dist/elmahio.min.js , destination : wwwroot/lib/elmahio } ] } or using the LibMan CLI: libman install https://github.com/elmahio/elmah.io.js/blob/1.0.2/elmahio.min.js --provider filesystem --destination wwwroot\\lib\\elmahio Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/lib/elmahio/dist/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script Install the elmah.io.js NuGet package: Install-Package elmah.io.js Reference elmahio.min.js just before the /body tag (but before all other JavaScripts) in your shared _Layout.cshtml or all HTML files, depending on how you've structured your site: script src= ~/Scripts/elmahio.min.js?apiKey=YOUR-API-KEY logId=YOUR-LOG-ID type= text/javascript /script That's it. All uncaught errors on your website, are now logged to elmah.io.","title":"Installation"},{"location":"logging-to-elmah-io-from-javascript/#configuration-in-code","text":"If you prefer configuring in code (or need to access the options for something else), API key and log ID can be configured by referencing the elmahio.min.js script with parameters: script src= ~/scripts/elmahio.min.js type= text/javascript /script Then initialize the logger in JavaScript: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID' }); The application property on elmah.io, can be set on all log messages by setting the application option: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID', application: 'My application name' }); For debug purposes, debug output from the logger to the console can be enabled using the debug option: new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID', debug: true });","title":"Configuration in code"},{"location":"logging-to-elmah-io-from-javascript/#logging-manually","text":"You may want to log errors manually or even log information messages from JavaScript. To do so, Elmahio is actually a logging framework too: var logger = new Elmahio({ apiKey: 'YOUR-API-KEY', logId: 'YOUR-LOG-ID' }); logger.verbose('This is verbose'); logger.verbose('This is verbose', new Error('A JavaScript error object')); logger.debug('This is debug'); logger.debug('This is debug', new Error('A JavaScript error object')); logger.information('This is information'); logger.information('This is information', new Error('A JavaScript error object')); logger.warning('This is warning'); logger.warning('This is warning', new Error('A JavaScript error object')); logger.error('This is error'); logger.error('This is error', new Error('A JavaScript error object')); logger.fatal('This is fatal'); logger.fatal('This is fatal', new Error('A JavaScript error object')); logger.log({ title: 'This is a custom log message'), type: 'Of some type', severity: 'Error' }); The Error object used, should be a JavaScript Error object . As for the log -function, check out message reference . Manual logging only works when initializing the elmah.io logger from code.","title":"Logging manually"},{"location":"logging-to-elmah-io-from-javascript/#events","text":"","title":"Events"},{"location":"logging-to-elmah-io-from-javascript/#filtering-log-messages","text":"Log messages can be filtered, by adding an OnFilter callback on the options: new Elmahio({ ... onFilter: function(msg) { return msg.severity === 'Verbose'; } }) In the example, all log messages with a severity of Verbose , are not logged to elmah.io.","title":"Filtering log messages"},{"location":"logging-to-elmah-io-from-javascript/#enriching-log-messages","text":"Log messages can be enriched by adding an onMessage callback on the options: new Elmahio({ ... onMessage: function(msg) { msg.data.push({key: 'MyCustomKey', value: 'MyCustomValue'}); } }); In the example, all log messages are enriched with a data variable with they key MyCustomKey and value MyCustomValue .","title":"Enriching log messages"},{"location":"logging-to-elmah-io-from-javascript/#handling-errors","text":"To react on errors happening in elmah.io.js, add a callback to onError : new Elmahio({ ... onError: function(status, text) { console.log('An error happened in elmah.io.js', status, text); } }); In the example, all errors are written to the console.","title":"Handling errors"},{"location":"logging-to-elmah-io-from-javascript/#message-reference","text":"This is an example of the elmah.io.js msg object that is used in various callbacks, etc.: { title: 'The title of the message', detail: 'The error stack', source: 'The source of the error (typically a filename)', severity: 'Error', type: 'The type of the error', url: 'http://url.of/current/page', application: 'Application name set through options', queryString: [ {key: 'id', value: '42'} ], data: [ {key: 'User-Language', value: 'en-US'}, {key: 'Color-Depth', value: '24'} ], serverVariables: [ {key: 'User-Agent', value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'} ] }","title":"Message reference"},{"location":"logging-to-elmah-io-from-jsnlog/","text":"Logging to elmah.io from JSNLog Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation. Start by installing the JSNLog.Elmah package: Install-Package JSNLog.Elmah This installs and setup JSNLog into your project, using ELMAH as an appender. Then, install Elmah.Io : Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add the JSNLog code before any script imports in your _Layout.cshtml file: @Html.Raw(JSNLog.JavascriptLogging.Configure()) You are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar: JL().fatal( log message ); Navigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be built into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file: script window.onerror = function (errorMsg, url, lineNumber, column, errorObj) { // Send object with all data to server side log, using severity fatal, // from logger onerrorLogger JL( onerrorLogger ).fatalException({ msg : Exception! , errorMsg : errorMsg, url : url, line number : lineNumber, column : column }, errorObj); // Tell browser to run its own error handler as well return false; } /script","title":"Logging from JSNLog"},{"location":"logging-to-elmah-io-from-jsnlog/#logging-to-elmahio-from-jsnlog","text":"Using JSNLog you will be able to log JavaScript errors to elmah.io. In this sample, we will focus about logging JavaScript errors from a ASP.NET MVC web application, but you can use JSNLog to log anything to elmah.io, so please check out their documentation. Start by installing the JSNLog.Elmah package: Install-Package JSNLog.Elmah This installs and setup JSNLog into your project, using ELMAH as an appender. Then, install Elmah.Io : Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add the JSNLog code before any script imports in your _Layout.cshtml file: @Html.Raw(JSNLog.JavascriptLogging.Configure()) You are ready to log errors from JavaScript til elmah.io. To test that everything is installed correctly, launch your web application and execute the following JavaScript using Chrome Developer Tools or similar: JL().fatal( log message ); Navigate to you log at elmah.io and observe the new error. As you can see, logging JavaScript errors is now extremely simple and can be built into any try-catch, jQuery fail handlers and pretty much anywhere else. To log every JavaScript error, add the following to the bottom of the _Layout.cshtml file: script window.onerror = function (errorMsg, url, lineNumber, column, errorObj) { // Send object with all data to server side log, using severity fatal, // from logger onerrorLogger JL( onerrorLogger ).fatalException({ msg : Exception! , errorMsg : errorMsg, url : url, line number : lineNumber, column : column }, errorObj); // Tell browser to run its own error handler as well return false; } /script","title":"Logging to elmah.io from JSNLog"},{"location":"logging-to-elmah-io-from-log4net/","text":"Logging to elmah.io from Log4net In this tutorial we\u2019ll add logging to elmah.io from an ASP.NET MVC project through log4net. The process is identical with other project types. Create a new MVC project and install the elmah.io appender: Install-Package elmah.io.log4net Add the following to your AssemblyInfo.cs file: [assembly: log4net.Config.XmlConfigurator(Watch = true)] Add the following config section to your web.config file: section name= log4net type= log4net.Config.Log4NetConfigurationSectionHandler, log4net / Finally, add the log4net configuration element to web.config: log4net appender name= ElmahIoAppender type= elmah.io.log4net.ElmahIoAppender, elmah.io.log4net logId value= LOG_ID / apiKey value= API_KEY / /appender root level value= Info / appender-ref ref= ElmahIoAppender / /root /log4net That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace API_KEY ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your actual log Id. To start logging, write your usual log4net log statements: var log = log4net.LogManager.GetLogger(typeof(HomeController)); try { log.Info( Trying something ); throw new ApplicationException(); } catch (ApplicationException ex) { log.Error( Error happening , ex); } Context Properties log4net offers a feature called context properties. With context properties, you can log additional key/value pairs with every log message. The elmah.io appender for log4net, supports context properties as well. Context properties are handled like custom properties in the elmah.io UI. Let's utilize two different hooks in log4net, to add context properties to elmah.io: log4net.GlobalContext.Properties[ ApplicationIdentifier ] = MyCoolApp ; log4net.ThreadContext.Properties[ ThreadId ] = Thread.CurrentThread.ManagedThreadId; log.Info( This is a message with custom properties ); Basically, we set two custom properties on contextual classes provided by log4net. To read more about the choices in log4net, check out the log4net manual . When looking up the log message in elmah.io, we see the context properties in the Data tab. Besides the two custom variables that we set through GlobalContext and ThreadContext , we see a couple of build-in properties in log4net, both prefixed with log4net: . Override Properties In case you want to set one or more core properties on each elmah.io message logged, you will need to add a bit of log4net magic. Examples could be, setting the User property on all log messages or setting a version number in the Version property. In the following code, we set the currently logged in username on all log messages: Hierarchy hier = log4netassembly.LogManager.GetRepository() as Hierarchy; var elmahIoAppender = (ElmahIoAppender)(hier?.GetAppenders()) .FirstOrDefault(appender = appender.Name .Equals( ElmahIoAppender , StringComparison.InvariantCultureIgnoreCase)); elmahIoAppender.ActivateOptions(); elmahIoAppender.Client.Messages.OnMessage += (sender, a) = { a.Message.User = Thread.CurrentPrincipal?.Identity?.Name; }; This rather ugly piece of code would go into an initalization block, depending on the project type. The code starts by getting the configured elmah.io appender (typically set up in web.config or log4net.config ). With the appender, you can access the underlying elmah.io client and subscribe to the OnMessage event. This let you trigger a small piece of code, just before sending log messages to elmah.io. In this case, we set the User property to the currently logged in user. Remember to call the ActiveOptions method, to make sure that the Client property is initialized.","title":"Logging from log4net"},{"location":"logging-to-elmah-io-from-log4net/#logging-to-elmahio-from-log4net","text":"In this tutorial we\u2019ll add logging to elmah.io from an ASP.NET MVC project through log4net. The process is identical with other project types. Create a new MVC project and install the elmah.io appender: Install-Package elmah.io.log4net Add the following to your AssemblyInfo.cs file: [assembly: log4net.Config.XmlConfigurator(Watch = true)] Add the following config section to your web.config file: section name= log4net type= log4net.Config.Log4NetConfigurationSectionHandler, log4net / Finally, add the log4net configuration element to web.config: log4net appender name= ElmahIoAppender type= elmah.io.log4net.ElmahIoAppender, elmah.io.log4net logId value= LOG_ID / apiKey value= API_KEY / /appender root level value= Info / appender-ref ref= ElmahIoAppender / /root /log4net That\u2019s it! log4net is now configured and log messages to elmah.io. Remember to replace API_KEY ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with your actual log Id. To start logging, write your usual log4net log statements: var log = log4net.LogManager.GetLogger(typeof(HomeController)); try { log.Info( Trying something ); throw new ApplicationException(); } catch (ApplicationException ex) { log.Error( Error happening , ex); }","title":"Logging to elmah.io from Log4net"},{"location":"logging-to-elmah-io-from-log4net/#context-properties","text":"log4net offers a feature called context properties. With context properties, you can log additional key/value pairs with every log message. The elmah.io appender for log4net, supports context properties as well. Context properties are handled like custom properties in the elmah.io UI. Let's utilize two different hooks in log4net, to add context properties to elmah.io: log4net.GlobalContext.Properties[ ApplicationIdentifier ] = MyCoolApp ; log4net.ThreadContext.Properties[ ThreadId ] = Thread.CurrentThread.ManagedThreadId; log.Info( This is a message with custom properties ); Basically, we set two custom properties on contextual classes provided by log4net. To read more about the choices in log4net, check out the log4net manual . When looking up the log message in elmah.io, we see the context properties in the Data tab. Besides the two custom variables that we set through GlobalContext and ThreadContext , we see a couple of build-in properties in log4net, both prefixed with log4net: .","title":"Context Properties"},{"location":"logging-to-elmah-io-from-log4net/#override-properties","text":"In case you want to set one or more core properties on each elmah.io message logged, you will need to add a bit of log4net magic. Examples could be, setting the User property on all log messages or setting a version number in the Version property. In the following code, we set the currently logged in username on all log messages: Hierarchy hier = log4netassembly.LogManager.GetRepository() as Hierarchy; var elmahIoAppender = (ElmahIoAppender)(hier?.GetAppenders()) .FirstOrDefault(appender = appender.Name .Equals( ElmahIoAppender , StringComparison.InvariantCultureIgnoreCase)); elmahIoAppender.ActivateOptions(); elmahIoAppender.Client.Messages.OnMessage += (sender, a) = { a.Message.User = Thread.CurrentPrincipal?.Identity?.Name; }; This rather ugly piece of code would go into an initalization block, depending on the project type. The code starts by getting the configured elmah.io appender (typically set up in web.config or log4net.config ). With the appender, you can access the underlying elmah.io client and subscribe to the OnMessage event. This let you trigger a small piece of code, just before sending log messages to elmah.io. In this case, we set the User property to the currently logged in user. Remember to call the ActiveOptions method, to make sure that the Client property is initialized.","title":"Override Properties"},{"location":"logging-to-elmah-io-from-logary/","text":"Logging to elmah.io from Logary Logary is a semantic logging framework like Serilog and Microsoft Semantic Logging. Combining semantic logs with elmah.io are a perfect fit, since elmah.io has been designed with semantics from the ground up. In this tutorial, we\u2019ll add Logary to a Console application, but the process is almost identical with other project types. Create a new console application and add the elmah.io target for Logary: Install-Package Logary.Targets.Elmah.Io Configuration in F Configure elmah.io just like you would any normal target: withTargets [ // ... ElmahIO.create { ElmahIO with logId = LOG_ID } elmah.io ] withRules [ // ... Rule.createForTarget elmah.io ] where LOG_ID is the id of your log ( Where is my log ID? ). Configuration in C Configuration in C# is just as easy: .Target ElmahIO.Builder ( elmah.io , conf = conf.Target.SendTo(apiKey: LOG_ID )) where LOG_ID is the id of your log. Logging To start logging messages to elmah.io, you can use the following F# code: let logger = logary.getLogger (PointName [| Logary ; Samples ; main |]) Message.event Info User logged in | Message.setField userName haf | Logger.logSimple logger or in C#: var logger = logary.GetLogger( Logary.CSharpExample ); logger.LogEventFormat(LogLevel.Fatal, Unhandled {exception}! , e);","title":"Logging from Logary"},{"location":"logging-to-elmah-io-from-logary/#logging-to-elmahio-from-logary","text":"Logary is a semantic logging framework like Serilog and Microsoft Semantic Logging. Combining semantic logs with elmah.io are a perfect fit, since elmah.io has been designed with semantics from the ground up. In this tutorial, we\u2019ll add Logary to a Console application, but the process is almost identical with other project types. Create a new console application and add the elmah.io target for Logary: Install-Package Logary.Targets.Elmah.Io","title":"Logging to elmah.io from Logary"},{"location":"logging-to-elmah-io-from-logary/#configuration-in-f","text":"Configure elmah.io just like you would any normal target: withTargets [ // ... ElmahIO.create { ElmahIO with logId = LOG_ID } elmah.io ] withRules [ // ... Rule.createForTarget elmah.io ] where LOG_ID is the id of your log ( Where is my log ID? ).","title":"Configuration in F&#35;"},{"location":"logging-to-elmah-io-from-logary/#configuration-in-c","text":"Configuration in C# is just as easy: .Target ElmahIO.Builder ( elmah.io , conf = conf.Target.SendTo(apiKey: LOG_ID )) where LOG_ID is the id of your log.","title":"Configuration in C&#35;"},{"location":"logging-to-elmah-io-from-logary/#logging","text":"To start logging messages to elmah.io, you can use the following F# code: let logger = logary.getLogger (PointName [| Logary ; Samples ; main |]) Message.event Info User logged in | Message.setField userName haf | Logger.logSimple logger or in C#: var logger = logary.GetLogger( Logary.CSharpExample ); logger.LogEventFormat(LogLevel.Fatal, Unhandled {exception}! , e);","title":"Logging"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/","text":"Logging to elmah.io from Microsoft.Extensions.Logging Microsoft.Extensions.Logging is a common logging abstraction from Microsoft, much like log4net and Serilog. Microsoft.Extensions.Logging started as a new logging mechanism for ASP.NET Core, but now acts as a logging framework for all sorts of project types. Start by installing the Elmah.Io.Extensions.Logging package: Install-Package Elmah.Io.Extensions.Logging Locate your API key ( Where is my API key? ) and log ID. The two values will be referenced as API_KEY and LOG_ID ( Where is my log ID? ) in the following. Logging from ASP.NET Core ASP.NET Core 2.x ASP.NET Core 1.x In the Program.cs file, call the ConfigureLogging -method and configure elmah.io like shown here: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); }); logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Warning); }) .Build(); By calling, the AddFilter -method, you ensure that only warnings and up are logged to elmah.io. API key and log ID can also be configured in appsettings.json : { ... ElmahIo : { ApiKey : API_KEY , LogId : LOG_ID } } Then configure the section and use the AddElmahIo overload (without any parameters): WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.Services.Configure ElmahIoProviderOptions (ctx.Configuration.GetSection( ElmahIo )); logging.AddElmahIo(); }) .Build(); Call AddElmahIo in the Configure -method in Startup.cs : public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { ... fac.AddElmahIo( API_KEY , new Guid( LOG_ID )); ... } Start logging messages by injecting an ILogger in your controllers: public class HomeController : Controller { private readonly ILogger _logger; public HomeController(ILogger logger) { _logger = logger; } public IActionResult Index() { _logger.LogWarning( Request to index ); return View(); } } Filtering log messages As default, the elmah.io logger for Microsoft.Extensions.Logging only logs warnings, errors and fatals. The rationale behind this is that we build an error management system and really doesn't do much to support millions of debug messages from your code. Sometimes you may want to log non-exception messages, though. To do so, use filters in Microsoft.Extensions.Logging. To log everything from log level Information and up, do the following: ASP.NET Core 2.x ASP.NET Core 1.x Inside the ConfigureLogging -method in Startup.cs , change the minimum level: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { ... logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Information); }) .Build(); Use the AddElmahIo overload which accepts a filter: factory.AddElmahIo( API_KEY , new Guid( LOG_ID ), new FilterLoggerSettings { { * , LogLevel.Information} }); In the code sample, every log message with log level of Information and up, will be logged to elmah.io. To log a new information message, create a logger with the elmah.io category and call the LogInformation method: var logger = factory.CreateLogger( elmah.io ); logger.LogInformation( This is an information message ); Decorating log messages Since Microsoft.Extensions.Logging isn't specific for web applications, messages logged through Elmah.Io.Extensions.Logging , doesn't include any properties from the HTTP context (like Elmah.Io.AspNetCore . To add additional properties, use the OnMessage action. As an example, we'll add the name of the current user to all log messages: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory factory) { factory.AddElmahIo( API_KEY , new Guid( LOG_ID ), new ElmahIoProviderOptions { OnMessage = msg = { var context = app.ApplicationServices.GetRequiredService IHttpContextAccessor ().HttpContext; if (context == null) return; msg.User = context.User?.Identity?.Name; } }); .... } For ASP.NET Core 2.x projects, you will need to use the old way of configuring logging (using ILoggerFactory ), in order to resolve the IHttpContextAccessor object from DI. appsettings.json configuration Some of the configuration for Elmah.Io.Extensions.Logging, can be done through the appsettings.json file when using ASP.NET Core 2.x. To configure the minimum log level, add a new logger named ElmahIo to the settings file: { Logging : { ... ElmahIo : { LogLevel : { Default : Warning } } } } Finally, tell the logger to look for this information, by adding a bit of code to the ConfigureLogging -method: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddConfiguration(ctx.Configuration.GetSection( Logging )); ... }) .Build(); Logging from a console application Create a new LoggerFactory : var factory = new LoggerFactory(); Configure Microsoft.Extensions.Logging to use elmah.io: factory.AddElmahIo( API_KEY , new Guid( LOG_ID )); Finally, create a new logger and start logging exceptions: var logger = factory.CreateLogger( MyLog ); logger.LogError(1, ex, Unexpected error );","title":"Logging from Microsoft.Extensions.Logging"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-to-elmahio-from-microsoftextensionslogging","text":"Microsoft.Extensions.Logging is a common logging abstraction from Microsoft, much like log4net and Serilog. Microsoft.Extensions.Logging started as a new logging mechanism for ASP.NET Core, but now acts as a logging framework for all sorts of project types. Start by installing the Elmah.Io.Extensions.Logging package: Install-Package Elmah.Io.Extensions.Logging Locate your API key ( Where is my API key? ) and log ID. The two values will be referenced as API_KEY and LOG_ID ( Where is my log ID? ) in the following.","title":"Logging to elmah.io from Microsoft.Extensions.Logging"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-from-aspnet-core","text":"ASP.NET Core 2.x ASP.NET Core 1.x In the Program.cs file, call the ConfigureLogging -method and configure elmah.io like shown here: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); }); logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Warning); }) .Build(); By calling, the AddFilter -method, you ensure that only warnings and up are logged to elmah.io. API key and log ID can also be configured in appsettings.json : { ... ElmahIo : { ApiKey : API_KEY , LogId : LOG_ID } } Then configure the section and use the AddElmahIo overload (without any parameters): WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.Services.Configure ElmahIoProviderOptions (ctx.Configuration.GetSection( ElmahIo )); logging.AddElmahIo(); }) .Build(); Call AddElmahIo in the Configure -method in Startup.cs : public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory fac) { ... fac.AddElmahIo( API_KEY , new Guid( LOG_ID )); ... } Start logging messages by injecting an ILogger in your controllers: public class HomeController : Controller { private readonly ILogger _logger; public HomeController(ILogger logger) { _logger = logger; } public IActionResult Index() { _logger.LogWarning( Request to index ); return View(); } }","title":"Logging from ASP.NET Core"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#filtering-log-messages","text":"As default, the elmah.io logger for Microsoft.Extensions.Logging only logs warnings, errors and fatals. The rationale behind this is that we build an error management system and really doesn't do much to support millions of debug messages from your code. Sometimes you may want to log non-exception messages, though. To do so, use filters in Microsoft.Extensions.Logging. To log everything from log level Information and up, do the following: ASP.NET Core 2.x ASP.NET Core 1.x Inside the ConfigureLogging -method in Startup.cs , change the minimum level: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { ... logging.AddFilter ElmahIoLoggerProvider (null, LogLevel.Information); }) .Build(); Use the AddElmahIo overload which accepts a filter: factory.AddElmahIo( API_KEY , new Guid( LOG_ID ), new FilterLoggerSettings { { * , LogLevel.Information} }); In the code sample, every log message with log level of Information and up, will be logged to elmah.io. To log a new information message, create a logger with the elmah.io category and call the LogInformation method: var logger = factory.CreateLogger( elmah.io ); logger.LogInformation( This is an information message );","title":"Filtering log messages"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#decorating-log-messages","text":"Since Microsoft.Extensions.Logging isn't specific for web applications, messages logged through Elmah.Io.Extensions.Logging , doesn't include any properties from the HTTP context (like Elmah.Io.AspNetCore . To add additional properties, use the OnMessage action. As an example, we'll add the name of the current user to all log messages: public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory factory) { factory.AddElmahIo( API_KEY , new Guid( LOG_ID ), new ElmahIoProviderOptions { OnMessage = msg = { var context = app.ApplicationServices.GetRequiredService IHttpContextAccessor ().HttpContext; if (context == null) return; msg.User = context.User?.Identity?.Name; } }); .... } For ASP.NET Core 2.x projects, you will need to use the old way of configuring logging (using ILoggerFactory ), in order to resolve the IHttpContextAccessor object from DI.","title":"Decorating log messages"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#appsettingsjson-configuration","text":"Some of the configuration for Elmah.Io.Extensions.Logging, can be done through the appsettings.json file when using ASP.NET Core 2.x. To configure the minimum log level, add a new logger named ElmahIo to the settings file: { Logging : { ... ElmahIo : { LogLevel : { Default : Warning } } } } Finally, tell the logger to look for this information, by adding a bit of code to the ConfigureLogging -method: WebHost.CreateDefaultBuilder(args) .UseStartup Startup () .ConfigureLogging((ctx, logging) = { logging.AddConfiguration(ctx.Configuration.GetSection( Logging )); ... }) .Build();","title":"appsettings.json configuration"},{"location":"logging-to-elmah-io-from-microsoft-extensions-logging/#logging-from-a-console-application","text":"Create a new LoggerFactory : var factory = new LoggerFactory(); Configure Microsoft.Extensions.Logging to use elmah.io: factory.AddElmahIo( API_KEY , new Guid( LOG_ID )); Finally, create a new logger and start logging exceptions: var logger = factory.CreateLogger( MyLog ); logger.LogError(1, ex, Unexpected error );","title":"Logging from a console application"},{"location":"logging-to-elmah-io-from-nancy/","text":"Logging to elmah.io from Nancy As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet: Install-Package Nancy.Elmah It\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages like to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually. In order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper: using Nancy; using Nancy.Bootstrapper; using Nancy.Elmah; using Nancy.TinyIoc; namespace Elmah.Io.NancyExample { public class Bootstrapper : DefaultNancyBootstrapper { protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines) { base.ApplicationStartup(container, pipelines); Elmahlogging.Enable(pipelines, elmah ); } } } The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.","title":"Logging from Nancy"},{"location":"logging-to-elmah-io-from-nancy/#logging-to-elmahio-from-nancy","text":"As with MVC and WebAPI, Nancy already provides ELMAH support out of the box. Start by installing the elmah.io NuGet package: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). To integrate Nancy and ELMAH, Christian Westman already did a great job with his Nancy.Elmah project. Install it using NuGet: Install-Package Nancy.Elmah It\u2019s important that you install the elmah.io package before Nancy.Elmah, because both packages like to add the ELMAH configuration to the web.config file. If you install it the other way around, you will need to add the elmah.io ErrorLog element manually. In order for Nancy to know how to log errors to Elmah, you need to add an override of the DefaultNancyBootstrapper. Create a new class in the root named Bootstrapper: using Nancy; using Nancy.Bootstrapper; using Nancy.Elmah; using Nancy.TinyIoc; namespace Elmah.Io.NancyExample { public class Bootstrapper : DefaultNancyBootstrapper { protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines) { base.ApplicationStartup(container, pipelines); Elmahlogging.Enable(pipelines, elmah ); } } } The important thing in the code sample is line 13, where we tell Nancy.Elmah to hook into the pipeline of Nancy in order for it to catch and log HTTP errors. The second parameter for the Enable-method, lets us define a URL for the ELMAH error page, which can be used as an alternative to elmah.io for quick viewing of errors.","title":"Logging to elmah.io from Nancy"},{"location":"logging-to-elmah-io-from-nlog/","text":"Logging to elmah.io from NLog NLog is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. To start logging messages from NLog to elmah.io, you need to install the Elmah.Io.NLog NuGet package: Install-Package elmah.io.nlog To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created: extensions add assembly= Elmah.Io.NLog / /extensions targets target name= elmahio type= elmah.io apiKey= API_KEY logId= LOG_ID / /targets rules logger name= * minlevel= Info writeTo= elmahio / /rules Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ), In the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this, but be aware that your elmah.io log may run full pretty fast, especially if you log thousands and thousands of trace and debug messages. Log messages to elmah.io, just as with every other target and NLog: log.Warn( This is a warning message ); log.Error(new Exception(), This is an error message ); Custom Properties NLog supports custom properties like most other logging frameworks. With custom properties, you can log additional key/value pairs with every log message. The elmah.io appender for NLog, supports custom properties as well. Properties are persisted alongside every log message in elmah.io and searchable if named correctly . To log custom properties with NLog and elmah.io, you need to use an overload of each logging-method that takes a LogEventInfo object as parameter: var infoMessage = new LogEventInfo(LogLevel.Info, , This is an information message ); infoMessage.Properties.Add( Some Property Key , Some Property Value ); log.Info(infoMessage); This saves the information message in elmah.io with a custom property with key Some Property Key and value Some Property Value . As of NLog 4.5, structured logging is supported as well. To log a property as part of the log message, use the new syntax as shown here: log.Warn( Property named {FirstName} , Donald ); In the example, NLog will log the message Property named \"Donald\" , but the key ( FirstName ) and value ( Donald ), will also be available in the Data tab inside elmah.io.","title":"Logging from NLog"},{"location":"logging-to-elmah-io-from-nlog/#logging-to-elmahio-from-nlog","text":"NLog is one of the most popular logging frameworks for .NET. With an active history on almost 10 years, the possibilities with NLog are many and it\u2019s easy to find documentation on how to use it. To start logging messages from NLog to elmah.io, you need to install the Elmah.Io.NLog NuGet package: Install-Package elmah.io.nlog To configure the elmah.io target, add the following configuration to your app.config/web.config/nlog.config depending on what kind of project you\u2019ve created: extensions add assembly= Elmah.Io.NLog / /extensions targets target name= elmahio type= elmah.io apiKey= API_KEY logId= LOG_ID / /targets rules logger name= * minlevel= Info writeTo= elmahio / /rules Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ), In the example we specify the level minimum as Info. This tells NLog to log only information, warning, error and fatal messages. You may adjust this, but be aware that your elmah.io log may run full pretty fast, especially if you log thousands and thousands of trace and debug messages. Log messages to elmah.io, just as with every other target and NLog: log.Warn( This is a warning message ); log.Error(new Exception(), This is an error message );","title":"Logging to elmah.io from NLog"},{"location":"logging-to-elmah-io-from-nlog/#custom-properties","text":"NLog supports custom properties like most other logging frameworks. With custom properties, you can log additional key/value pairs with every log message. The elmah.io appender for NLog, supports custom properties as well. Properties are persisted alongside every log message in elmah.io and searchable if named correctly . To log custom properties with NLog and elmah.io, you need to use an overload of each logging-method that takes a LogEventInfo object as parameter: var infoMessage = new LogEventInfo(LogLevel.Info, , This is an information message ); infoMessage.Properties.Add( Some Property Key , Some Property Value ); log.Info(infoMessage); This saves the information message in elmah.io with a custom property with key Some Property Key and value Some Property Value . As of NLog 4.5, structured logging is supported as well. To log a property as part of the log message, use the new syntax as shown here: log.Warn( Property named {FirstName} , Donald ); In the example, NLog will log the message Property named \"Donald\" , but the key ( FirstName ) and value ( Donald ), will also be available in the Data tab inside elmah.io.","title":"Custom Properties"},{"location":"logging-to-elmah-io-from-orchard/","text":"Logging to elmah.io from Orchard CMS Orchard CMS is a free, open source community-focused content management system built on the ASP.NET MVC and ASP.NET Core platforms. This tutorial is written for the ASP.NET Core version of Orchard. If you want to log to elmah.io from the MVC version, you should follow our tutorial for MVC . To start logging to elmah.io, install the following two packages (in that order): Install-Package Elmah.Io.Client Install-Package Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { ... services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { ... app.UseElmahIo(); ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Like with any other ASP.NET Core application, it's important to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ). Orchard uses NLog as the internal logging framework. Hooking into this pipeline is a great way to log warnings and errors through NLog to elmah.io as well. Install the Elmah.Io.Nlog NuGet package: Install-Package Elmah.Io.NLog -Pre Add the elmah.io target to the NLog.config -file: ?xml version= 1.0 encoding= utf-8 ? nlog ... extensions ... add assembly= Elmah.Io.NLog / /extensions targets ... target name= elmahio type= elmah.io apiKey= API_KEY logId= LOG_ID / /targets rules ... logger name= * minlevel= Warn writeTo= elmahio / /rules /nlog Make sure not to log Trace and Debug messages to elmah.io, which will quickly use up the included storage.","title":"Logging from Orchard"},{"location":"logging-to-elmah-io-from-orchard/#logging-to-elmahio-from-orchard-cms","text":"Orchard CMS is a free, open source community-focused content management system built on the ASP.NET MVC and ASP.NET Core platforms. This tutorial is written for the ASP.NET Core version of Orchard. If you want to log to elmah.io from the MVC version, you should follow our tutorial for MVC . To start logging to elmah.io, install the following two packages (in that order): Install-Package Elmah.Io.Client Install-Package Elmah.Io.AspNetCore Then modify your Startup.cs file: public class Startup { public void ConfigureServices(IServiceCollection services) { ... services.AddElmahIo(o = { o.ApiKey = API_KEY ; o.LogId = new Guid( LOG_ID ); }); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { ... app.UseElmahIo(); ... } } Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the id of the log ( Where is my log ID? ) where you want errors logged. Like with any other ASP.NET Core application, it's important to call the UseElmahIo -method after setting up other middleware handling exceptions (like UseDeveloperExceptionPage ). Orchard uses NLog as the internal logging framework. Hooking into this pipeline is a great way to log warnings and errors through NLog to elmah.io as well. Install the Elmah.Io.Nlog NuGet package: Install-Package Elmah.Io.NLog -Pre Add the elmah.io target to the NLog.config -file: ?xml version= 1.0 encoding= utf-8 ? nlog ... extensions ... add assembly= Elmah.Io.NLog / /extensions targets ... target name= elmahio type= elmah.io apiKey= API_KEY logId= LOG_ID / /targets rules ... logger name= * minlevel= Warn writeTo= elmahio / /rules /nlog Make sure not to log Trace and Debug messages to elmah.io, which will quickly use up the included storage.","title":"Logging to elmah.io from Orchard CMS"},{"location":"logging-to-elmah-io-from-powershell/","text":"Logging to elmah.io from PowerShell In order for you to be able to log to elmah.io from PowerShell, you will need the elmah.io.client NuGet package. This package contains the raw client libraries for communicating with the elmah.io API . First of all, you will need to include elmah.io.client.dll in your PowerShell script. How you do this is entirely up to you of course. You can place this assembly with your script or you can download it through NuGet on every execution. To download the elmah.io.client package through NuGet, you will need nuget.exe : $source = https://dist.nuget.org/win-x86-commandline/latest/nuget.exe $target = .\\nuget.exe Invoke-WebRequest $source -OutFile $target Set-Alias nuget $target -Scope Global This script will download the latest version of the NuGet command line tool and make it available through the command nuget . To install elmah.io.client, run nuget.exe : nuget install Elmah.Io.Client This will create a Elmah.Io.Client-version folder containing the latest stable version of the elmah.io.client package. Since you probably don't want to hardcode the path to the current version number, reference Elmah.Io.Client.dll and its dependencies using Get-ChildItem and a bit of recursive magic: $elmahIoClientPath = Get-ChildItem -Path . -Filter Elmah.Io.Client.dll -Recurse ` | Where-Object {$_.FullName -match net45 } [Reflection.Assembly]::LoadFile($elmahIoClientPath.FullName) $restClientPath = Get-ChildItem -Path . -Filter Microsoft.Rest.ClientRuntime.dll -Recurse ` | Where-Object {$_.FullName -match net45 } [Reflection.Assembly]::LoadFile($restClientPath.FullName) $jsonNetPath = Get-ChildItem -Path . -Filter Newtonsoft.Json.dll -Recurse ` | Where-Object {$_.FullName -match net45 -and $_.FullName -notmatch portable } [Reflection.Assembly]::LoadFile($jsonNetPath.FullName) You now have Elmah.Io.Client.dll loaded into your shell and everything is set up in order to log to elmah.io. To do so, add try-catch around critical code: $logger = [Elmah.Io.Client.ElmahioAPI]::Create( API_KEY ) Try { # some code that may throw exceptions } Catch { $logger.Messages.Error([guid]::new( LOG_ID ), $_.Exception, Oh no ) } In the first line, we create a new logger object with the API_KEY of the subscription we want to use ( Where is my API key? ). Then, in the Catch block, the catched exception is shipped off to the elmah.io log specified in LOG_ID ( Where is my log ID? ) together with a custom message.","title":"Logging from PowerShell"},{"location":"logging-to-elmah-io-from-powershell/#logging-to-elmahio-from-powershell","text":"In order for you to be able to log to elmah.io from PowerShell, you will need the elmah.io.client NuGet package. This package contains the raw client libraries for communicating with the elmah.io API . First of all, you will need to include elmah.io.client.dll in your PowerShell script. How you do this is entirely up to you of course. You can place this assembly with your script or you can download it through NuGet on every execution. To download the elmah.io.client package through NuGet, you will need nuget.exe : $source = https://dist.nuget.org/win-x86-commandline/latest/nuget.exe $target = .\\nuget.exe Invoke-WebRequest $source -OutFile $target Set-Alias nuget $target -Scope Global This script will download the latest version of the NuGet command line tool and make it available through the command nuget . To install elmah.io.client, run nuget.exe : nuget install Elmah.Io.Client This will create a Elmah.Io.Client-version folder containing the latest stable version of the elmah.io.client package. Since you probably don't want to hardcode the path to the current version number, reference Elmah.Io.Client.dll and its dependencies using Get-ChildItem and a bit of recursive magic: $elmahIoClientPath = Get-ChildItem -Path . -Filter Elmah.Io.Client.dll -Recurse ` | Where-Object {$_.FullName -match net45 } [Reflection.Assembly]::LoadFile($elmahIoClientPath.FullName) $restClientPath = Get-ChildItem -Path . -Filter Microsoft.Rest.ClientRuntime.dll -Recurse ` | Where-Object {$_.FullName -match net45 } [Reflection.Assembly]::LoadFile($restClientPath.FullName) $jsonNetPath = Get-ChildItem -Path . -Filter Newtonsoft.Json.dll -Recurse ` | Where-Object {$_.FullName -match net45 -and $_.FullName -notmatch portable } [Reflection.Assembly]::LoadFile($jsonNetPath.FullName) You now have Elmah.Io.Client.dll loaded into your shell and everything is set up in order to log to elmah.io. To do so, add try-catch around critical code: $logger = [Elmah.Io.Client.ElmahioAPI]::Create( API_KEY ) Try { # some code that may throw exceptions } Catch { $logger.Messages.Error([guid]::new( LOG_ID ), $_.Exception, Oh no ) } In the first line, we create a new logger object with the API_KEY of the subscription we want to use ( Where is my API key? ). Then, in the Catch block, the catched exception is shipped off to the elmah.io log specified in LOG_ID ( Where is my log ID? ) together with a custom message.","title":"Logging to elmah.io from PowerShell"},{"location":"logging-to-elmah-io-from-serilog/","text":"Logging to elmah.io from Serilog Logging to elmah.io from Serilog Logging custom properties ASP.NET Core Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonsense logging library for the NoSQL era\u201d on their project page. Serilog works just like other logging frameworks such as log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is built on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog. In this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications. Adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIo NuGet package to your project: Install-Package Serilog.Sinks.ElmahIo To configure Serilog, add the following code to the Application_Start method in global.asax.cs: var log = new LoggerConfiguration() .WriteTo.ElmahIo( API_KEY , new Guid( LOG_ID )) .CreateLogger(); Log.Logger = log; Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ), First, we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case, we don\u2019t use IoC, that is why the log object is set as the public static Logger property, which makes it accessible from everywhere. To log log exceptions to elmah.io through Serilog, is the Log class provided by Serilog: try { // Do some stuff which may cause an exception } catch (Exception e) { Log.Error(e, The actual error message ); } The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful. Logging custom properties Serilog support logging custom properties in three ways: As part of the log message, through enrichers and using LogContext . All three types of properties are implemented in the elmah.io sink as part of the Data dictionary to elmah.io. The following example shows how to log all three types of properties: var logger = new LoggerConfiguration() .Enrich.WithProperty( ApplicationIdentifier , MyCoolApp ) .Enrich.FromLogContext() .WriteTo.ElmahIO(new Guid( a6ac10b1-98b3-495f-960e-424fb18e3caf )) .CreateLogger(); using (LogContext.PushProperty( ThreadId , Thread.CurrentThread.ManagedThreadId)) { logger.Error( This is a message with {Type} properties , custom ); } Beneath the Data tab on the logged message details, the ApplicationIdentifier , ThreadId and Type properties can be found. ASP.NET Core Serilog provides a package for ASP.NET Core, that routes log messages from inside core through Serilog. We recommend to use this package together with the elmah.io sink, in order to capture warnings and errors happening inside ASP.NET Core. To use this, install the following packages: Install-Package Serilog.AspNetCore -DependencyVersion Highest Install-Package Elmah.Io.Client Install-Package Serilog.Sinks.ElmahIo (We install the Elmah.Io.Client manually, to make sure we run on the most recent version) Configure Serilog as usual: Log.Logger = new LoggerConfiguration() ... .WriteTo.ElmahIo( API_KEY , new Guid( LOG_ID ), LogEventLevel.Warning) .CreateLogger(); Finally, call the UseSerilog -method: public static IWebHost BuildWebHost(string[] args) = WebHost .CreateDefaultBuilder(args) .UseStartup Startup () .UseSerilog() .Build(); Now, all warnings, errors and fatals happening inside ASP.NET Core are logged to elmah.io.","title":"Logging from Serilog"},{"location":"logging-to-elmah-io-from-serilog/#logging-to-elmahio-from-serilog","text":"Logging to elmah.io from Serilog Logging custom properties ASP.NET Core Serilog is a great addition to the flowering .NET logging community, described as \u201cA no-nonsense logging library for the NoSQL era\u201d on their project page. Serilog works just like other logging frameworks such as log4net and NLog, but offers a great fluent API and the concept of sinks (a bit like appenders in log4net). Sinks are superior to appenders, because they threat errors as objects rather than strings, a perfect fit for elmah.io which itself is built on NoSQL. Serilog already comes with native support for elmah.io, which makes it easy to integrate with any application using Serilog. In this example we\u2019ll use a ASP.NET MVC project as an example. Neither Serilog nor elmah.io are bound to log errors from web applications. Adding this type of logging to your windows and console applications is just as easy. Add the Serilog.Sinks.ElmahIo NuGet package to your project: Install-Package Serilog.Sinks.ElmahIo To configure Serilog, add the following code to the Application_Start method in global.asax.cs: var log = new LoggerConfiguration() .WriteTo.ElmahIo( API_KEY , new Guid( LOG_ID )) .CreateLogger(); Log.Logger = log; Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with the ID of the log you want messages sent to ( Where is my log ID? ), First, we create a new LoggerConfiguration and tell it to write to elmah.io. The log object can be used to log errors and you should register this in your IoC container. In this case, we don\u2019t use IoC, that is why the log object is set as the public static Logger property, which makes it accessible from everywhere. To log log exceptions to elmah.io through Serilog, is the Log class provided by Serilog: try { // Do some stuff which may cause an exception } catch (Exception e) { Log.Error(e, The actual error message ); } The Error method tells Serilog to log the error in the configured sinks, which in our case logs to elmah.io. Simple and beautiful.","title":"Logging to elmah.io from Serilog"},{"location":"logging-to-elmah-io-from-serilog/#logging-custom-properties","text":"Serilog support logging custom properties in three ways: As part of the log message, through enrichers and using LogContext . All three types of properties are implemented in the elmah.io sink as part of the Data dictionary to elmah.io. The following example shows how to log all three types of properties: var logger = new LoggerConfiguration() .Enrich.WithProperty( ApplicationIdentifier , MyCoolApp ) .Enrich.FromLogContext() .WriteTo.ElmahIO(new Guid( a6ac10b1-98b3-495f-960e-424fb18e3caf )) .CreateLogger(); using (LogContext.PushProperty( ThreadId , Thread.CurrentThread.ManagedThreadId)) { logger.Error( This is a message with {Type} properties , custom ); } Beneath the Data tab on the logged message details, the ApplicationIdentifier , ThreadId and Type properties can be found.","title":"Logging custom properties"},{"location":"logging-to-elmah-io-from-serilog/#aspnet-core","text":"Serilog provides a package for ASP.NET Core, that routes log messages from inside core through Serilog. We recommend to use this package together with the elmah.io sink, in order to capture warnings and errors happening inside ASP.NET Core. To use this, install the following packages: Install-Package Serilog.AspNetCore -DependencyVersion Highest Install-Package Elmah.Io.Client Install-Package Serilog.Sinks.ElmahIo (We install the Elmah.Io.Client manually, to make sure we run on the most recent version) Configure Serilog as usual: Log.Logger = new LoggerConfiguration() ... .WriteTo.ElmahIo( API_KEY , new Guid( LOG_ID ), LogEventLevel.Warning) .CreateLogger(); Finally, call the UseSerilog -method: public static IWebHost BuildWebHost(string[] args) = WebHost .CreateDefaultBuilder(args) .UseStartup Startup () .UseSerilog() .Build(); Now, all warnings, errors and fatals happening inside ASP.NET Core are logged to elmah.io.","title":"ASP.NET Core"},{"location":"logging-to-elmah-io-from-servicestack/","text":"Logging to elmah.io from ServiceStack Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project: Install-Package ServiceStack.Logging.Elmah Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Once installed, add the following line to your AppHost: LogManager.LogFactory = new ElmahLogFactory(new NLogFactory()); The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other and actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory. That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.","title":"Logging from ServiceStack"},{"location":"logging-to-elmah-io-from-servicestack/#logging-to-elmahio-from-servicestack","text":"Logging errors to elmah.io from ServiceStack is almost as easy as installing in MVC and Web API. The folks over at ServiceStack provide you with a NuGet package named ServiceStack.Logging.Elmah. Like Web API you need to tell ServiceStack to use ELMAH as logging framework for errors, besides adding the standard ELMAH configuration in web.config. Start by installing both ServiceStack.Logging.Elmah and elmah.io into your ServiceStack web project: Install-Package ServiceStack.Logging.Elmah Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Once installed, add the following line to your AppHost: LogManager.LogFactory = new ElmahLogFactory(new NLogFactory()); The above example assumes that you are already using NLog as the existing framework for logging. Wrapping different logger factories in each other and actually makes it possible to log errors through ELMAH and other types of messages like warnings and info messages through another logging framework. If you don\u2019t need anything other than ELMAH logging, use the NullLogFactory instead of NLogFactory. That\u2019s it! By installing both the ServiceStack.Logging.Elmah and elmah.io packages, you should have sufficient configuration in your web.config to start logging like a pro.","title":"Logging to elmah.io from ServiceStack"},{"location":"logging-to-elmah-io-from-sitefinity/","text":"Logging to elmah.io from Sitefinity Sitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box. To install elmah.io in a Sitefinity web-site, start by opening the web-site in Visual Studio by selecting File | Open Web Site... and navigate to the Sitefinity projects folder (something similar to this: C:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default ). Right click the web site and install the elmah.io NuGet package or install it through Package Manager Console: Install-Package Elmah.Io During installation you will be prompted for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right click the web site and add a new Web Form named ELMAH.aspx. In the code behind file add the following code: protected void Page_Load(object sender, EventArgs e) { throw new ApplicationException(); } Start the web-site and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death and a new error will pop up on elmah.io.","title":"Logging from Sitefinity"},{"location":"logging-to-elmah-io-from-sitefinity/#logging-to-elmahio-from-sitefinity","text":"Sitefinity is a CMS from Telerik, implemented on top of ASP.NET. Like other content management systems build on top of ASP.NET, ELMAH is supported out of the box. To install elmah.io in a Sitefinity web-site, start by opening the web-site in Visual Studio by selecting File | Open Web Site... and navigate to the Sitefinity projects folder (something similar to this: C:\\Program Files (x86)\\Telerik\\Sitefinity\\Projects\\Default ). Right click the web site and install the elmah.io NuGet package or install it through Package Manager Console: Install-Package Elmah.Io During installation you will be prompted for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). That's it! Uncaught errors in Sitefinity are logged to your elmah.io log. To test that the integration works, right click the web site and add a new Web Form named ELMAH.aspx. In the code behind file add the following code: protected void Page_Load(object sender, EventArgs e) { throw new ApplicationException(); } Start the web-site and navigate to the ELMAH.aspx page. If everything works as intended, you will see the yellow screen of death and a new error will pop up on elmah.io.","title":"Logging to elmah.io from Sitefinity"},{"location":"logging-to-elmah-io-from-system-diagnostics/","text":"Logging to elmah.io from System.Diagnostics .NET comes with its own tracing/logging feature located in the System.Diagnostics namespaces . A core part of System.Diagnostics is the Trace class, but that namespace contains utilities for performance counters, working with the event log and a lot of other features. In this article, we will focus on logging to elmah.io from System.Diagnostics.Trace . To start logging, install the Elmah.Io.Trace package: Install-Package Elmah.Io.Trace As default, Trace logs to the Win32 OutputDebugString function, but it is possible to log to multiple targets (like appenders in log4net). To do so, tell Trace about elmah.io: System.Diagnostics.Trace.Listeners.Add( new ElmahIoTraceListener( API_KEY , new Guid( LOG_ID ))); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log id ( Where is my log ID? ). To start logging, call the Trace API: try { System.DIagnostics.Trace.Write( Starting something dangerous ); ... } catch (Exception e) { System.Diagnostics.Trace.Fail(e.Message, e.ToString()); } In the example, we write an information message with the message Starting something dangerous and logs any thrown exception to elmah.io.","title":"Logging from System.Diagnostics"},{"location":"logging-to-elmah-io-from-system-diagnostics/#logging-to-elmahio-from-systemdiagnostics","text":".NET comes with its own tracing/logging feature located in the System.Diagnostics namespaces . A core part of System.Diagnostics is the Trace class, but that namespace contains utilities for performance counters, working with the event log and a lot of other features. In this article, we will focus on logging to elmah.io from System.Diagnostics.Trace . To start logging, install the Elmah.Io.Trace package: Install-Package Elmah.Io.Trace As default, Trace logs to the Win32 OutputDebugString function, but it is possible to log to multiple targets (like appenders in log4net). To do so, tell Trace about elmah.io: System.Diagnostics.Trace.Listeners.Add( new ElmahIoTraceListener( API_KEY , new Guid( LOG_ID ))); Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log id ( Where is my log ID? ). To start logging, call the Trace API: try { System.DIagnostics.Trace.Write( Starting something dangerous ); ... } catch (Exception e) { System.Diagnostics.Trace.Fail(e.Message, e.ToString()); } In the example, we write an information message with the message Starting something dangerous and logs any thrown exception to elmah.io.","title":"Logging to elmah.io from System.Diagnostics"},{"location":"logging-to-elmah-io-from-umbraco/","text":"Logging to elmah.io from Umbraco Since Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact, all the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net, which elmah.io also support . We have brought all these pieces together into a NuGet package that we call: Elmah.Io.Umbraco . To start utilizing elmah.io from your Umbraco site, all you need to do is install the Elmah.Io.Umbraco package: Install-Package Elmah.Io.Umbraco During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Hit F5 and watch messages start flowing into elmah.io. Elmah.Io.Umbraco 3.x depends on UmbracoCms.Core = 7.6.3. If you are on a previous version of Umbraco, you can use Elmah.Io.Umbraco 1.0.25, which depends on UmbracoCms.Core 7.2.5. Umbraco Cloud When using Umbraco Cloud, you may not have a local clone of the source code. To install elmah.io on Umbraco cloud, execute the following steps: Clone your Umbraco Cloud project to a local folder as explained here: Visual Studio Setup . Install Elmah.Io.Umbraco into your local clone. During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Install-Package Elmah.Io.Umbraco Commit and push all changes to the git respository. This will add elmah.io logging to your remote Umbraco Cloud project. In case you want logging to different elmah.io logs from each Umbraco Cloud environment, please check out Umbraco's support for config transformations here: Config transforms . What's inside? The Elmah.Io.Umbraco package basically installs and configures three things: The elmah.io log4net appender (Warn and above) An Umbraco content finder for logging 404's ELMAH with elmah.io as error log All unhandled exceptions from both ASP.NET / MVC / Web API as well as 404's are logged automatically. Warnings, errors and fatal messages logged through log4net are send to elmah.io as well. Configuration If you are running on the default Umbraco template, all nessecary configuration is added during installation of the Elmah.Io.Umbraco NuGet package. If your web.config file for some reason aren't updated during installation, you can configure elmah.io manually: Configure elmah.io manually . Likewise, the installer configure the elmah.io appender for log4net in your Config\\log4net.config file. If the config isn't added or you are configuring log4net in another location (like web.config , here's a guide to set it up: Logging from log4net .","title":"Logging from Umbraco"},{"location":"logging-to-elmah-io-from-umbraco/#logging-to-elmahio-from-umbraco","text":"Since Umbraco itself is written in ASP.NET, ELMAH works like a dream inside Umbraco. Besides logging uncaught errors, elmah.io also supports other types of messages like information and debug. In fact, all the log levels that you already know from log4net, NLog and Serilog, are supported on elmah.io as well. Logging in Umbraco CMS is based on log4net, which elmah.io also support . We have brought all these pieces together into a NuGet package that we call: Elmah.Io.Umbraco . To start utilizing elmah.io from your Umbraco site, all you need to do is install the Elmah.Io.Umbraco package: Install-Package Elmah.Io.Umbraco During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Hit F5 and watch messages start flowing into elmah.io. Elmah.Io.Umbraco 3.x depends on UmbracoCms.Core = 7.6.3. If you are on a previous version of Umbraco, you can use Elmah.Io.Umbraco 1.0.25, which depends on UmbracoCms.Core 7.2.5.","title":"Logging to elmah.io from Umbraco"},{"location":"logging-to-elmah-io-from-umbraco/#umbraco-cloud","text":"When using Umbraco Cloud, you may not have a local clone of the source code. To install elmah.io on Umbraco cloud, execute the following steps: Clone your Umbraco Cloud project to a local folder as explained here: Visual Studio Setup . Install Elmah.Io.Umbraco into your local clone. During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Install-Package Elmah.Io.Umbraco Commit and push all changes to the git respository. This will add elmah.io logging to your remote Umbraco Cloud project. In case you want logging to different elmah.io logs from each Umbraco Cloud environment, please check out Umbraco's support for config transformations here: Config transforms .","title":"Umbraco Cloud"},{"location":"logging-to-elmah-io-from-umbraco/#whats-inside","text":"The Elmah.Io.Umbraco package basically installs and configures three things: The elmah.io log4net appender (Warn and above) An Umbraco content finder for logging 404's ELMAH with elmah.io as error log All unhandled exceptions from both ASP.NET / MVC / Web API as well as 404's are logged automatically. Warnings, errors and fatal messages logged through log4net are send to elmah.io as well.","title":"What's inside?"},{"location":"logging-to-elmah-io-from-umbraco/#configuration","text":"If you are running on the default Umbraco template, all nessecary configuration is added during installation of the Elmah.Io.Umbraco NuGet package. If your web.config file for some reason aren't updated during installation, you can configure elmah.io manually: Configure elmah.io manually . Likewise, the installer configure the elmah.io appender for log4net in your Config\\log4net.config file. If the config isn't added or you are configuring log4net in another location (like web.config , here's a guide to set it up: Logging from log4net .","title":"Configuration"},{"location":"logging-to-elmah-io-from-wcf/","text":"Logging to elmah.io from WCF ELMAH and WCF isn't exactly known to go hand in hand. But, with a bit of custom code, logging exceptions from WCF to elmah.io is possible. Let's get started. Install elmah.io into your WCF project using NuGet: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add a new class named HttpErrorHandler : public class HttpErrorHandler : IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error != null) { Elmah.ErrorSignal.FromCurrentContext().Raise(error); } } } This is an implementation of WCF's IErrorHandler that instructs WCF to log any errors to ELMAH, using the Raise -method on ErrorSignal . Then create an attribute named ServiceErrorBehaviourAttribute : public class ServiceErrorBehaviourAttribute : Attribute, IServiceBehavior { Type errorHandlerType; public ServiceErrorBehaviourAttribute(Type errorHandlerType) { this.errorHandlerType = errorHandlerType; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection ServiceEndpoint endpoints, BindingParameterCollection bindingParameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { IErrorHandler errorHandler; errorHandler = (IErrorHandler)Activator.CreateInstance(errorHandlerType); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } We'll use the ServiceErrorBehaviourAttribute class for decorating endpoints which we want logging uncaught errors to ELMAH. Add the new attribute to your service implementation like this: [ServiceErrorBehaviour(typeof(HttpErrorHandler))] public class Service1 : IService1 { ... } That's it. Services decorated with the ServiceErrorBehaviourAttribute now logs exceptions to ELMAH.","title":"Logging from WCF"},{"location":"logging-to-elmah-io-from-wcf/#logging-to-elmahio-from-wcf","text":"ELMAH and WCF isn't exactly known to go hand in hand. But, with a bit of custom code, logging exceptions from WCF to elmah.io is possible. Let's get started. Install elmah.io into your WCF project using NuGet: Install-Package Elmah.Io During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Add a new class named HttpErrorHandler : public class HttpErrorHandler : IErrorHandler { public bool HandleError(Exception error) { return false; } public void ProvideFault(Exception error, MessageVersion version, ref Message fault) { if (error != null) { Elmah.ErrorSignal.FromCurrentContext().Raise(error); } } } This is an implementation of WCF's IErrorHandler that instructs WCF to log any errors to ELMAH, using the Raise -method on ErrorSignal . Then create an attribute named ServiceErrorBehaviourAttribute : public class ServiceErrorBehaviourAttribute : Attribute, IServiceBehavior { Type errorHandlerType; public ServiceErrorBehaviourAttribute(Type errorHandlerType) { this.errorHandlerType = errorHandlerType; } public void Validate(ServiceDescription description, ServiceHostBase serviceHostBase) { } public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection ServiceEndpoint endpoints, BindingParameterCollection bindingParameters) { } public void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) { IErrorHandler errorHandler; errorHandler = (IErrorHandler)Activator.CreateInstance(errorHandlerType); foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers) { ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher; channelDispatcher.ErrorHandlers.Add(errorHandler); } } } We'll use the ServiceErrorBehaviourAttribute class for decorating endpoints which we want logging uncaught errors to ELMAH. Add the new attribute to your service implementation like this: [ServiceErrorBehaviour(typeof(HttpErrorHandler))] public class Service1 : IService1 { ... } That's it. Services decorated with the ServiceErrorBehaviourAttribute now logs exceptions to ELMAH.","title":"Logging to elmah.io from WCF"},{"location":"logging-to-elmah-io-from-web-api/","text":"Logging to elmah.io from Web API Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily, Richard Dingwall created the Elmah.Contrib.WebApi NuGet package to fix this. We've built a package for ASP.NET Web API exclusively, which installs all the necessary packages. To start logging exceptions from Web API, install the NuGet package: Install-Package Elmah.Io.WebApi During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Web API 2.x Web API 1.x Add the following code to your WebApiConfig.cs file: public static class WebApiConfig { public static void Register(HttpConfiguration config) { ... config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger()); ... } } The registered IExceptionLogger intercepts all thrown exceptions, even errors in controller contructors and routing errors. Add the following code to your Global.asax.cs file: protected void Application_Start() { ... GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute()); ... } In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged. All uncaught exceptions in ASP.NET Web API are now logged to elmah.io Logging from exception/action filters It's a widely used Web API approach, to handle all exceptions in a global exception/action filter and return a nicely formatted JSON/XML error response to the client. This is a nice approach to avoid throwing internal server errors, but it also puts ELMAH out of the game. When catching any exception manually and converting it to a response message, errors won't be logged in elmah.io. To overcome this, errors should be logged manually from your global exception/action filter: public class NotImplExceptionFilterAttribute : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { ErrorSignal.FromCurrentContext().Raise(context.Exception); // Now generate the result to the client } }","title":"Logging from Web API"},{"location":"logging-to-elmah-io-from-web-api/#logging-to-elmahio-from-web-api","text":"Web API provides its own mechanism for handling errors, why ELMAH\u2019s modules and handlers doesn\u2019t work there. Luckily, Richard Dingwall created the Elmah.Contrib.WebApi NuGet package to fix this. We've built a package for ASP.NET Web API exclusively, which installs all the necessary packages. To start logging exceptions from Web API, install the NuGet package: Install-Package Elmah.Io.WebApi During the installation, you will be asked for your API key ( Where is my API key? ) and log ID ( Where is my log ID? ). Web API 2.x Web API 1.x Add the following code to your WebApiConfig.cs file: public static class WebApiConfig { public static void Register(HttpConfiguration config) { ... config.Services.Add(typeof(IExceptionLogger), new ElmahExceptionLogger()); ... } } The registered IExceptionLogger intercepts all thrown exceptions, even errors in controller contructors and routing errors. Add the following code to your Global.asax.cs file: protected void Application_Start() { ... GlobalConfiguration.Configuration.Filters.Add(new ElmahHandleErrorApiAttribute()); ... } In this case you register a new global filter with Web API. The downside of this approach is, that only errors thrown in controller actions are logged. All uncaught exceptions in ASP.NET Web API are now logged to elmah.io","title":"Logging to elmah.io from Web API"},{"location":"logging-to-elmah-io-from-web-api/#logging-from-exceptionaction-filters","text":"It's a widely used Web API approach, to handle all exceptions in a global exception/action filter and return a nicely formatted JSON/XML error response to the client. This is a nice approach to avoid throwing internal server errors, but it also puts ELMAH out of the game. When catching any exception manually and converting it to a response message, errors won't be logged in elmah.io. To overcome this, errors should be logged manually from your global exception/action filter: public class NotImplExceptionFilterAttribute : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { ErrorSignal.FromCurrentContext().Raise(context.Exception); // Now generate the result to the client } }","title":"Logging from exception/action filters"},{"location":"logging-to-multiple-elmah-logs/","text":"Logging to multiple ELMAH logs Unfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere: elmah errorLog type= Elmah.SqlErrorLog, Elmah connectionStringName= elmah / /elmah As you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more errorLog elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the Elmah.Io NuGet package and add the following code to your global.asax.cs file: void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args) { var elmahIoLog = new Elmah.Io.ErrorLog(ElmahioAPI.Create( API_KEY ), new Guid( LOG_ID )); elmahIoLog.Log(args.Entry.Error); } In the above code, we listen for the Logged event by simply declaring a method named ErrorLog_Logged . When called, we create a new (Elmah.Io.)ErrorLog instance with an IElmahioAPI object and the log ID. Remember to replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). Next, we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io. If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this: void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args) { if (args.Entry.Error.StatusCode == 500) { var elmahIoLog = new Elmah.Io.ErrorLog(...); elmahIoLog.Log(args.Entry.Error); } } This time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains a HTTP status code of 500 . This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the ErrorLog_Filtering method instead. This method is called before ErrorLog_Logged and before actually logging the error to your normal error log.","title":"Logging to multiple logs"},{"location":"logging-to-multiple-elmah-logs/#logging-to-multiple-elmah-logs","text":"Unfortunately, ELMAH doesn\u2019t support multiple log targets like other logging frameworks like Serilog. This makes logging to multiple logs a bit tricky, but no way impossible. Let\u2019s say that you\u2019re using ELMAH in your web application and configured it to log everything in SQL Server. If you look through your web.config file, you will have code looking like this somewhere: elmah errorLog type= Elmah.SqlErrorLog, Elmah connectionStringName= elmah / /elmah As you probably know, this tells ELMAH to log all uncatched errors in SQL Server with the connection string \u201celmah\u201d. You cannot add more errorLog elements, why logging to a second log seems impossible. Meet ELMAH\u2019s Logged event, which is a great hook to log to multiple targets. Install the Elmah.Io NuGet package and add the following code to your global.asax.cs file: void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args) { var elmahIoLog = new Elmah.Io.ErrorLog(ElmahioAPI.Create( API_KEY ), new Guid( LOG_ID )); elmahIoLog.Log(args.Entry.Error); } In the above code, we listen for the Logged event by simply declaring a method named ErrorLog_Logged . When called, we create a new (Elmah.Io.)ErrorLog instance with an IElmahioAPI object and the log ID. Remember to replace API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). Next, we simply call the Log method with a new Error object. Bam! The error is logged both in SQL Server and in elmah.io. If you only want to log certain types of errors in elmah.io, but everything to your normal log, you can extend your code like this: void ErrorLog_Logged(object sender, ErrorLoggedEventArgs args) { if (args.Entry.Error.StatusCode == 500) { var elmahIoLog = new Elmah.Io.ErrorLog(...); elmahIoLog.Log(args.Entry.Error); } } This time we only begin logging to elmah.io, if the thrown exception is of type HttpException and contains a HTTP status code of 500 . This example only logs errors with status code 500 in elmah.io and all errors in your normal error log. If you want to create this filter on all logs, you should use the ErrorLog_Filtering method instead. This method is called before ErrorLog_Logged and before actually logging the error to your normal error log.","title":"Logging to multiple ELMAH logs"},{"location":"managing-organisations-and-users/","text":"Managing Organisations and Users Chances are that you are not the only one needing to access your logs. Luckily, elmah.io offers great features in order to manage the users in your organisation and to specify who should be allowed access to what. In order to manage access, you will need to know about the concepts of users and organisations . A user represents a person wanting to access one or more logs. Each user has its own login using username/password or a social provider of choice. A user can be added to one or more organisations. Each user has an access level within the organisation as well as an access level on each log. The access level on the organisation and the logs doesn't need to be the same. An organisation is a collection of users and their role inside the organisation. You will typically only need a single organisation, representing all of the users in your company needing to access one or more logs on elmah.io. Your elmah.io subscription is attached your organization and everyone with administrator access to the organization, will be able to manage the subscription. Adding users to an organisation To assign users to a log, you will need to add them to the organisation first. When hovering the organisation name in either the left menu or on the dashboard, you will see a small gear icon. When clicking the icon, you will be taken to the organisation settings page: At first, the user creating the organisation will be the only one in the list. To add a new user to the list, input the user's email or name in the textbox below Add new user . The dropdown will show a list of users on elmah.io matching your query. Each user needs to sign up on elmah.io before being visible in the Add new user list. When the new user is visible in the dropdown, click the user and select an access level. The chosen access level decides what the new user is allowed to do inside the organisation. Read users are only allowed to view the organisation, while Administrator users are allowed to add new users and delete the entire organisation and all logs beneath it. The access level set for the user in the organisation, will become the user's access level on all new logs inside that organisation as well. Let's add a new user to the organisation: To change the access level on an already added user, click one of the grouped buttons to the right of the user's name. Changing a user's access level on the organisation won't change the users access level on each log. To delete a user from the organisation, click the red delete button to the far right. When a user is added to an organisation, the user will automatically have access to all new logs created in that organisation. For security reasons, a new user added to the organisation, will not have access to existing logs in the organisation. To assign the new user to existing logs, assign an access level on each log shown beneath the user. The list of logs can be opened by clicking the dropdown button to the right of the user. Awarding a user Administrator on a log, doesn't give them Administrator rights on the organisation. To assign a user to all logs, click the None , Read , Write or Administrator buttons in the table header above the list of logs.","title":"Managing Organisations and Users"},{"location":"managing-organisations-and-users/#managing-organisations-and-users","text":"Chances are that you are not the only one needing to access your logs. Luckily, elmah.io offers great features in order to manage the users in your organisation and to specify who should be allowed access to what. In order to manage access, you will need to know about the concepts of users and organisations . A user represents a person wanting to access one or more logs. Each user has its own login using username/password or a social provider of choice. A user can be added to one or more organisations. Each user has an access level within the organisation as well as an access level on each log. The access level on the organisation and the logs doesn't need to be the same. An organisation is a collection of users and their role inside the organisation. You will typically only need a single organisation, representing all of the users in your company needing to access one or more logs on elmah.io. Your elmah.io subscription is attached your organization and everyone with administrator access to the organization, will be able to manage the subscription.","title":"Managing Organisations and Users"},{"location":"managing-organisations-and-users/#adding-users-to-an-organisation","text":"To assign users to a log, you will need to add them to the organisation first. When hovering the organisation name in either the left menu or on the dashboard, you will see a small gear icon. When clicking the icon, you will be taken to the organisation settings page: At first, the user creating the organisation will be the only one in the list. To add a new user to the list, input the user's email or name in the textbox below Add new user . The dropdown will show a list of users on elmah.io matching your query. Each user needs to sign up on elmah.io before being visible in the Add new user list. When the new user is visible in the dropdown, click the user and select an access level. The chosen access level decides what the new user is allowed to do inside the organisation. Read users are only allowed to view the organisation, while Administrator users are allowed to add new users and delete the entire organisation and all logs beneath it. The access level set for the user in the organisation, will become the user's access level on all new logs inside that organisation as well. Let's add a new user to the organisation: To change the access level on an already added user, click one of the grouped buttons to the right of the user's name. Changing a user's access level on the organisation won't change the users access level on each log. To delete a user from the organisation, click the red delete button to the far right. When a user is added to an organisation, the user will automatically have access to all new logs created in that organisation. For security reasons, a new user added to the organisation, will not have access to existing logs in the organisation. To assign the new user to existing logs, assign an access level on each log shown beneath the user. The list of logs can be opened by clicking the dropdown button to the right of the user. Awarding a user Administrator on a log, doesn't give them Administrator rights on the organisation. To assign a user to all logs, click the None , Read , Write or Administrator buttons in the table header above the list of logs.","title":"Adding users to an organisation"},{"location":"missing-server-side-information-on-uptime-errors/","text":"Missing server side information on uptime errors To decorate uptime errors with server side error information, you will need a few things: The monitored website should be configured to log errors to elmah.io. The uptime check needs to be created on the same log as the monitored website. Update the BotBuster app. When installed in a previous version, errors generated by Uptime Monitoring are ignored (since Uptime Monitoring is in fact a bot). To update, uninstall the BotBuster app and then re-install it.","title":"Missing server side information on uptime errors"},{"location":"missing-server-side-information-on-uptime-errors/#missing-server-side-information-on-uptime-errors","text":"To decorate uptime errors with server side error information, you will need a few things: The monitored website should be configured to log errors to elmah.io. The uptime check needs to be created on the same log as the monitored website. Update the BotBuster app. When installed in a previous version, errors generated by Uptime Monitoring are ignored (since Uptime Monitoring is in fact a bot). To update, uninstall the BotBuster app and then re-install it.","title":"Missing server side information on uptime errors"},{"location":"query-messages-using-full-text-search/","text":"Query messages using full-text search All messages sent to elmah.io, are indexed in Elasticsearch. Storing messages in a database like Elasticsearch, opens up a world of possibilities. This article explains how to query your log messages using full-text search, Search Filters and Lucene Query Syntax. Query messages using full-text search Full-text search Search Filters Lucene Query Syntax Full-text search The easiest approach to start searching your log messages, is by inputting search terms in the Search field on elmah.io: We don't want to get into too much details on how full-text work in Elasticsearch. In short, Elasticsearch breaks the query into the terms implement and icontroller and tries to match all log messages including those terms. Full-text search work on analyzed fields in Elasticsearch, which means that wildcards and other constructs are fully supported. Full-text queries work great. when you want to do a quick search for some keywords like part of an exception message or stacktrace. Remember that the entire log message is search, why a search for 500 would hit both log messages with status code 500 and the term 500 in the stacktrace. Search Filters Search filters are built exclusively for elmah.io. They are built on top of Lucene Query Syntax (which we'll discuss in a minute), but much easier to write. Search filters are available through either the Add filter button below the search field or using various links and icons on the elmah.io UI. Let's say we want to find all errors with a status code of 500: Adding the two filters is possible using a few clicks. As mentioned previously, search filters are available througout the UI too. In this example, a filter is used to find messages not matching a specified URL: Search filters can be used in combination with full-text queries for greater flexibility. Lucene Query Syntax Elasticsearch is implemented on top of Lucene; a high-performance search engine, written entirely in Java. While Elasticsearch supports a lot of nice abstractions on top of Lucene, sometime you just want close to the metal. This is when we need to introduce you to Lucene Query Syntax. The query syntax is a query language similar to the WHERE part of a SQL statement. Unlike SQL, the query syntax supports both filters (similar to SQL) and full-text queries. Basically all Lucene queries are made up of strings containing one or more terms and operators: term AND term OR term While AND and OR pretty much speaks for itself, terms needs a bit of explanation. A term can be a single term or a phrase. We've already seen two single terms in the full-text search example. The query in the example corresponds to this Lucene query: implement AND IController Looking at term phrases, things get really interesting. With phrases, you can query on specific fields, perform range queries and much more. Examples are worth a thousand words, why the rest of this document is examples of frequently used queries. If you think that examples are missing or have a problem with a custom queries, let us know. We will extend this tutorial with the examples you need. Find messages with type type: System.Web.HttpException Find messages with status codes statusCode:[500 TO 599] Find messages with URL and method url: /tester/ AND method:get Find messages with URL starting with url:\\/.well-known* Forward slash in the beginning needs to be escaped, since Lucene will understand it as the start of a regex otherwise. Find messages by IP remoteAddr:192.168.0.1 Find messages by IP's remoteAddr:192.68.0.* The examples above can be achieved using Search Filters as well. We recommend using Search Filters where possible and fall back to Lucene Query Syntax when something isn't supported through filters. An example is using OR which currently isn't possible using filters.","title":"Query messages using full-text search"},{"location":"query-messages-using-full-text-search/#query-messages-using-full-text-search","text":"All messages sent to elmah.io, are indexed in Elasticsearch. Storing messages in a database like Elasticsearch, opens up a world of possibilities. This article explains how to query your log messages using full-text search, Search Filters and Lucene Query Syntax. Query messages using full-text search Full-text search Search Filters Lucene Query Syntax","title":"Query messages using full-text search"},{"location":"query-messages-using-full-text-search/#full-text-search","text":"The easiest approach to start searching your log messages, is by inputting search terms in the Search field on elmah.io: We don't want to get into too much details on how full-text work in Elasticsearch. In short, Elasticsearch breaks the query into the terms implement and icontroller and tries to match all log messages including those terms. Full-text search work on analyzed fields in Elasticsearch, which means that wildcards and other constructs are fully supported. Full-text queries work great. when you want to do a quick search for some keywords like part of an exception message or stacktrace. Remember that the entire log message is search, why a search for 500 would hit both log messages with status code 500 and the term 500 in the stacktrace.","title":"Full-text search"},{"location":"query-messages-using-full-text-search/#search-filters","text":"Search filters are built exclusively for elmah.io. They are built on top of Lucene Query Syntax (which we'll discuss in a minute), but much easier to write. Search filters are available through either the Add filter button below the search field or using various links and icons on the elmah.io UI. Let's say we want to find all errors with a status code of 500: Adding the two filters is possible using a few clicks. As mentioned previously, search filters are available througout the UI too. In this example, a filter is used to find messages not matching a specified URL: Search filters can be used in combination with full-text queries for greater flexibility.","title":"Search Filters"},{"location":"query-messages-using-full-text-search/#lucene-query-syntax","text":"Elasticsearch is implemented on top of Lucene; a high-performance search engine, written entirely in Java. While Elasticsearch supports a lot of nice abstractions on top of Lucene, sometime you just want close to the metal. This is when we need to introduce you to Lucene Query Syntax. The query syntax is a query language similar to the WHERE part of a SQL statement. Unlike SQL, the query syntax supports both filters (similar to SQL) and full-text queries. Basically all Lucene queries are made up of strings containing one or more terms and operators: term AND term OR term While AND and OR pretty much speaks for itself, terms needs a bit of explanation. A term can be a single term or a phrase. We've already seen two single terms in the full-text search example. The query in the example corresponds to this Lucene query: implement AND IController Looking at term phrases, things get really interesting. With phrases, you can query on specific fields, perform range queries and much more. Examples are worth a thousand words, why the rest of this document is examples of frequently used queries. If you think that examples are missing or have a problem with a custom queries, let us know. We will extend this tutorial with the examples you need. Find messages with type type: System.Web.HttpException Find messages with status codes statusCode:[500 TO 599] Find messages with URL and method url: /tester/ AND method:get Find messages with URL starting with url:\\/.well-known* Forward slash in the beginning needs to be escaped, since Lucene will understand it as the start of a regex otherwise. Find messages by IP remoteAddr:192.168.0.1 Find messages by IP's remoteAddr:192.68.0.* The examples above can be achieved using Search Filters as well. We recommend using Search Filters where possible and fall back to Lucene Query Syntax when something isn't supported through filters. An example is using OR which currently isn't possible using filters.","title":"Lucene Query Syntax"},{"location":"remove-sensitive-form-data/","text":"Remove sensitive form data You may have something like usernames and passwords in form posts on your website. Since elmah.io automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the Internet, is a potential hacking victim. ASP.NET / MVC / Web API In this example, we hide the value of a form value named SomeSecretFormField . Add the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) = { var form = args.Message.Form.FirstOrDefault(f = f.Key == SomeSecretFormField ); if (form != null) { form.Value = ***hidden*** ; } }; ASP.NET Core Our integration for ASP.NET Core ( Elmah.Io.AspNetCore ) provides you with a hook to overwrite values, before sending them to elmah.io. In order to do this, implement the OnMessage handler as part of calling the AddElmahIo method. In this example, we remove the server variable named Secret-Key from all messages, before sending them to elmah.io. services.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); options.OnMessage = msg = { var item = msg.ServerVariables.FirstOrDefault(x = x.Key == Secret-Key ); if (item != null) { msg.ServerVariables.Remove(item); } }; });","title":"Remove sensitive form data"},{"location":"remove-sensitive-form-data/#remove-sensitive-form-data","text":"You may have something like usernames and passwords in form posts on your website. Since elmah.io automatically logs the content of a failing form POST, sensitive data potentially ends up in your log. No one else but you and your company should really get to look inside your log, but remember that everyone connected to the Internet, is a potential hacking victim.","title":"Remove sensitive form data"},{"location":"remove-sensitive-form-data/#aspnet-mvc-web-api","text":"In this example, we hide the value of a form value named SomeSecretFormField . Add the following code in the Application_Start method in the global.asax.cs file: Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = Elmah.Io.ErrorLog.Client; logger.OnMessage += (sender, args) = { var form = args.Message.Form.FirstOrDefault(f = f.Key == SomeSecretFormField ); if (form != null) { form.Value = ***hidden*** ; } };","title":"ASP.NET / MVC / Web API"},{"location":"remove-sensitive-form-data/#aspnet-core","text":"Our integration for ASP.NET Core ( Elmah.Io.AspNetCore ) provides you with a hook to overwrite values, before sending them to elmah.io. In order to do this, implement the OnMessage handler as part of calling the AddElmahIo method. In this example, we remove the server variable named Secret-Key from all messages, before sending them to elmah.io. services.AddElmahIo(options = { options.ApiKey = API_KEY ; options.LogId = new Guid( LOG_ID ); options.OnMessage = msg = { var item = msg.ServerVariables.FirstOrDefault(x = x.Key == Secret-Key ); if (item != null) { msg.ServerVariables.Remove(item); } }; });","title":"ASP.NET Core"},{"location":"setup-deployment-tracking/","text":"Set Up Deployment Tracking Set Up Deployment Tracking Tell elmah.io when you release Manually using Swagger UI Using PowerShell Using Kudu Using Octopus Deploy Using Visual Studio Team Services (Releases) Using Visual Studio Team Services (Builds) Using Umbraco Cloud Using Bitbucket Pipelines Using Atlassian Bamboo Decorate your messages with a version number Versioning Different Services Deployment tracking creates an overview of the different versions of your software and show you how well each version performed. With this integration in place, you will be able to see when you released and if some of your releases caused more errors than others. While most pages on elmah.io supports everything from verbose to fatal messages, the context on deployment tracking is around warnings and errors. To set up deployment tracking, you will need to tell elmah.io when you release, using our REST API or one of the integrations. Deployments are as default created on all of your logs, but this can be tweaked. More about this later. Tell elmah.io when you release When you create a release of your software either manually or with the help from a tool like Octopus, you need to tell elmah.io about it. The elmah.io REST API v3 , provides an endpoint named deployments , which you can call when creating releases. After calling the endpoint, all new messages to your logs, will automatically be decorated with the most recent version number. Manually using Swagger UI If you release your software manually, creating the new release manually is easy using Swagger UI. Swagger UI is a graphical client for calling a Swagger enabled endpoint (much like Postman). Navigate to https://api.elmah.io/swagger/ui/index , expand the Deployments node and click the POST request: To create the release, input your API key ( Where is my API key? ) in the top right corner and click the JSON beneath Model Schema . This copies the example JSON to the deployment parameter. A minimal deployment would look like the following, but adding more information makes the experience within elmah.io even better: { version : 1.42.7 } The version string in the example conforms to SemVer, but the content can be anything. The date of the release is automatically added if not specified in the JSON body. Click the Try it out! button and the deployment is created. Using PowerShell If you release your software using a build or deployment server, creating the new release is easy using a bit of PowerShell. To request the deployments endpoint, write the following PowerShell script: $version = 1.42.7 $ProgressPreference = SilentlyContinue $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version } Invoke-RestMethod -Method Post -Uri $url -Body $body (replace API_KEY with your API key found on your organization settings page) In the example, a simple version string is sent to the API and elmah.io will automatically put a timestamp on that. Overriding user information and description, makes the experience within the elmah.io UI better. Pulling release notes and the name and email of the deployer, is usually available through environment variables or similar, depending on the technology used for creating the deployment. Using Kudu Kudu is the engine behind Git deployments on Microsoft Azure. To create a new elmah.io deployment every time you deploy a new app service to Azure, add a new post deployment script by navigating your browser to https://yoursite.scm.azurewebsites.net where yoursite is the name of your Azure website. Click the Debug console and navigate to site\\deployments\\tools\\PostDeploymentActions (create it if it doesn't exist). To create the new PowerShell file, write the following in the prompt: touch CreateDeployment.ps1 With a post deployment script running inside Kudu, we have the possibility to extract some more information about the current deployment. A full deployment PowerShell script for Kudu, would look like this: $version = Get-Date -format u (Get-Content ..\\wwwroot\\web.config).replace('$version', $version) | Set-Content ..\\wwwroot\\web.config $ProgressPreference = SilentlyContinue $commit = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_MESSAGE ); $commitId = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_ID ); $httpHost = [System.Environment]::GetEnvironmentVariable( HTTP_HOST ); $deployUrl = https://$httpHost/api/deployments/$commitId $username = MY_USERNAME $password = MY_PASSWORD $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(( {0}:{1} -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=( Basic {0} -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $commit userName = $deployInfo.author userEmail = $deployInfo.author_email } Invoke-RestMethod -Method Post -Uri $url -Body $body (replace MY_USERNAME and MY_PASSWORD with your Azure deployment credentials and API_KEY with your elmah.io API key located on your organization settings page) The script generates a new version string from the current date and time. How you want your version string looking, is really up to you. To fetch additional information about the deployment, the Kudu deployments endpoint is requested with the current commit id. Finally, the script creates the deployment using the elmah.io REST API. Using Octopus Deploy Notifying elmah.io of a new deployment from Octopus Deploy, is supported through a custom step template. To install and configure the template, follow the steps below: Go to the elmah.io - Register Deployment step template on the Octopus Deploy Library. Click the Copy to clipboard button. Click Library in the header on your Octopus Deploy instance and go to the Step templates tab. Click the Import link and paste the step template copied from the Library. Then click Import . Go to the Process tab of your project on Octopus Deploy and click the Add step button. The elmah.io step template is available in the bottom of the list. When added to the process, select Octopus Server in Run on and input your API key found on your organization settings page. Optionally input a log ID, to support multiple services . And we're done. On every new deployment, Octopus Deploy will notify elmah.io Using Visual Studio Team Services (Releases) If you are using Release Management in Visual Studio Team Services, you should use our VSTS extension to notify elmah.io about new deployments. To install and configure the extension, follow the simple steps below: Go to the elmah.io Deployment Tasks extension on the Visual Studio Marketplace and click Install (log in if not already). Select the account to install the extension into and click Confirm : Go to your Visual Studio Team Services project and edit your Release definition. Click Add tasks and locate the elmah.io Deployment Notification task. Click Add . Copy your API key from your organization settings page and paste it into the API Key field. In most cases, you want to input the ID of the log new deployments belong to. As default, we use the release name on VSTS as the version number string on elmah.io. If you require a custom naming scheme, change the value in the Version field. All default and custom release variables are available through PowerShell variables. Finally, click Save . That's it! VSTS will now notify elmah.io every time the release definition is executed. Remember to input a specific log ID as well, if you want to support versioning different services . Using Visual Studio Team Services (Builds) Notifying elmah.io about new deployments is possible as a build step in Visual Studio Team Services, by adding a bit of PowerShell: Edit the build definition currently building your project(s). Click the Add task button and locate the PowerShell task. Click Add . Fill in the details as shown in the screenshot. ... and here's the code from the screenshot above: $ProgressPreference = SilentlyContinue $url = https://api.elmah.io/v3/deployments?api_key=API_KEY $body = @{ version = $env:BUILD_BUILDNUMBER description = $env:BUILD_SOURCEVERSIONMESSAGE userName = $env:BUILD_REQUESTEDFOR userEmail = $env:BUILD_REQUESTEDFOREMAIL logId = LOG_ID } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the id of the log representing the application deployed by this build configuration. Using Umbraco Cloud Umbraco Cloud uses Azure to host Umbraco websites, why supporting deployment tracking pretty much corresponds the steps specified in Using Kudu . Navigate to https://your-umbraco-site.scm.s1.umbraco.io where your-umbraco-site is the name of your Umbraco site. Click the Debug console link and navigate to site\\deployments\\tools\\PostDeploymentActions\\deploymenthooks (create it if it doesn't exist). Notice the folder deploymenthooks , which is required in order for your scripts to run on Umbraco Cloud. Unlike Kudu, Umbraco Cloud only executes cmd and bat files. Create a new cmd file: touch create-deployment.cmd with the following content: echo Creating elmah.io deployment cd %POST_DEPLOYMENT_ACTIONS_DIR% cd deploymenthooks powershell -command . .\\create-deployment.ps1 The script executes a PowerShell script, which we will create next: touch create-deployment.ps1 The content of the PowerShell script looks a lot like in Using Kudu , but with some minor tweaks to support Umbraco Cloud: $version = Get-Date -format u $ProgressPreference = SilentlyContinue $commitId = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_ID ); $deployUrl = https://your-umbraco-site.scm.s1.umbraco.io/api/deployments/$commitId $username = MY_USERNAME $password = MY_PASSWORD $logId = LOG_ID $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(( {0}:{1} -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=( Basic {0} -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $deployInfo.message userName = $deployInfo.author userEmail = $deployInfo.author_email logId = $logId } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace your-umbraco-site with the name of your site, MY_USERNAME with your Umbraco Cloud username, MY_PASSWORD with your Umbraco Cloud password, LOG_ID with the id if the elmah.io log that should contain the deployments ( Where is my log ID? ) and finally API_KEY with your elmah.io API key, found and your organization settings page. There you go. When deploying changes to your Umbraco Cloud site, a new deployment is automatically created on elmah.io. Using Bitbucket Pipelines Pipelines uses scripts, embedded in YAML-files, to configure the different steps required to build and deploy software. To notify elmah.io as part of a build/deployment, the first you will need to do, is to add your API key as a secure environment variable. To do so, go to Settings | Pipelines | Environment variables and add a new variable: Where is my API key? Then add a new script to your build YAML-file after building and deploying your software: pipelines: default: - step: script: ... - curl -X POST -d {\\ version\\ :\\ $BITBUCKET_BUILD_NUMBER\\ } -H Content-Type:application/json https://api.elmah.io/v3/deployments?api_key=$ELMAHIO_APIKEY The script uses curl to invoke the elmah.io Deployments endpoint with the API key ( $ELMAHIO_APIKEY ) and a version number ( $BITBUCKET_BUILD_NUMBER ). The posted JSON can be extended to support additional properties like changelog and the name of the person triggering the deployment. Check out the API documentation for details. Using Atlassian Bamboo Setting up elmah.io Deployment Tracking on Bamboo, is easy using a bit of PowerShell. Add a new Script Task and select Windows PowerShell in Interpreter . Select Inline in Script location and add the following PowerShell to Script body : $ProgressPreference = SilentlyContinue Write-Host $bamboo_buildNumber $url = https://api.elmah.io/v3/deployments?api_key=API_KEY $body = @{ version = $Env:bamboo_buildNumber logId = LOG_ID } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY and LOG_ID and everything is configured. The script uses the build number of the current build as version number ( $Env:bamboo_buildNumber ). If you prefer another scheme, Bamboo offers a range of variables . Decorate your messages with a version number As default, all messages are decorated with the most recent deployment version. If you want to override this behavior, check out Adding Version Information for details. Versioning Different Services Chances are that your software consists of multiple services released independently and with different version numbers. This is a common pattern when splitting up a software system in microservices. How you choose to split your elmah.io logs are entirely up to you, but we almost always recommend having a separate log for each service. When doing so, you only want deployment tracking to show the releases from the service you are currently looking at. The problem here is that deployments on elmah.io are shown on all logs as default. To make sure that only deployments related to the service you are looking at are shown, you need to decorate each deployment with the log ID where it belong. The deployments API support this through an optional logId property. If set, the new deployment is only shown on the specified log.","title":"Set Up Deployment Tracking"},{"location":"setup-deployment-tracking/#set-up-deployment-tracking","text":"Set Up Deployment Tracking Tell elmah.io when you release Manually using Swagger UI Using PowerShell Using Kudu Using Octopus Deploy Using Visual Studio Team Services (Releases) Using Visual Studio Team Services (Builds) Using Umbraco Cloud Using Bitbucket Pipelines Using Atlassian Bamboo Decorate your messages with a version number Versioning Different Services Deployment tracking creates an overview of the different versions of your software and show you how well each version performed. With this integration in place, you will be able to see when you released and if some of your releases caused more errors than others. While most pages on elmah.io supports everything from verbose to fatal messages, the context on deployment tracking is around warnings and errors. To set up deployment tracking, you will need to tell elmah.io when you release, using our REST API or one of the integrations. Deployments are as default created on all of your logs, but this can be tweaked. More about this later.","title":"Set Up Deployment Tracking"},{"location":"setup-deployment-tracking/#tell-elmahio-when-you-release","text":"When you create a release of your software either manually or with the help from a tool like Octopus, you need to tell elmah.io about it. The elmah.io REST API v3 , provides an endpoint named deployments , which you can call when creating releases. After calling the endpoint, all new messages to your logs, will automatically be decorated with the most recent version number.","title":"Tell elmah.io when you release"},{"location":"setup-deployment-tracking/#manually-using-swagger-ui","text":"If you release your software manually, creating the new release manually is easy using Swagger UI. Swagger UI is a graphical client for calling a Swagger enabled endpoint (much like Postman). Navigate to https://api.elmah.io/swagger/ui/index , expand the Deployments node and click the POST request: To create the release, input your API key ( Where is my API key? ) in the top right corner and click the JSON beneath Model Schema . This copies the example JSON to the deployment parameter. A minimal deployment would look like the following, but adding more information makes the experience within elmah.io even better: { version : 1.42.7 } The version string in the example conforms to SemVer, but the content can be anything. The date of the release is automatically added if not specified in the JSON body. Click the Try it out! button and the deployment is created.","title":"Manually using Swagger UI"},{"location":"setup-deployment-tracking/#using-powershell","text":"If you release your software using a build or deployment server, creating the new release is easy using a bit of PowerShell. To request the deployments endpoint, write the following PowerShell script: $version = 1.42.7 $ProgressPreference = SilentlyContinue $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version } Invoke-RestMethod -Method Post -Uri $url -Body $body (replace API_KEY with your API key found on your organization settings page) In the example, a simple version string is sent to the API and elmah.io will automatically put a timestamp on that. Overriding user information and description, makes the experience within the elmah.io UI better. Pulling release notes and the name and email of the deployer, is usually available through environment variables or similar, depending on the technology used for creating the deployment.","title":"Using PowerShell"},{"location":"setup-deployment-tracking/#using-kudu","text":"Kudu is the engine behind Git deployments on Microsoft Azure. To create a new elmah.io deployment every time you deploy a new app service to Azure, add a new post deployment script by navigating your browser to https://yoursite.scm.azurewebsites.net where yoursite is the name of your Azure website. Click the Debug console and navigate to site\\deployments\\tools\\PostDeploymentActions (create it if it doesn't exist). To create the new PowerShell file, write the following in the prompt: touch CreateDeployment.ps1 With a post deployment script running inside Kudu, we have the possibility to extract some more information about the current deployment. A full deployment PowerShell script for Kudu, would look like this: $version = Get-Date -format u (Get-Content ..\\wwwroot\\web.config).replace('$version', $version) | Set-Content ..\\wwwroot\\web.config $ProgressPreference = SilentlyContinue $commit = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_MESSAGE ); $commitId = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_ID ); $httpHost = [System.Environment]::GetEnvironmentVariable( HTTP_HOST ); $deployUrl = https://$httpHost/api/deployments/$commitId $username = MY_USERNAME $password = MY_PASSWORD $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(( {0}:{1} -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=( Basic {0} -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $commit userName = $deployInfo.author userEmail = $deployInfo.author_email } Invoke-RestMethod -Method Post -Uri $url -Body $body (replace MY_USERNAME and MY_PASSWORD with your Azure deployment credentials and API_KEY with your elmah.io API key located on your organization settings page) The script generates a new version string from the current date and time. How you want your version string looking, is really up to you. To fetch additional information about the deployment, the Kudu deployments endpoint is requested with the current commit id. Finally, the script creates the deployment using the elmah.io REST API.","title":"Using Kudu"},{"location":"setup-deployment-tracking/#using-octopus-deploy","text":"Notifying elmah.io of a new deployment from Octopus Deploy, is supported through a custom step template. To install and configure the template, follow the steps below: Go to the elmah.io - Register Deployment step template on the Octopus Deploy Library. Click the Copy to clipboard button. Click Library in the header on your Octopus Deploy instance and go to the Step templates tab. Click the Import link and paste the step template copied from the Library. Then click Import . Go to the Process tab of your project on Octopus Deploy and click the Add step button. The elmah.io step template is available in the bottom of the list. When added to the process, select Octopus Server in Run on and input your API key found on your organization settings page. Optionally input a log ID, to support multiple services . And we're done. On every new deployment, Octopus Deploy will notify elmah.io","title":"Using Octopus Deploy"},{"location":"setup-deployment-tracking/#using-visual-studio-team-services-releases","text":"If you are using Release Management in Visual Studio Team Services, you should use our VSTS extension to notify elmah.io about new deployments. To install and configure the extension, follow the simple steps below: Go to the elmah.io Deployment Tasks extension on the Visual Studio Marketplace and click Install (log in if not already). Select the account to install the extension into and click Confirm : Go to your Visual Studio Team Services project and edit your Release definition. Click Add tasks and locate the elmah.io Deployment Notification task. Click Add . Copy your API key from your organization settings page and paste it into the API Key field. In most cases, you want to input the ID of the log new deployments belong to. As default, we use the release name on VSTS as the version number string on elmah.io. If you require a custom naming scheme, change the value in the Version field. All default and custom release variables are available through PowerShell variables. Finally, click Save . That's it! VSTS will now notify elmah.io every time the release definition is executed. Remember to input a specific log ID as well, if you want to support versioning different services .","title":"Using Visual Studio Team Services (Releases)"},{"location":"setup-deployment-tracking/#using-visual-studio-team-services-builds","text":"Notifying elmah.io about new deployments is possible as a build step in Visual Studio Team Services, by adding a bit of PowerShell: Edit the build definition currently building your project(s). Click the Add task button and locate the PowerShell task. Click Add . Fill in the details as shown in the screenshot. ... and here's the code from the screenshot above: $ProgressPreference = SilentlyContinue $url = https://api.elmah.io/v3/deployments?api_key=API_KEY $body = @{ version = $env:BUILD_BUILDNUMBER description = $env:BUILD_SOURCEVERSIONMESSAGE userName = $env:BUILD_REQUESTEDFOR userEmail = $env:BUILD_REQUESTEDFOREMAIL logId = LOG_ID } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY with your API key ( Where is my API key? ) and LOG_ID ( Where is my log ID? ) with the id of the log representing the application deployed by this build configuration.","title":"Using Visual Studio Team Services (Builds)"},{"location":"setup-deployment-tracking/#using-umbraco-cloud","text":"Umbraco Cloud uses Azure to host Umbraco websites, why supporting deployment tracking pretty much corresponds the steps specified in Using Kudu . Navigate to https://your-umbraco-site.scm.s1.umbraco.io where your-umbraco-site is the name of your Umbraco site. Click the Debug console link and navigate to site\\deployments\\tools\\PostDeploymentActions\\deploymenthooks (create it if it doesn't exist). Notice the folder deploymenthooks , which is required in order for your scripts to run on Umbraco Cloud. Unlike Kudu, Umbraco Cloud only executes cmd and bat files. Create a new cmd file: touch create-deployment.cmd with the following content: echo Creating elmah.io deployment cd %POST_DEPLOYMENT_ACTIONS_DIR% cd deploymenthooks powershell -command . .\\create-deployment.ps1 The script executes a PowerShell script, which we will create next: touch create-deployment.ps1 The content of the PowerShell script looks a lot like in Using Kudu , but with some minor tweaks to support Umbraco Cloud: $version = Get-Date -format u $ProgressPreference = SilentlyContinue $commitId = [System.Environment]::GetEnvironmentVariable( SCM_COMMIT_ID ); $deployUrl = https://your-umbraco-site.scm.s1.umbraco.io/api/deployments/$commitId $username = MY_USERNAME $password = MY_PASSWORD $logId = LOG_ID $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(( {0}:{1} -f $username,$password))) $deployInfo = Invoke-RestMethod -Method Get -Uri $deployUrl -Headers @{Authorization=( Basic {0} -f $base64AuthInfo)} $url = 'https://api.elmah.io/v3/deployments?api_key=API_KEY' $body = @{ version = $version description = $deployInfo.message userName = $deployInfo.author userEmail = $deployInfo.author_email logId = $logId } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace your-umbraco-site with the name of your site, MY_USERNAME with your Umbraco Cloud username, MY_PASSWORD with your Umbraco Cloud password, LOG_ID with the id if the elmah.io log that should contain the deployments ( Where is my log ID? ) and finally API_KEY with your elmah.io API key, found and your organization settings page. There you go. When deploying changes to your Umbraco Cloud site, a new deployment is automatically created on elmah.io.","title":"Using Umbraco Cloud"},{"location":"setup-deployment-tracking/#using-bitbucket-pipelines","text":"Pipelines uses scripts, embedded in YAML-files, to configure the different steps required to build and deploy software. To notify elmah.io as part of a build/deployment, the first you will need to do, is to add your API key as a secure environment variable. To do so, go to Settings | Pipelines | Environment variables and add a new variable: Where is my API key? Then add a new script to your build YAML-file after building and deploying your software: pipelines: default: - step: script: ... - curl -X POST -d {\\ version\\ :\\ $BITBUCKET_BUILD_NUMBER\\ } -H Content-Type:application/json https://api.elmah.io/v3/deployments?api_key=$ELMAHIO_APIKEY The script uses curl to invoke the elmah.io Deployments endpoint with the API key ( $ELMAHIO_APIKEY ) and a version number ( $BITBUCKET_BUILD_NUMBER ). The posted JSON can be extended to support additional properties like changelog and the name of the person triggering the deployment. Check out the API documentation for details.","title":"Using Bitbucket Pipelines"},{"location":"setup-deployment-tracking/#using-atlassian-bamboo","text":"Setting up elmah.io Deployment Tracking on Bamboo, is easy using a bit of PowerShell. Add a new Script Task and select Windows PowerShell in Interpreter . Select Inline in Script location and add the following PowerShell to Script body : $ProgressPreference = SilentlyContinue Write-Host $bamboo_buildNumber $url = https://api.elmah.io/v3/deployments?api_key=API_KEY $body = @{ version = $Env:bamboo_buildNumber logId = LOG_ID } Invoke-RestMethod -Method Post -Uri $url -Body $body Replace API_KEY and LOG_ID and everything is configured. The script uses the build number of the current build as version number ( $Env:bamboo_buildNumber ). If you prefer another scheme, Bamboo offers a range of variables .","title":"Using Atlassian Bamboo"},{"location":"setup-deployment-tracking/#decorate-your-messages-with-a-version-number","text":"As default, all messages are decorated with the most recent deployment version. If you want to override this behavior, check out Adding Version Information for details.","title":"Decorate your messages with a version number"},{"location":"setup-deployment-tracking/#versioning-different-services","text":"Chances are that your software consists of multiple services released independently and with different version numbers. This is a common pattern when splitting up a software system in microservices. How you choose to split your elmah.io logs are entirely up to you, but we almost always recommend having a separate log for each service. When doing so, you only want deployment tracking to show the releases from the service you are currently looking at. The problem here is that deployments on elmah.io are shown on all logs as default. To make sure that only deployments related to the service you are looking at are shown, you need to decorate each deployment with the log ID where it belong. The deployments API support this through an optional logId property. If set, the new deployment is only shown on the specified log.","title":"Versioning Different Services"},{"location":"specify-api-key-and-log-id-through-appsettings/","text":"Specify API key and log ID through appSettings When integrating to elmah.io from ASP.NET, MVC, Web API and similar, we use the open source project ELMAH to log uncaught exceptions. ELMAH requires configuration in web.config , which in the case of elmah.io could look something like this: elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io apiKey= API_KEY logId= LOG_ID / /elmah You'd normally use web.config Transformations to specify different API keys and log IDs for different environments (see Use multiple logs for different environments ). When hosting on Microsoft Azure (and other cloud-based offerings), a better approach is to specify configuration in the appSettings element and overwrite values through the web app settings in the Portal. The elmah.io clients built for ASP.NET based web frameworks support this scenario through additional attributes on the errorLog element: appSettings add key= apiKeyRef value= API_KEY / add key= logIdRef value= LOG_ID / /appSettings ... elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io apiKeyKey= apiKeyRef logIdKey= logIdRef / /elmah Unlike the first example, the term Key has been appended to both the apiKey and logId attributes. The values of those attributes needs to match a key specified in appSettings (in this example apiKeyRef and logIdRef ). How you choose to name these keys is entirely up to you, as long as the names match. elmah.io now picks up your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) from the appSettings element and can be overwritten on your production site on Azure.","title":"Specify API key and log ID through appSettings"},{"location":"specify-api-key-and-log-id-through-appsettings/#specify-api-key-and-log-id-through-appsettings","text":"When integrating to elmah.io from ASP.NET, MVC, Web API and similar, we use the open source project ELMAH to log uncaught exceptions. ELMAH requires configuration in web.config , which in the case of elmah.io could look something like this: elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io apiKey= API_KEY logId= LOG_ID / /elmah You'd normally use web.config Transformations to specify different API keys and log IDs for different environments (see Use multiple logs for different environments ). When hosting on Microsoft Azure (and other cloud-based offerings), a better approach is to specify configuration in the appSettings element and overwrite values through the web app settings in the Portal. The elmah.io clients built for ASP.NET based web frameworks support this scenario through additional attributes on the errorLog element: appSettings add key= apiKeyRef value= API_KEY / add key= logIdRef value= LOG_ID / /appSettings ... elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io apiKeyKey= apiKeyRef logIdKey= logIdRef / /elmah Unlike the first example, the term Key has been appended to both the apiKey and logId attributes. The values of those attributes needs to match a key specified in appSettings (in this example apiKeyRef and logIdRef ). How you choose to name these keys is entirely up to you, as long as the names match. elmah.io now picks up your API key ( Where is my API key? ) and log ID ( Where is my log ID? ) from the appSettings element and can be overwritten on your production site on Azure.","title":"Specify API key and log ID through appSettings"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/","text":"Tips and tricks to stay below your message limit Each plan on elmah.io include a maximum number of messages per month. The number of messages are calculated from how many times your applications have called our API and successfully stored a message (in most cases messages equals errors). Deleting messages either one by one or in batches are fully supported, but do not result in a decrease in the current message count. Our costs are primarily around receiving, indexing and notifying about messages, why we cannot allow someone on a lower plan like the Small Business, to log millions and yet millions of messages and then just clean up regularly. We're sure that everyone understand the challenge here. With that said, we want to help you stay within your message limits. Luckily, there's a lot of ways to limit messages. This article contains a list of the most common tactics to staying below your message limit. Ignore Rules The easiest way to limit logged messages, is by ignoring some of them. Ignored messages do not count towards the message limit. Message rules can be configured through the Rules tab on the Log Settings view. Rules consist of a query and an action. The query can either be a full-text query or written using Lucene Query Syntax. To create a new ignore rule, input a query on the Rules tab: All new rules are created with an ignore action as default, why you don't need to click the Then link for this type of rules. The example above, ignore all messages with a status code of 404 . For more information about the possibilities with rules, check out Creating Rules to Perform Actions on Messages . Filters Filters are basically Ignore Rules in disguise. With Filters we have collected the most common ignore rules and made them available as a set of checkboxes. To ignore all message matching a specific filter, enable one of the checkboxes on the Filters tab on Log Settings: Ignore future messages like this Sometimes you may find yourself on the Search tab with a search result thinking: \"I don't really care about these messages\". By clicking the caret next to the query filters, an Ignore future messages like this option is revealed: Clicking this option automatically ignore any future messages matching your current search result. Disable logs Each log can be disabled from Log Settings: Disables logs are shown as semi transparent on the dashboard, to help you remember that you disabled a log. Client-side message filtering Most of our clients support client filtering. All of the filtering options described above, filters messages server-side. This means that your application still communicates with elmah.io's API and need to wait for that to answer (even fore ignored messages). Filtering client-side from ASP.NET, MVC, Web API and other frameworks built on top of ASP.NET, can be done using ELMAH's (the open source project) filtering feature. To filter message, create a method named ErrorLog_Filtering in the Global.asax.cs file: void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args) { var httpContext = args.Context as HttpContext; if (httpContext.Response.StatusCode == 404) { args.Dismiss(); } } If you're using ASP.NET Core, our client supports the OnFilter action: services.AddElmahIo(o = { ... o.OnFilter = message = { return message.StatusCode == 404; }; }); Monitor current usage We send you an email when you have used 90% of your limit and again when reaching the limit. Monitoring your usage is a good supplement to the emails, since you are able to react early on (by upgrading, ignoring errors or something else). There's a usage graph on the Organisation Settings view: By clicking the question mark next to the counter, you will be able to see which logs that are taking up space: Fix bugs Seeing the same error over and over again? Maybe the best idea is to fix it :) I mean, that's the whole purpose of elmah.io: to help you fix bugs. And remember, the less bugs you have, the cheaper elmah.io gets. The ultimate motivation!","title":"Tips and tricks to stay below your message limit"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#tips-and-tricks-to-stay-below-your-message-limit","text":"Each plan on elmah.io include a maximum number of messages per month. The number of messages are calculated from how many times your applications have called our API and successfully stored a message (in most cases messages equals errors). Deleting messages either one by one or in batches are fully supported, but do not result in a decrease in the current message count. Our costs are primarily around receiving, indexing and notifying about messages, why we cannot allow someone on a lower plan like the Small Business, to log millions and yet millions of messages and then just clean up regularly. We're sure that everyone understand the challenge here. With that said, we want to help you stay within your message limits. Luckily, there's a lot of ways to limit messages. This article contains a list of the most common tactics to staying below your message limit.","title":"Tips and tricks to stay below your message limit"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#ignore-rules","text":"The easiest way to limit logged messages, is by ignoring some of them. Ignored messages do not count towards the message limit. Message rules can be configured through the Rules tab on the Log Settings view. Rules consist of a query and an action. The query can either be a full-text query or written using Lucene Query Syntax. To create a new ignore rule, input a query on the Rules tab: All new rules are created with an ignore action as default, why you don't need to click the Then link for this type of rules. The example above, ignore all messages with a status code of 404 . For more information about the possibilities with rules, check out Creating Rules to Perform Actions on Messages .","title":"Ignore Rules"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#filters","text":"Filters are basically Ignore Rules in disguise. With Filters we have collected the most common ignore rules and made them available as a set of checkboxes. To ignore all message matching a specific filter, enable one of the checkboxes on the Filters tab on Log Settings:","title":"Filters"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#ignore-future-messages-like-this","text":"Sometimes you may find yourself on the Search tab with a search result thinking: \"I don't really care about these messages\". By clicking the caret next to the query filters, an Ignore future messages like this option is revealed: Clicking this option automatically ignore any future messages matching your current search result.","title":"Ignore future messages like this"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#disable-logs","text":"Each log can be disabled from Log Settings: Disables logs are shown as semi transparent on the dashboard, to help you remember that you disabled a log.","title":"Disable logs"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#client-side-message-filtering","text":"Most of our clients support client filtering. All of the filtering options described above, filters messages server-side. This means that your application still communicates with elmah.io's API and need to wait for that to answer (even fore ignored messages). Filtering client-side from ASP.NET, MVC, Web API and other frameworks built on top of ASP.NET, can be done using ELMAH's (the open source project) filtering feature. To filter message, create a method named ErrorLog_Filtering in the Global.asax.cs file: void ErrorLog_Filtering(object sender, ExceptionFilterEventArgs args) { var httpContext = args.Context as HttpContext; if (httpContext.Response.StatusCode == 404) { args.Dismiss(); } } If you're using ASP.NET Core, our client supports the OnFilter action: services.AddElmahIo(o = { ... o.OnFilter = message = { return message.StatusCode == 404; }; });","title":"Client-side message filtering"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#monitor-current-usage","text":"We send you an email when you have used 90% of your limit and again when reaching the limit. Monitoring your usage is a good supplement to the emails, since you are able to react early on (by upgrading, ignoring errors or something else). There's a usage graph on the Organisation Settings view: By clicking the question mark next to the counter, you will be able to see which logs that are taking up space:","title":"Monitor current usage"},{"location":"tips-and-tricks-to-stay-below-your-message-limit/#fix-bugs","text":"Seeing the same error over and over again? Maybe the best idea is to fix it :) I mean, that's the whole purpose of elmah.io: to help you fix bugs. And remember, the less bugs you have, the cheaper elmah.io gets. The ultimate motivation!","title":"Fix bugs"},{"location":"upgrade-elmah-io-from-v2-to-v3/","text":"Upgrade elmah.io from v2 to v3 When we launched the new version of our API ( v3 ), we used the jump in major version to fix some issues that would require major changes in our client. One of them being a move to netstandard, which makes the new client usable from .NET Core. With interface changes in the client, upgrading from 2.x to 3.x requires more than simply upgrading the NuGet package. This is a guide to upgrading the Elmah.Io package. If you are logging to elmah.io from ASP.NET Core, you are already using the 3.x client. Updating the NuGet package First, you need to upgrade the Elmah.Io NuGet package: Update-Package Elmah.Io This installs the latest 3.x client. After doing so, we recommend to update to the latest Elmah.Io.Client package as well (updating Elmah.Io already updated Elmah.Io.Client, but to the lowest possible version): Update-Package Elmah.Io.Client The elmah.io.core package is no longer needed and can be uninstalled: Uninstall-Package elmah.io.core Next, you will need to add your API key to your web.config . Where the 2.x client only required a log ID in order to log messages to elmah.io, the new API improves security by introducing API keys ( Where is my API key? ). Copy your API key and extend the errorLog -element in web.config : elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / /elmah If you didn't utilize elmah.io's code from C#, you are ready to rock and roll. Code changes The 3.x client is auto generated from our new Swagger endpoint. This means that the code doesn't work like previously. We have tried to create extension methods to make some of the API work like previously, but since the client now supports both Messages, Logs and Deployments, code changes are needed. If you are using the ErrorSignal class from ELMAH (the open source project) to log exceptions manually, everything works as previously. If you are using methods from the Elmah.Io.Client package, there's a new API documented here: Logging from Console . Elmah.Io.Mvc and Elmah.Io.WebApi When launching the packages for 3.x, we also decided to create two new proxy packages: Elmah.Io.Mvc and Elmah.Io.WebApi. The reason I call them proxy packages is, that they do nothing more than simply install the dependencies needed to log from each framework. The packages are intended for new installs only, so if your code already logs exceptions to elmah.io, there is no need to install any of these packages.","title":"Upgrade elmah.io from v2 to v3"},{"location":"upgrade-elmah-io-from-v2-to-v3/#upgrade-elmahio-from-v2-to-v3","text":"When we launched the new version of our API ( v3 ), we used the jump in major version to fix some issues that would require major changes in our client. One of them being a move to netstandard, which makes the new client usable from .NET Core. With interface changes in the client, upgrading from 2.x to 3.x requires more than simply upgrading the NuGet package. This is a guide to upgrading the Elmah.Io package. If you are logging to elmah.io from ASP.NET Core, you are already using the 3.x client.","title":"Upgrade elmah.io from v2 to v3"},{"location":"upgrade-elmah-io-from-v2-to-v3/#updating-the-nuget-package","text":"First, you need to upgrade the Elmah.Io NuGet package: Update-Package Elmah.Io This installs the latest 3.x client. After doing so, we recommend to update to the latest Elmah.Io.Client package as well (updating Elmah.Io already updated Elmah.Io.Client, but to the lowest possible version): Update-Package Elmah.Io.Client The elmah.io.core package is no longer needed and can be uninstalled: Uninstall-Package elmah.io.core Next, you will need to add your API key to your web.config . Where the 2.x client only required a log ID in order to log messages to elmah.io, the new API improves security by introducing API keys ( Where is my API key? ). Copy your API key and extend the errorLog -element in web.config : elmah errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / /elmah If you didn't utilize elmah.io's code from C#, you are ready to rock and roll.","title":"Updating the NuGet package"},{"location":"upgrade-elmah-io-from-v2-to-v3/#code-changes","text":"The 3.x client is auto generated from our new Swagger endpoint. This means that the code doesn't work like previously. We have tried to create extension methods to make some of the API work like previously, but since the client now supports both Messages, Logs and Deployments, code changes are needed. If you are using the ErrorSignal class from ELMAH (the open source project) to log exceptions manually, everything works as previously. If you are using methods from the Elmah.Io.Client package, there's a new API documented here: Logging from Console .","title":"Code changes"},{"location":"upgrade-elmah-io-from-v2-to-v3/#elmahiomvc-and-elmahiowebapi","text":"When launching the packages for 3.x, we also decided to create two new proxy packages: Elmah.Io.Mvc and Elmah.Io.WebApi. The reason I call them proxy packages is, that they do nothing more than simply install the dependencies needed to log from each framework. The packages are intended for new installs only, so if your code already logs exceptions to elmah.io, there is no need to install any of these packages.","title":"Elmah.Io.Mvc and Elmah.Io.WebApi"},{"location":"use-extended-user-details-without-email-as-id/","text":"Use Extended User Details without Email as Id As you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the user's email as key, while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help. In order to tell elmah.io about the user's email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about ILogger . ILogger is part of the raw elmah.io client , able to communicate with the elmah.io API . ILogger isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, NLog, etc. Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (string.IsNullOrWhiteSpace(args.Message.User)) return; var db = ...; var user = db.GetById User (args.Message.User); args.Message.Data.Add(new Item {Key = X-ELMAHIO-USEREMAIL , Value = user.Email}); } The first line forces creation of the client. The elmah.io ErrorLog implementation uses a singleton ILogger to communicate with elmah.io. We then register a new event handler on the OnMessage event. OnMessage event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the user's email is fetched from the database by calling the GetById method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture. In the last line the data collection of the message is enriched with a new key value pair. X-ELMAHIO-USEREMAIL tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message. That\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:","title":"Use Extended User Details without Email as Id"},{"location":"use-extended-user-details-without-email-as-id/#use-extended-user-details-without-email-as-id","text":"As you may know, ELMAH automatically logs the user identity as part of the error. To make that happen, ELMAH uses the identity object on the current thread, which gets set by most authentication frameworks for .NET (like ASP.NET Membership Provider and ASP.NET Identity). Some of you may use the user's email as key, while others use something like a database identifier. If you are using an email, you are already covered and able to see Extended User Details. If not, you need to provide elmah.io with a little help. In order to tell elmah.io about the user's email and still keeping the identifier in the user field, you can enrich the message with a piece of custom data, before sending it off to elmah.io. In order to fully understand the code below, you need to know a bit about ILogger . ILogger is part of the raw elmah.io client , able to communicate with the elmah.io API . ILogger isn\u2019t dependent of ELMAH and it pretty much corresponds to other logging clients known from log4net, NLog, etc. Elmah.ErrorLog.GetDefault(null); // Forces creation of logger client var logger = ErrorLog.Client; logger.OnMessage += (sender, args) = { if (string.IsNullOrWhiteSpace(args.Message.User)) return; var db = ...; var user = db.GetById User (args.Message.User); args.Message.Data.Add(new Item {Key = X-ELMAHIO-USEREMAIL , Value = user.Email}); } The first line forces creation of the client. The elmah.io ErrorLog implementation uses a singleton ILogger to communicate with elmah.io. We then register a new event handler on the OnMessage event. OnMessage event handlers are executed just before a message is send to elmah.io. In the body of the event handler, the user's email is fetched from the database by calling the GetById method. How you will be able to convert the user ID to an email depends on your tech stack, but you get the picture. In the last line the data collection of the message is enriched with a new key value pair. X-ELMAHIO-USEREMAIL tells elmah.io, that the value of that item contains the email of the user involved in the currently logged message. That\u2019s it! 9 lines of code and you are able to watch every little details about the users experiencing problems on your website:","title":"Use Extended User Details without Email as Id"},{"location":"use-multiple-logs-for-different-environments/","text":"Use multiple logs for different environments We bet that you use at least two environments for hosting your website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation . To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words, deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config. Whether or not you want errors from localhost logged on elmah.io, start by installing the elmah.io NuGet package: Install-Package Elmah.Io Then choose one of the two paths below. Logging to elmah.io from both localhost and production Create two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something telling. During installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the web.release.config file and add the following code: elmah xdt:Transform= Replace errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / security allowRemoteAccess= false / /elmah Replace the API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the web.debug.config file. We didn\u2019t add any ELMAH configuration to this file, why the default values from web.config are used. When selecting the Release configuration, Web. Config transformations will replace the default values in web.config with the new ELMAH configuration from web.release.config . Logging to elmah.io from production only During the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog, since we will remove the default elmah.io config in a moment. When installed open the web.config file and locate the elmah element. Remove the errorLog element and set the allowRemoveAccess attribute to true . Your configuration should look like this now: elmah security allowRemoteAccess= true / /elmah Open the web.release.config file and insert the following code: elmah xdt:Transform= Replace errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / security allowRemoteAccess= false / /elmah Like above, replace API_KEY and LOG_ID with the correct values. Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.","title":"Use multiple logs for different environments"},{"location":"use-multiple-logs-for-different-environments/#use-multiple-logs-for-different-environments","text":"We bet that you use at least two environments for hosting your website: localhost and a production environment. You probably need to log website errors on all your environments, but you don\u2019t want to mix errors from different environments in the same error log. Lucky for you, Microsoft provides a great way of differentiating configuration for different environments called Web Config transformation . To avoid spending numerous hours of debugging, remember that Web Config transformations are only run on deploy and not on build. In other words, deploy your website using Visual Studio, MSBuild or third for the transformations to replace the right ELMAH config. Whether or not you want errors from localhost logged on elmah.io, start by installing the elmah.io NuGet package: Install-Package Elmah.Io Then choose one of the two paths below.","title":"Use multiple logs for different environments"},{"location":"use-multiple-logs-for-different-environments/#logging-to-elmahio-from-both-localhost-and-production","text":"Create two new logs at the elmah.io website called something like \u201cMy website\u201d and \u201cMy website development\u201d. The naming isn\u2019t really important, so pick something telling. During installation of the elmah.io package, NuGet will ask you for your elmah.io log id. In this dialog input the log id from the log named \u201cMy website development\u201d. The default configuration is used when running your website locally. When installed open the web.release.config file and add the following code: elmah xdt:Transform= Replace errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / security allowRemoteAccess= false / /elmah Replace the API_KEY with your API key ( Where is my API key? ) and LOG_ID with your log ID ( Where is my log ID? ). That\u2019s it! You can now build and deploy your website using different configurations. When nothing is changed, Visual Studio will build your website using the Debug configuration. This configuration looks for the ELMAH code in the web.debug.config file. We didn\u2019t add any ELMAH configuration to this file, why the default values from web.config are used. When selecting the Release configuration, Web. Config transformations will replace the default values in web.config with the new ELMAH configuration from web.release.config .","title":"Logging to elmah.io from both localhost and production"},{"location":"use-multiple-logs-for-different-environments/#logging-to-elmahio-from-production-only","text":"During the installation, NuGet will ask you for your elmah.io log id. You don't need to write anything in this dialog, since we will remove the default elmah.io config in a moment. When installed open the web.config file and locate the elmah element. Remove the errorLog element and set the allowRemoveAccess attribute to true . Your configuration should look like this now: elmah security allowRemoteAccess= true / /elmah Open the web.release.config file and insert the following code: elmah xdt:Transform= Replace errorLog type= Elmah.Io.ErrorLog, Elmah.Io ApiKey= API_KEY LogId= LOG_ID / security allowRemoteAccess= false / /elmah Like above, replace API_KEY and LOG_ID with the correct values. Errors happening on your local machine will be logged using ELMAH's default error logger (in-memory) and errors happening in production will be logged to elmah.io.","title":"Logging to elmah.io from production only"},{"location":"using-the-elmah-io-extension-for-visual-studio/","text":"Using the elmah.io extension for Visual Studio Being able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it. Installation Download the elmah.io extension from the Visual Studio Marketplace. Don't use the Extensions and Updates feature inside Visual Studio, since Visual Studio 2015 causes a problem with installing extensions in previous versions. Double/click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2012, 2013 and 2015. Usage Inside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher (Ctrl+Q). You'll see the elmah.io window somewhere: Click the sign in button in the top left corner. Log in using the same provider that you're using on the website: Once logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon: To inspect a single message, double-click it and the message details window will open: The toolbar in the top provides a couple of options: View the message on elmah.io, hide the message and delete the message.","title":"Using the elmah.io extension for Visual Studio"},{"location":"using-the-elmah-io-extension-for-visual-studio/#using-the-elmahio-extension-for-visual-studio","text":"Being able to focus on .NET developers makes it possible to do all kinds of cool things. Like building an elmah.io extension for Visual Studio. That's exactly what we've done and here's how to use it.","title":"Using the elmah.io extension for Visual Studio"},{"location":"using-the-elmah-io-extension-for-visual-studio/#installation","text":"Download the elmah.io extension from the Visual Studio Marketplace. Don't use the Extensions and Updates feature inside Visual Studio, since Visual Studio 2015 causes a problem with installing extensions in previous versions. Double/click the downloaded VSIX and enable elmah.io in the versions of Visual Studio of your choice. The extension supports Visual Studio 2012, 2013 and 2015.","title":"Installation"},{"location":"using-the-elmah-io-extension-for-visual-studio/#usage","text":"Inside Visual Studio navigate to View | Other Windows | elmah.io or simply search for elmah.io in the Quick Launcher (Ctrl+Q). You'll see the elmah.io window somewhere: Click the sign in button in the top left corner. Log in using the same provider that you're using on the website: Once logged in, the list of logs is populated with all of your logs defined at elmah.io. Select a log and click the search icon: To inspect a single message, double-click it and the message details window will open: The toolbar in the top provides a couple of options: View the message on elmah.io, hide the message and delete the message.","title":"Usage"},{"location":"using-the-rest-api/","text":"Using the REST API Using the REST API Security Messages Creating messages Getting a message Searching messages Deleting a message Deleting messages Hiding a message Under the hood, everything related to communicating with elmah.io happens through our REST API. In this article, we will present the possibilities using the API in a use case driven approach. For a details reference of the various endpoints, visit the API V3 documentation or the API V2 documentation . Security Security in V3 of our API is implemented using API keys ( Where is my API key? ). When creating a new organization, a default API key is automatically created: You can create new keys and revoke an existing key, if you suspect that the key has been compromised. The API key acts as a secret and should not be available to people outside your team/organization. All requests to the elmah.io API needs the API key as either a HTTP header or query string parameter named api_key like this: GET https://api.elmah.io/v3/messages/LOG_ID?api_key=MY_API_KEY API V2 doesn't require (or support) API keys, why someone could extract information from your log using the log ID only. The log ID is used to tell elmah.io which log to put a new error into, when logged from your application ( Where is my log ID? ). As long as V2 of our API is available, the log ID needs to be kept secret as well. Messages Creating messages Before doing anything, we will need some messages to play with. The Create Message endpoint does just that. To create a simple message, POST to: # API V3 POST https://api.elmah.io/v3/messages/LOG_ID # API V2 POST https://elmah.io/api/v2/messages?logid=LOG_ID with a JSON body: { title : This is a test message } (replace LOG_ID with your log ID): The title field is the only required field on a message, but fields for specifying severity, timestamp etc. are there. For more information, check out the documentation . If everything where successful, the API returns a HTTP status code of 201 and a location to where to fetch the new message. If the endpoint fails, the response will contain a description of what went wrong. Forgetting to set Content-Length , Content-Type and similar, will result in an invalid request. Getting a message In the example above, the API returned the URL for getting the newly created message: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 # API V2 GET https://elmah.io/api/v2/messages?id=81C7C282C9FDAEA3 logid=LOG_ID By making a GET request to this URL, we get back the message details: { id : 99CDEA3D6A631F09 , title : This is a test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information } As shown in the returned body, elmah.io automatically inserted some missing fields like a timestamp and a severity. If no severity is specified during creating, a message is threated as information. Searching messages For the demo, we have inserted a couple of additional messages, which leads us to the next endpoint: searching messages. The search endpoint shares the root path with the get message endpoint, but only take a log ID. The simplest possible configuration, queries the API for a list of the 15 most recent messages by calling: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID # API V2 GET https://elmah.io/api/v2/messages?logid=LOG_ID The response body looks like this: { messages : [ { id : 81C7C282C9FDAEA3 , title : This is another test message , dateTime : 2016-07-03T14:31:45.053851Z , severity : Information }, { id : 99CDEA3D6A631F09 , title : This is a test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information }, ... ], total : 42 } For simplicity, the response has been simplified by not showing all of the results. The important thing to notice here, is the list of messages and the total count. messages contain 15 messages, which is the default page size in the search endpoint. To increase the number of returned messages, set the pagesize parameter in the URL (max 100 messages per request). The total count tells you, if there are more messages matching your search. To select messages from the next page, use the pageindex parameter. Returning all messages may be fine, but being able to search by terms is even more fun. To search, use the query , from and to parameters as shown here: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID?query=another # API V2 GET https://elmah.io/api/v2/messages?logid=LOG_ID?query=another Searching for another will return the following response: { messages : [ { id : 81C7C282C9FDAEA3 , title : This is another test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information } ], total : 1 } Now only 81C7C282C9FDAEA3 shows up, since that message contains the text another in the title field. Like specifying the query parameter, you can limit the number of messages using the from , to and pagesize parameters. Deleting a message When fixing the bug causing an error logged at elmah.io, you may want to delete the error. Deleting a single error is as easy as fetching it. Create a DELETE request to the errors unique URL: # API V3 DELETE https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 # API V2 DELETE https://elmah.io/api/v2/messages?id=81C7C282C9FDAEA3 logid=LOG_ID When successfully deleted, the delete endpoint returns a HTTP status code of 200 . Deleting messages Deleting messages one by one can be tedious work. To delete multiple errors, you can utilize the Delete Messages endpoint by creating a DELETE request to: # API V3 DELETE https://api.elmah.io/v3/messages/LOG_ID # API V2 DELETE https://elmah.io/api/v2/messages?logid=LOG_ID The request must contain a body with at least a query: { query : test } An option for deleting messages by date range is available as well. Check out the API documentation for details. Hiding a message Depending on your use case, you may want to hide a message, rather than deleting it. Hidden messages are not shown as default through neither the UI, nor the REST API. But you will be able to search for them by enabling the Hidden checkbox on the UI. To hide a message, use the _hide endpoints like this: # API V3 POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_hide # API V2 POST https://elmah.io/api/v2/messages/_hide?id=99CDEA3D6A631F09 logid=LOG_ID If successful, the endpoint returns a HTTP status code of 200 .","title":"Using the REST API"},{"location":"using-the-rest-api/#using-the-rest-api","text":"Using the REST API Security Messages Creating messages Getting a message Searching messages Deleting a message Deleting messages Hiding a message Under the hood, everything related to communicating with elmah.io happens through our REST API. In this article, we will present the possibilities using the API in a use case driven approach. For a details reference of the various endpoints, visit the API V3 documentation or the API V2 documentation .","title":"Using the REST API"},{"location":"using-the-rest-api/#security","text":"Security in V3 of our API is implemented using API keys ( Where is my API key? ). When creating a new organization, a default API key is automatically created: You can create new keys and revoke an existing key, if you suspect that the key has been compromised. The API key acts as a secret and should not be available to people outside your team/organization. All requests to the elmah.io API needs the API key as either a HTTP header or query string parameter named api_key like this: GET https://api.elmah.io/v3/messages/LOG_ID?api_key=MY_API_KEY API V2 doesn't require (or support) API keys, why someone could extract information from your log using the log ID only. The log ID is used to tell elmah.io which log to put a new error into, when logged from your application ( Where is my log ID? ). As long as V2 of our API is available, the log ID needs to be kept secret as well.","title":"Security"},{"location":"using-the-rest-api/#messages","text":"","title":"Messages"},{"location":"using-the-rest-api/#creating-messages","text":"Before doing anything, we will need some messages to play with. The Create Message endpoint does just that. To create a simple message, POST to: # API V3 POST https://api.elmah.io/v3/messages/LOG_ID # API V2 POST https://elmah.io/api/v2/messages?logid=LOG_ID with a JSON body: { title : This is a test message } (replace LOG_ID with your log ID): The title field is the only required field on a message, but fields for specifying severity, timestamp etc. are there. For more information, check out the documentation . If everything where successful, the API returns a HTTP status code of 201 and a location to where to fetch the new message. If the endpoint fails, the response will contain a description of what went wrong. Forgetting to set Content-Length , Content-Type and similar, will result in an invalid request.","title":"Creating messages"},{"location":"using-the-rest-api/#getting-a-message","text":"In the example above, the API returned the URL for getting the newly created message: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 # API V2 GET https://elmah.io/api/v2/messages?id=81C7C282C9FDAEA3 logid=LOG_ID By making a GET request to this URL, we get back the message details: { id : 99CDEA3D6A631F09 , title : This is a test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information } As shown in the returned body, elmah.io automatically inserted some missing fields like a timestamp and a severity. If no severity is specified during creating, a message is threated as information.","title":"Getting a message"},{"location":"using-the-rest-api/#searching-messages","text":"For the demo, we have inserted a couple of additional messages, which leads us to the next endpoint: searching messages. The search endpoint shares the root path with the get message endpoint, but only take a log ID. The simplest possible configuration, queries the API for a list of the 15 most recent messages by calling: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID # API V2 GET https://elmah.io/api/v2/messages?logid=LOG_ID The response body looks like this: { messages : [ { id : 81C7C282C9FDAEA3 , title : This is another test message , dateTime : 2016-07-03T14:31:45.053851Z , severity : Information }, { id : 99CDEA3D6A631F09 , title : This is a test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information }, ... ], total : 42 } For simplicity, the response has been simplified by not showing all of the results. The important thing to notice here, is the list of messages and the total count. messages contain 15 messages, which is the default page size in the search endpoint. To increase the number of returned messages, set the pagesize parameter in the URL (max 100 messages per request). The total count tells you, if there are more messages matching your search. To select messages from the next page, use the pageindex parameter. Returning all messages may be fine, but being able to search by terms is even more fun. To search, use the query , from and to parameters as shown here: # API V3 GET https://api.elmah.io/v3/messages/LOG_ID?query=another # API V2 GET https://elmah.io/api/v2/messages?logid=LOG_ID?query=another Searching for another will return the following response: { messages : [ { id : 81C7C282C9FDAEA3 , title : This is another test message , dateTime : 2016-07-03T14:25:46.087857Z , severity : Information } ], total : 1 } Now only 81C7C282C9FDAEA3 shows up, since that message contains the text another in the title field. Like specifying the query parameter, you can limit the number of messages using the from , to and pagesize parameters.","title":"Searching messages"},{"location":"using-the-rest-api/#deleting-a-message","text":"When fixing the bug causing an error logged at elmah.io, you may want to delete the error. Deleting a single error is as easy as fetching it. Create a DELETE request to the errors unique URL: # API V3 DELETE https://api.elmah.io/v3/messages/LOG_ID/81C7C282C9FDAEA3 # API V2 DELETE https://elmah.io/api/v2/messages?id=81C7C282C9FDAEA3 logid=LOG_ID When successfully deleted, the delete endpoint returns a HTTP status code of 200 .","title":"Deleting a message"},{"location":"using-the-rest-api/#deleting-messages","text":"Deleting messages one by one can be tedious work. To delete multiple errors, you can utilize the Delete Messages endpoint by creating a DELETE request to: # API V3 DELETE https://api.elmah.io/v3/messages/LOG_ID # API V2 DELETE https://elmah.io/api/v2/messages?logid=LOG_ID The request must contain a body with at least a query: { query : test } An option for deleting messages by date range is available as well. Check out the API documentation for details.","title":"Deleting messages"},{"location":"using-the-rest-api/#hiding-a-message","text":"Depending on your use case, you may want to hide a message, rather than deleting it. Hidden messages are not shown as default through neither the UI, nor the REST API. But you will be able to search for them by enabling the Hidden checkbox on the UI. To hide a message, use the _hide endpoints like this: # API V3 POST https://api.elmah.io/v3/messages/LOG_ID/99CDEA3D6A631F09/_hide # API V2 POST https://elmah.io/api/v2/messages/_hide?id=99CDEA3D6A631F09 logid=LOG_ID If successful, the endpoint returns a HTTP status code of 200 .","title":"Hiding a message"},{"location":"where-is-my-api-key/","text":"Where is my API key? API keys are a new concept introduced with version 3.x of our API . API keys are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the API Keys tab and copy your API key: This view also lets you generate new API keys and revoke an existing key, if you believe that the key is compromised.","title":"Where is my API key"},{"location":"where-is-my-api-key/#where-is-my-api-key","text":"API keys are a new concept introduced with version 3.x of our API . API keys are located on the organization settings page. To open organization settings, click the gears icon next to your organization name on either the left menu or through the dashboard: When on the organization settings page, click the API Keys tab and copy your API key: This view also lets you generate new API keys and revoke an existing key, if you believe that the key is compromised.","title":"Where is my API key?"},{"location":"where-is-my-log-id/","text":"Where is my log ID? A log ID represents a log on elmah.io. A log is a container for log messages. How you choose to split up your logs is totally up to you, but creating a log per application/service is what most users do. The log ID is located on the log settings page. To open log settings, click the gears icon next to the log name in the menu or in the log box on the dashboard: When clicking on the icon, you are taken directly to the Install tab:","title":"Where is my log ID"},{"location":"where-is-my-log-id/#where-is-my-log-id","text":"A log ID represents a log on elmah.io. A log is a container for log messages. How you choose to split up your logs is totally up to you, but creating a log per application/service is what most users do. The log ID is located on the log settings page. To open log settings, click the gears icon next to the log name in the menu or in the log box on the dashboard: When clicking on the icon, you are taken directly to the Install tab:","title":"Where is my log ID?"},{"location":"IntegrateWith/HipChat/","text":"Integrate with HipChat Before we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page. Create a new token with the Notification type and label it something meaningful: We will need the generated token in a minute, so keep that tab open. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM): Field Value Method POST URL https://api.hipchat.com/v1/rooms/message?format=json auth_token=YOUR_TOKEN Content Type application/x-www-form-urlencoded Body room_id=YOUR_ROOM from=elmah.io message=$message The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:","title":"Integrate with HipChat"},{"location":"IntegrateWith/HipChat/#integrate-with-hipchat","text":"Before we dig into the details of elmah.io, you should sign up or log into HipChat. Create a new room for your team and go to the API page. Create a new token with the Notification type and label it something meaningful: We will need the generated token in a minute, so keep that tab open. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on HipChat every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_ROOM): Field Value Method POST URL https://api.hipchat.com/v1/rooms/message?format=json auth_token=YOUR_TOKEN Content Type application/x-www-form-urlencoded Body room_id=YOUR_ROOM from=elmah.io message=$message The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the HipChat API, every time a new error is logged. The message at elmah.io is shown as the chat message inside HipChat:","title":"Integrate with HipChat"},{"location":"IntegrateWith/Slack/","text":"Integrate with Slack Start by copying your Slack-token from the API page . We will need this when setting up the integration. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL): Field Value Method POST URL https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:","title":"Integrate with Slack"},{"location":"IntegrateWith/Slack/#integrate-with-slack","text":"Start by copying your Slack-token from the API page . We will need this when setting up the integration. On elmah.io, go to the Rules tab beneath your log settings. In this example we want a message on Slack every time a new error is logged in our elmah.io log. To do this, name your rule and input a query like illustrated on the following screenshot: Hit the Then link and select HTTP request. Input the following values (remember to replace YOUR_TOKEN and YOUR_CHANNEL): Field Value Method POST URL https://slack.com/api/chat.postMessage?token=YOUR_TOKEN channel=YOUR_CHANNEL text=$message username=elmah.io The final result should look like this: Click the OK button and add the new rule by clicking Add. This configuration tells elmah.io, to make a HTTP request against the Slack API, every time a new error is logged. The message at elmah.io is shown as the chat message inside Slack:","title":"Integrate with Slack"},{"location":"IntegrateWith/Zapier/","text":"Integrate with Zapier In short Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged. Create a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown: Select elmah.io in the Choose a Trigger app\u2026 dropdown and then select New Error in the Choose a Trigger\u2026 dropdown. In the Choose an Action app\u2026 select GitHub and select Create Issue in the Choose an Action\u2026 dropdown. This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue. In section 2 select the Connect a different elmah.io Account and input a name and the log id of the log you want to integrate: Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error: In step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected bug as a label. Test the Zap an hit Continue : Finally, name your Zap and click the Turn Zap on button: When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!","title":"Integrate with Zapier"},{"location":"IntegrateWith/Zapier/#integrate-with-zapier","text":"In short Zapier is the place to go, if you need to integrate two or more online systems. In this article we use an integration point provided by elmah.io and Zapier called a trigger. A trigger is (as the name suggest) something that triggers an action in Zapier. In case of elmah.io, the trigger available is when new messages are logged to your log. Actions exists on the other side of the integration and tells Zapier what to do every time a trigger is fired. Hundreds of actions exists, in this example we use the GitHub action to create a new issue every time a new message is logged. Create a new account on Zapier.com. Then click the Make a New Zap button. The create new Zap page is shown: Select elmah.io in the Choose a Trigger app\u2026 dropdown and then select New Error in the Choose a Trigger\u2026 dropdown. In the Choose an Action app\u2026 select GitHub and select Create Issue in the Choose an Action\u2026 dropdown. This configuration tells Zapier to create a new issue at GitHub, every time a new error is logged in elmah.io. The action could be one of the hundreds of other integrations available at Zapier. Click Continue. In section 2 select the Connect a different elmah.io Account and input a name and the log id of the log you want to integrate: Authorize your GitHub account (or whatever integration you\u2019ve selected in the action step) and click Continue . Step 4 isn\u2019t mandatory, but here you will be able to setup additional constraints to the Zap. If you\u2019re using elmah.io for other than errors, you can tell Zapier only to create a new GitHub issue when the message is an actual error: In step 5 you specify how the new issue should create created. In this example I\u2019ve chosen the GitHub project for our open source client. For the title, I use two of the variables available from the elmah.io action. For a complete list of variables, click the Insert button next to each textbox. The variable will look something like this \u201cMyApp: An error occurred\u201d. The issue body contains the detail of the error (typically a stacktrace). Finally I\u2019ve selected bug as a label. Test the Zap an hit Continue : Finally, name your Zap and click the Turn Zap on button: When future errors are logged in your elmah.io log, a GitHub issue is automatically created. How awesome is that!","title":"Integrate with Zapier"}]}